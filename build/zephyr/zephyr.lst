
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	98 0c 02 20 bd 2e 00 00 75 79 00 00 91 2e 00 00     ... ....uy......
  10:	91 2e 00 00 91 2e 00 00 91 2e 00 00 91 2e 00 00     ................
	...
  2c:	01 28 00 00 91 2e 00 00 00 00 00 00 a9 27 00 00     .(...........'..
  3c:	91 2e 00 00                                         ....

00000040 <_irq_vector_table>:
  40:	81 28 00 00 81 28 00 00 81 28 00 00 81 28 00 00     .(...(...(...(..
  50:	81 28 00 00 81 28 00 00 81 28 00 00 81 28 00 00     .(...(...(...(..
  60:	81 28 00 00 81 28 00 00 81 28 00 00 81 28 00 00     .(...(...(...(..
  70:	81 28 00 00 81 28 00 00 81 28 00 00 81 28 00 00     .(...(...(...(..
  80:	81 28 00 00 81 28 00 00 81 28 00 00 81 28 00 00     .(...(...(...(..
  90:	81 28 00 00 81 28 00 00 81 28 00 00 81 28 00 00     .(...(...(...(..
  a0:	81 28 00 00 81 28 00 00 81 28 00 00 81 28 00 00     .(...(...(...(..
  b0:	81 28 00 00 81 28 00 00 81 28 00 00 81 28 00 00     .(...(...(...(..
  c0:	81 28 00 00 81 28 00 00 81 28 00 00 81 28 00 00     .(...(...(...(..
  d0:	81 28 00 00 81 28 00 00 81 28 00 00 81 28 00 00     .(...(...(...(..
  e0:	81 28 00 00 81 28 00 00 81 28 00 00 81 28 00 00     .(...(...(...(..
  f0:	81 28 00 00 81 28 00 00 81 28 00 00 81 28 00 00     .(...(...(...(..
 100:	81 28 00 00 81 28 00 00 81 28 00 00 81 28 00 00     .(...(...(...(..
 110:	81 28 00 00 81 28 00 00 81 28 00 00 81 28 00 00     .(...(...(...(..
 120:	81 28 00 00 81 28 00 00 81 28 00 00 81 28 00 00     .(...(...(...(..
 130:	81 28 00 00 81 28 00 00 81 28 00 00 81 28 00 00     .(...(...(...(..
 140:	81 28 00 00 81 28 00 00 81 28 00 00 81 28 00 00     .(...(...(...(..
 150:	81 28 00 00                                         .(..

Disassembly of section text:

00000154 <__aeabi_frsub>:
     154:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
     158:	e002      	b.n	160 <__addsf3>
     15a:	bf00      	nop

0000015c <__aeabi_fsub>:
     15c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00000160 <__addsf3>:
     160:	0042      	lsls	r2, r0, #1
     162:	bf1f      	itttt	ne
     164:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     168:	ea92 0f03 	teqne	r2, r3
     16c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     170:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     174:	d06a      	beq.n	24c <CONFIG_SRAM_SIZE+0x8c>
     176:	ea4f 6212 	mov.w	r2, r2, lsr #24
     17a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     17e:	bfc1      	itttt	gt
     180:	18d2      	addgt	r2, r2, r3
     182:	4041      	eorgt	r1, r0
     184:	4048      	eorgt	r0, r1
     186:	4041      	eorgt	r1, r0
     188:	bfb8      	it	lt
     18a:	425b      	neglt	r3, r3
     18c:	2b19      	cmp	r3, #25
     18e:	bf88      	it	hi
     190:	4770      	bxhi	lr
     192:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     196:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     19a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     19e:	bf18      	it	ne
     1a0:	4240      	negne	r0, r0
     1a2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     1a6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     1aa:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     1ae:	bf18      	it	ne
     1b0:	4249      	negne	r1, r1
     1b2:	ea92 0f03 	teq	r2, r3
     1b6:	d03f      	beq.n	238 <CONFIG_SRAM_SIZE+0x78>
     1b8:	f1a2 0201 	sub.w	r2, r2, #1
     1bc:	fa41 fc03 	asr.w	ip, r1, r3
     1c0:	eb10 000c 	adds.w	r0, r0, ip
     1c4:	f1c3 0320 	rsb	r3, r3, #32
     1c8:	fa01 f103 	lsl.w	r1, r1, r3
     1cc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     1d0:	d502      	bpl.n	1d8 <CONFIG_SRAM_SIZE+0x18>
     1d2:	4249      	negs	r1, r1
     1d4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     1d8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     1dc:	d313      	bcc.n	206 <CONFIG_SRAM_SIZE+0x46>
     1de:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     1e2:	d306      	bcc.n	1f2 <CONFIG_SRAM_SIZE+0x32>
     1e4:	0840      	lsrs	r0, r0, #1
     1e6:	ea4f 0131 	mov.w	r1, r1, rrx
     1ea:	f102 0201 	add.w	r2, r2, #1
     1ee:	2afe      	cmp	r2, #254	; 0xfe
     1f0:	d251      	bcs.n	296 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x16>
     1f2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     1f6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     1fa:	bf08      	it	eq
     1fc:	f020 0001 	biceq.w	r0, r0, #1
     200:	ea40 0003 	orr.w	r0, r0, r3
     204:	4770      	bx	lr
     206:	0049      	lsls	r1, r1, #1
     208:	eb40 0000 	adc.w	r0, r0, r0
     20c:	3a01      	subs	r2, #1
     20e:	bf28      	it	cs
     210:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     214:	d2ed      	bcs.n	1f2 <CONFIG_SRAM_SIZE+0x32>
     216:	fab0 fc80 	clz	ip, r0
     21a:	f1ac 0c08 	sub.w	ip, ip, #8
     21e:	ebb2 020c 	subs.w	r2, r2, ip
     222:	fa00 f00c 	lsl.w	r0, r0, ip
     226:	bfaa      	itet	ge
     228:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     22c:	4252      	neglt	r2, r2
     22e:	4318      	orrge	r0, r3
     230:	bfbc      	itt	lt
     232:	40d0      	lsrlt	r0, r2
     234:	4318      	orrlt	r0, r3
     236:	4770      	bx	lr
     238:	f092 0f00 	teq	r2, #0
     23c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     240:	bf06      	itte	eq
     242:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     246:	3201      	addeq	r2, #1
     248:	3b01      	subne	r3, #1
     24a:	e7b5      	b.n	1b8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x4b>
     24c:	ea4f 0341 	mov.w	r3, r1, lsl #1
     250:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     254:	bf18      	it	ne
     256:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     25a:	d021      	beq.n	2a0 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x20>
     25c:	ea92 0f03 	teq	r2, r3
     260:	d004      	beq.n	26c <CONFIG_SRAM_SIZE+0xac>
     262:	f092 0f00 	teq	r2, #0
     266:	bf08      	it	eq
     268:	4608      	moveq	r0, r1
     26a:	4770      	bx	lr
     26c:	ea90 0f01 	teq	r0, r1
     270:	bf1c      	itt	ne
     272:	2000      	movne	r0, #0
     274:	4770      	bxne	lr
     276:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     27a:	d104      	bne.n	286 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x6>
     27c:	0040      	lsls	r0, r0, #1
     27e:	bf28      	it	cs
     280:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     284:	4770      	bx	lr
     286:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     28a:	bf3c      	itt	cc
     28c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     290:	4770      	bxcc	lr
     292:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     296:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     29a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     29e:	4770      	bx	lr
     2a0:	ea7f 6222 	mvns.w	r2, r2, asr #24
     2a4:	bf16      	itet	ne
     2a6:	4608      	movne	r0, r1
     2a8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     2ac:	4601      	movne	r1, r0
     2ae:	0242      	lsls	r2, r0, #9
     2b0:	bf06      	itte	eq
     2b2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     2b6:	ea90 0f01 	teqeq	r0, r1
     2ba:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     2be:	4770      	bx	lr

000002c0 <__aeabi_ui2f>:
     2c0:	f04f 0300 	mov.w	r3, #0
     2c4:	e004      	b.n	2d0 <__aeabi_i2f+0x8>
     2c6:	bf00      	nop

000002c8 <__aeabi_i2f>:
     2c8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     2cc:	bf48      	it	mi
     2ce:	4240      	negmi	r0, r0
     2d0:	ea5f 0c00 	movs.w	ip, r0
     2d4:	bf08      	it	eq
     2d6:	4770      	bxeq	lr
     2d8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     2dc:	4601      	mov	r1, r0
     2de:	f04f 0000 	mov.w	r0, #0
     2e2:	e01c      	b.n	31e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x1e>

000002e4 <__aeabi_ul2f>:
     2e4:	ea50 0201 	orrs.w	r2, r0, r1
     2e8:	bf08      	it	eq
     2ea:	4770      	bxeq	lr
     2ec:	f04f 0300 	mov.w	r3, #0
     2f0:	e00a      	b.n	308 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8>
     2f2:	bf00      	nop

000002f4 <__aeabi_l2f>:
     2f4:	ea50 0201 	orrs.w	r2, r0, r1
     2f8:	bf08      	it	eq
     2fa:	4770      	bxeq	lr
     2fc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     300:	d502      	bpl.n	308 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8>
     302:	4240      	negs	r0, r0
     304:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     308:	ea5f 0c01 	movs.w	ip, r1
     30c:	bf02      	ittt	eq
     30e:	4684      	moveq	ip, r0
     310:	4601      	moveq	r1, r0
     312:	2000      	moveq	r0, #0
     314:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     318:	bf08      	it	eq
     31a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     31e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     322:	fabc f28c 	clz	r2, ip
     326:	3a08      	subs	r2, #8
     328:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     32c:	db10      	blt.n	350 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x50>
     32e:	fa01 fc02 	lsl.w	ip, r1, r2
     332:	4463      	add	r3, ip
     334:	fa00 fc02 	lsl.w	ip, r0, r2
     338:	f1c2 0220 	rsb	r2, r2, #32
     33c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     340:	fa20 f202 	lsr.w	r2, r0, r2
     344:	eb43 0002 	adc.w	r0, r3, r2
     348:	bf08      	it	eq
     34a:	f020 0001 	biceq.w	r0, r0, #1
     34e:	4770      	bx	lr
     350:	f102 0220 	add.w	r2, r2, #32
     354:	fa01 fc02 	lsl.w	ip, r1, r2
     358:	f1c2 0220 	rsb	r2, r2, #32
     35c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     360:	fa21 f202 	lsr.w	r2, r1, r2
     364:	eb43 0002 	adc.w	r0, r3, r2
     368:	bf08      	it	eq
     36a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     36e:	4770      	bx	lr

00000370 <__aeabi_uldivmod>:
     370:	b953      	cbnz	r3, 388 <__aeabi_uldivmod+0x18>
     372:	b94a      	cbnz	r2, 388 <__aeabi_uldivmod+0x18>
     374:	2900      	cmp	r1, #0
     376:	bf08      	it	eq
     378:	2800      	cmpeq	r0, #0
     37a:	bf1c      	itt	ne
     37c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     380:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     384:	f000 b80c 	b.w	3a0 <__aeabi_idiv0>
     388:	f1ad 0c08 	sub.w	ip, sp, #8
     38c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     390:	f000 f808 	bl	3a4 <__udivmoddi4>
     394:	f8dd e004 	ldr.w	lr, [sp, #4]
     398:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     39c:	b004      	add	sp, #16
     39e:	4770      	bx	lr

000003a0 <__aeabi_idiv0>:
     3a0:	4770      	bx	lr
     3a2:	bf00      	nop

000003a4 <__udivmoddi4>:
     3a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     3a8:	4607      	mov	r7, r0
     3aa:	468c      	mov	ip, r1
     3ac:	4608      	mov	r0, r1
     3ae:	9e09      	ldr	r6, [sp, #36]	; 0x24
     3b0:	4615      	mov	r5, r2
     3b2:	463c      	mov	r4, r7
     3b4:	4619      	mov	r1, r3
     3b6:	2b00      	cmp	r3, #0
     3b8:	f040 80c5 	bne.w	546 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x5e>
     3bc:	4282      	cmp	r2, r0
     3be:	fab2 f782 	clz	r7, r2
     3c2:	d946      	bls.n	452 <CONFIG_FLASH_SIZE+0x52>
     3c4:	b14f      	cbz	r7, 3da <__udivmoddi4+0x36>
     3c6:	f1c7 0e20 	rsb	lr, r7, #32
     3ca:	fa00 f307 	lsl.w	r3, r0, r7
     3ce:	40bd      	lsls	r5, r7
     3d0:	fa24 fe0e 	lsr.w	lr, r4, lr
     3d4:	40bc      	lsls	r4, r7
     3d6:	ea4e 0c03 	orr.w	ip, lr, r3
     3da:	ea4f 4815 	mov.w	r8, r5, lsr #16
     3de:	fa1f fe85 	uxth.w	lr, r5
     3e2:	0c22      	lsrs	r2, r4, #16
     3e4:	fbbc f9f8 	udiv	r9, ip, r8
     3e8:	fb08 c319 	mls	r3, r8, r9, ip
     3ec:	fb09 fa0e 	mul.w	sl, r9, lr
     3f0:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     3f4:	459a      	cmp	sl, r3
     3f6:	d928      	bls.n	44a <CONFIG_FLASH_SIZE+0x4a>
     3f8:	18eb      	adds	r3, r5, r3
     3fa:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     3fe:	d204      	bcs.n	40a <CONFIG_FLASH_SIZE+0xa>
     400:	459a      	cmp	sl, r3
     402:	d902      	bls.n	40a <CONFIG_FLASH_SIZE+0xa>
     404:	f1a9 0002 	sub.w	r0, r9, #2
     408:	442b      	add	r3, r5
     40a:	eba3 030a 	sub.w	r3, r3, sl
     40e:	b2a4      	uxth	r4, r4
     410:	fbb3 f2f8 	udiv	r2, r3, r8
     414:	fb08 3312 	mls	r3, r8, r2, r3
     418:	fb02 fe0e 	mul.w	lr, r2, lr
     41c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     420:	45a6      	cmp	lr, r4
     422:	d914      	bls.n	44e <CONFIG_FLASH_SIZE+0x4e>
     424:	192c      	adds	r4, r5, r4
     426:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     42a:	d203      	bcs.n	434 <CONFIG_FLASH_SIZE+0x34>
     42c:	45a6      	cmp	lr, r4
     42e:	d901      	bls.n	434 <CONFIG_FLASH_SIZE+0x34>
     430:	1e93      	subs	r3, r2, #2
     432:	442c      	add	r4, r5
     434:	eba4 040e 	sub.w	r4, r4, lr
     438:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     43c:	b11e      	cbz	r6, 446 <CONFIG_FLASH_SIZE+0x46>
     43e:	40fc      	lsrs	r4, r7
     440:	2300      	movs	r3, #0
     442:	6034      	str	r4, [r6, #0]
     444:	6073      	str	r3, [r6, #4]
     446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     44a:	4648      	mov	r0, r9
     44c:	e7dd      	b.n	40a <CONFIG_FLASH_SIZE+0xa>
     44e:	4613      	mov	r3, r2
     450:	e7f0      	b.n	434 <CONFIG_FLASH_SIZE+0x34>
     452:	b902      	cbnz	r2, 456 <CONFIG_FLASH_SIZE+0x56>
     454:	deff      	udf	#255	; 0xff
     456:	bb87      	cbnz	r7, 4ba <CONFIG_FLASH_SIZE+0xba>
     458:	1a83      	subs	r3, r0, r2
     45a:	2101      	movs	r1, #1
     45c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     460:	b2aa      	uxth	r2, r5
     462:	0c20      	lsrs	r0, r4, #16
     464:	fbb3 fcfe 	udiv	ip, r3, lr
     468:	fb0e 331c 	mls	r3, lr, ip, r3
     46c:	fb0c f802 	mul.w	r8, ip, r2
     470:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     474:	4598      	cmp	r8, r3
     476:	d962      	bls.n	53e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x56>
     478:	18eb      	adds	r3, r5, r3
     47a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     47e:	d204      	bcs.n	48a <CONFIG_FLASH_SIZE+0x8a>
     480:	4598      	cmp	r8, r3
     482:	d902      	bls.n	48a <CONFIG_FLASH_SIZE+0x8a>
     484:	f1ac 0002 	sub.w	r0, ip, #2
     488:	442b      	add	r3, r5
     48a:	eba3 0308 	sub.w	r3, r3, r8
     48e:	b2a4      	uxth	r4, r4
     490:	fbb3 fcfe 	udiv	ip, r3, lr
     494:	fb0e 331c 	mls	r3, lr, ip, r3
     498:	fb0c f202 	mul.w	r2, ip, r2
     49c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     4a0:	42a2      	cmp	r2, r4
     4a2:	d94e      	bls.n	542 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x5a>
     4a4:	192c      	adds	r4, r5, r4
     4a6:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     4aa:	d204      	bcs.n	4b6 <CONFIG_FLASH_SIZE+0xb6>
     4ac:	42a2      	cmp	r2, r4
     4ae:	d902      	bls.n	4b6 <CONFIG_FLASH_SIZE+0xb6>
     4b0:	f1ac 0302 	sub.w	r3, ip, #2
     4b4:	442c      	add	r4, r5
     4b6:	1aa4      	subs	r4, r4, r2
     4b8:	e7be      	b.n	438 <CONFIG_FLASH_SIZE+0x38>
     4ba:	f1c7 0c20 	rsb	ip, r7, #32
     4be:	40bd      	lsls	r5, r7
     4c0:	fa00 f307 	lsl.w	r3, r0, r7
     4c4:	fa20 f80c 	lsr.w	r8, r0, ip
     4c8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     4cc:	fa24 fc0c 	lsr.w	ip, r4, ip
     4d0:	40bc      	lsls	r4, r7
     4d2:	ea4c 0203 	orr.w	r2, ip, r3
     4d6:	b2ab      	uxth	r3, r5
     4d8:	fbb8 fcfe 	udiv	ip, r8, lr
     4dc:	0c11      	lsrs	r1, r2, #16
     4de:	fb0e 801c 	mls	r0, lr, ip, r8
     4e2:	fb0c f903 	mul.w	r9, ip, r3
     4e6:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     4ea:	4581      	cmp	r9, r0
     4ec:	d923      	bls.n	536 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4e>
     4ee:	1828      	adds	r0, r5, r0
     4f0:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     4f4:	d204      	bcs.n	500 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x18>
     4f6:	4581      	cmp	r9, r0
     4f8:	d902      	bls.n	500 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x18>
     4fa:	f1ac 0102 	sub.w	r1, ip, #2
     4fe:	4428      	add	r0, r5
     500:	eba0 0009 	sub.w	r0, r0, r9
     504:	b292      	uxth	r2, r2
     506:	fbb0 fcfe 	udiv	ip, r0, lr
     50a:	fb0e 001c 	mls	r0, lr, ip, r0
     50e:	fb0c f803 	mul.w	r8, ip, r3
     512:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     516:	4598      	cmp	r8, r3
     518:	d90f      	bls.n	53a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x52>
     51a:	18eb      	adds	r3, r5, r3
     51c:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
     520:	d204      	bcs.n	52c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x44>
     522:	4598      	cmp	r8, r3
     524:	d902      	bls.n	52c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x44>
     526:	f1ac 0202 	sub.w	r2, ip, #2
     52a:	442b      	add	r3, r5
     52c:	eba3 0308 	sub.w	r3, r3, r8
     530:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     534:	e792      	b.n	45c <CONFIG_FLASH_SIZE+0x5c>
     536:	4661      	mov	r1, ip
     538:	e7e2      	b.n	500 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x18>
     53a:	4662      	mov	r2, ip
     53c:	e7f6      	b.n	52c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x44>
     53e:	4660      	mov	r0, ip
     540:	e7a3      	b.n	48a <CONFIG_FLASH_SIZE+0x8a>
     542:	4663      	mov	r3, ip
     544:	e7b7      	b.n	4b6 <CONFIG_FLASH_SIZE+0xb6>
     546:	4283      	cmp	r3, r0
     548:	d905      	bls.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     54a:	b10e      	cbz	r6, 550 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x68>
     54c:	e9c6 7000 	strd	r7, r0, [r6]
     550:	2100      	movs	r1, #0
     552:	4608      	mov	r0, r1
     554:	e777      	b.n	446 <CONFIG_FLASH_SIZE+0x46>
     556:	fab3 f183 	clz	r1, r3
     55a:	b981      	cbnz	r1, 57e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x96>
     55c:	4283      	cmp	r3, r0
     55e:	d301      	bcc.n	564 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x7c>
     560:	42ba      	cmp	r2, r7
     562:	d80a      	bhi.n	57a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x92>
     564:	1abc      	subs	r4, r7, r2
     566:	eb60 0303 	sbc.w	r3, r0, r3
     56a:	2001      	movs	r0, #1
     56c:	469c      	mov	ip, r3
     56e:	2e00      	cmp	r6, #0
     570:	d067      	beq.n	642 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x15a>
     572:	e9c6 4c00 	strd	r4, ip, [r6]
     576:	2100      	movs	r1, #0
     578:	e765      	b.n	446 <CONFIG_FLASH_SIZE+0x46>
     57a:	4608      	mov	r0, r1
     57c:	e7f7      	b.n	56e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x86>
     57e:	f1c1 0c20 	rsb	ip, r1, #32
     582:	408b      	lsls	r3, r1
     584:	fa02 f501 	lsl.w	r5, r2, r1
     588:	fa22 f40c 	lsr.w	r4, r2, ip
     58c:	fa20 fb0c 	lsr.w	fp, r0, ip
     590:	fa27 f20c 	lsr.w	r2, r7, ip
     594:	408f      	lsls	r7, r1
     596:	431c      	orrs	r4, r3
     598:	fa00 f301 	lsl.w	r3, r0, r1
     59c:	ea4f 4914 	mov.w	r9, r4, lsr #16
     5a0:	4313      	orrs	r3, r2
     5a2:	fa1f fe84 	uxth.w	lr, r4
     5a6:	0c1a      	lsrs	r2, r3, #16
     5a8:	fbbb f8f9 	udiv	r8, fp, r9
     5ac:	fb09 bb18 	mls	fp, r9, r8, fp
     5b0:	fb08 fa0e 	mul.w	sl, r8, lr
     5b4:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     5b8:	4592      	cmp	sl, r2
     5ba:	d93e      	bls.n	63a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x152>
     5bc:	18a2      	adds	r2, r4, r2
     5be:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     5c2:	d204      	bcs.n	5ce <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe6>
     5c4:	4592      	cmp	sl, r2
     5c6:	d902      	bls.n	5ce <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe6>
     5c8:	f1a8 0002 	sub.w	r0, r8, #2
     5cc:	4422      	add	r2, r4
     5ce:	eba2 020a 	sub.w	r2, r2, sl
     5d2:	b29b      	uxth	r3, r3
     5d4:	fbb2 f8f9 	udiv	r8, r2, r9
     5d8:	fb09 2218 	mls	r2, r9, r8, r2
     5dc:	fb08 fe0e 	mul.w	lr, r8, lr
     5e0:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     5e4:	4596      	cmp	lr, r2
     5e6:	d92a      	bls.n	63e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x156>
     5e8:	18a2      	adds	r2, r4, r2
     5ea:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     5ee:	d204      	bcs.n	5fa <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x112>
     5f0:	4596      	cmp	lr, r2
     5f2:	d902      	bls.n	5fa <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x112>
     5f4:	f1a8 0302 	sub.w	r3, r8, #2
     5f8:	4422      	add	r2, r4
     5fa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     5fe:	eba2 020e 	sub.w	r2, r2, lr
     602:	fba0 9305 	umull	r9, r3, r0, r5
     606:	429a      	cmp	r2, r3
     608:	46ce      	mov	lr, r9
     60a:	4698      	mov	r8, r3
     60c:	d302      	bcc.n	614 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12c>
     60e:	d106      	bne.n	61e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x136>
     610:	454f      	cmp	r7, r9
     612:	d204      	bcs.n	61e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x136>
     614:	3801      	subs	r0, #1
     616:	ebb9 0e05 	subs.w	lr, r9, r5
     61a:	eb63 0804 	sbc.w	r8, r3, r4
     61e:	b186      	cbz	r6, 642 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x15a>
     620:	ebb7 030e 	subs.w	r3, r7, lr
     624:	eb62 0708 	sbc.w	r7, r2, r8
     628:	fa07 fc0c 	lsl.w	ip, r7, ip
     62c:	40cb      	lsrs	r3, r1
     62e:	40cf      	lsrs	r7, r1
     630:	ea4c 0303 	orr.w	r3, ip, r3
     634:	e9c6 3700 	strd	r3, r7, [r6]
     638:	e79d      	b.n	576 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8e>
     63a:	4640      	mov	r0, r8
     63c:	e7c7      	b.n	5ce <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe6>
     63e:	4643      	mov	r3, r8
     640:	e7db      	b.n	5fa <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x112>
     642:	4631      	mov	r1, r6
     644:	e6ff      	b.n	446 <CONFIG_FLASH_SIZE+0x46>
	...

00000648 <main>:

	return ret;
}

void main(void)
{
     648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     64c:	b099      	sub	sp, #100	; 0x64
	// while(1){
	printk("DMIC sample started\n");
     64e:	488e      	ldr	r0, [pc, #568]	; (888 <CONFIG_ISR_STACK_SIZE+0x88>)
{
     650:	af02      	add	r7, sp, #8
	printk("DMIC sample started\n");
     652:	f006 fcc6 	bl	6fe2 <printk>
	// k_sleep(K_MSEC(1000));
	// }
	const struct device *dmic_dev = DEVICE_DT_GET(DT_NODELABEL(dmic_dev));
	int ret;

	LOG_INF("DMIC sample");
     656:	466d      	mov	r5, sp
     658:	2602      	movs	r6, #2
     65a:	4b8c      	ldr	r3, [pc, #560]	; (88c <CONFIG_ISR_STACK_SIZE+0x8c>)
     65c:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
     660:	488b      	ldr	r0, [pc, #556]	; (890 <CONFIG_ISR_STACK_SIZE+0x90>)
     662:	f107 0240 	add.w	r2, r7, #64	; 0x40
     666:	647b      	str	r3, [r7, #68]	; 0x44
     668:	643e      	str	r6, [r7, #64]	; 0x40
     66a:	f006 fc57 	bl	6f1c <z_log_msg_static_create.constprop.0>
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     66e:	4c89      	ldr	r4, [pc, #548]	; (894 <CONFIG_ISR_STACK_SIZE+0x94>)
     670:	4620      	mov	r0, r4
     672:	f007 fd94 	bl	819e <z_device_is_ready>

	if (!device_is_ready(dmic_dev)) {
     676:	b998      	cbnz	r0, 6a0 <main+0x58>
		LOG_ERR("%s is not ready", dmic_dev->name);
     678:	b088      	sub	sp, #32
     67a:	6823      	ldr	r3, [r4, #0]
     67c:	aa02      	add	r2, sp, #8
     67e:	4986      	ldr	r1, [pc, #536]	; (898 <CONFIG_ISR_STACK_SIZE+0x98>)
     680:	7716      	strb	r6, [r2, #28]
     682:	e9c2 1305 	strd	r1, r3, [r2, #20]
     686:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
     68a:	4b84      	ldr	r3, [pc, #528]	; (89c <CONFIG_ISR_STACK_SIZE+0x9c>)
     68c:	f842 3f10 	str.w	r3, [r2, #16]!
		LOG_ERR("Failed to configure the driver: %d", ret);
     690:	487f      	ldr	r0, [pc, #508]	; (890 <CONFIG_ISR_STACK_SIZE+0x90>)
     692:	f006 fc43 	bl	6f1c <z_log_msg_static_create.constprop.0>
     696:	46ad      	mov	sp, r5
	// if (ret < 0) {
	// 	return;
	// }

	LOG_INF("Exiting");
}
     698:	375c      	adds	r7, #92	; 0x5c
     69a:	46bd      	mov	sp, r7
     69c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	printk("DMIC device: %s\n", dmic_dev->name);
     6a0:	6821      	ldr	r1, [r4, #0]
     6a2:	487f      	ldr	r0, [pc, #508]	; (8a0 <CONFIG_ISR_STACK_SIZE+0xa0>)
     6a4:	f006 fc9d 	bl	6fe2 <printk>
	struct pcm_stream_cfg stream = {
     6a8:	4b7e      	ldr	r3, [pc, #504]	; (8a4 <CONFIG_ISR_STACK_SIZE+0xa4>)
	struct dmic_cfg cfg = {
     6aa:	2220      	movs	r2, #32
     6ac:	2100      	movs	r1, #0
     6ae:	f107 0038 	add.w	r0, r7, #56	; 0x38
	struct pcm_stream_cfg stream = {
     6b2:	617b      	str	r3, [r7, #20]
	struct dmic_cfg cfg = {
     6b4:	f007 f9ad 	bl	7a12 <memset>
     6b8:	4a7b      	ldr	r2, [pc, #492]	; (8a8 <CONFIG_ISR_STACK_SIZE+0xa8>)
     6ba:	4b7c      	ldr	r3, [pc, #496]	; (8ac <CONFIG_ISR_STACK_SIZE+0xac>)
     6bc:	2601      	movs	r6, #1
     6be:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
     6c2:	2328      	movs	r3, #40	; 0x28
     6c4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
     6c8:	233c      	movs	r3, #60	; 0x3c
     6ca:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
     6ce:	f107 030c 	add.w	r3, r7, #12
     6d2:	643b      	str	r3, [r7, #64]	; 0x40
	struct pcm_stream_cfg stream = {
     6d4:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
     6d8:	4a75      	ldr	r2, [pc, #468]	; (8b0 <CONFIG_ISR_STACK_SIZE+0xb0>)
	LOG_INF("PCM output rate: %u, channels: %u",
     6da:	b088      	sub	sp, #32
	struct pcm_stream_cfg stream = {
     6dc:	e9c7 3203 	strd	r3, r2, [r7, #12]
	struct dmic_cfg cfg = {
     6e0:	f887 6056 	strb.w	r6, [r7, #86]	; 0x56
	cfg.channel.req_num_chan = 1;
     6e4:	f887 6054 	strb.w	r6, [r7, #84]	; 0x54
	LOG_INF("PCM output rate: %u, channels: %u",
     6e8:	aa02      	add	r2, sp, #8
     6ea:	4972      	ldr	r1, [pc, #456]	; (8b4 <CONFIG_ISR_STACK_SIZE+0xb4>)
     6ec:	61d6      	str	r6, [r2, #28]
     6ee:	e9c2 1305 	strd	r1, r3, [r2, #20]
     6f2:	2304      	movs	r3, #4
     6f4:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
     6f8:	f842 3f10 	str.w	r3, [r2, #16]!
     6fc:	4864      	ldr	r0, [pc, #400]	; (890 <CONFIG_ISR_STACK_SIZE+0x90>)
     6fe:	f006 fc0d 	bl	6f1c <z_log_msg_static_create.constprop.0>
 * @return 0 on success, a negative error code on failure
 */
static inline int dmic_configure(const struct device *dev,
				 struct dmic_cfg *cfg)
{
	const struct _dmic_ops *api =
     702:	f8d4 8008 	ldr.w	r8, [r4, #8]
     706:	46ad      	mov	sp, r5
		(const struct _dmic_ops *)dev->api;

	return api->configure(dev, cfg);
     708:	4620      	mov	r0, r4
     70a:	f8d8 3000 	ldr.w	r3, [r8]
     70e:	f107 0130 	add.w	r1, r7, #48	; 0x30
     712:	4798      	blx	r3
	if (ret < 0) {
     714:	2800      	cmp	r0, #0
     716:	da0a      	bge.n	72e <main+0xe6>
		LOG_ERR("Failed to configure the driver: %d", ret);
     718:	b088      	sub	sp, #32
     71a:	aa02      	add	r2, sp, #8
     71c:	4b66      	ldr	r3, [pc, #408]	; (8b8 <CONFIG_ISR_STACK_SIZE+0xb8>)
     71e:	e9c2 3005 	strd	r3, r0, [r2, #20]
     722:	2303      	movs	r3, #3
     724:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
     728:	f842 3f10 	str.w	r3, [r2, #16]!
     72c:	e7b0      	b.n	690 <main+0x48>
			       enum dmic_trigger cmd)
{
	const struct _dmic_ops *api =
		(const struct _dmic_ops *)dev->api;

	return api->trigger(dev, cmd);
     72e:	4631      	mov	r1, r6
     730:	4620      	mov	r0, r4
     732:	f8d8 3004 	ldr.w	r3, [r8, #4]
     736:	4798      	blx	r3
	if (ret < 0) {
     738:	2800      	cmp	r0, #0
     73a:	da03      	bge.n	744 <main+0xfc>
		LOG_ERR("START trigger failed: %d", ret);
     73c:	b088      	sub	sp, #32
     73e:	aa02      	add	r2, sp, #8
     740:	4b5e      	ldr	r3, [pc, #376]	; (8bc <CONFIG_ISR_STACK_SIZE+0xbc>)
     742:	e7ec      	b.n	71e <main+0xd6>
	for (int i = 0; i < 21; ++i) {
     744:	2500      	movs	r5, #0
     746:	4e5e      	ldr	r6, [pc, #376]	; (8c0 <CONFIG_ISR_STACK_SIZE+0xc0>)
		LOG_INF("%d - got buffer %p of %u bytes", i, buffer, size);
     748:	f8df 8178 	ldr.w	r8, [pc, #376]	; 8c4 <CONFIG_ISR_STACK_SIZE+0xc4>
     74c:	f8df 9140 	ldr.w	r9, [pc, #320]	; 890 <CONFIG_ISR_STACK_SIZE+0x90>
			    size_t *size, int32_t timeout)
{
	const struct _dmic_ops *api =
		(const struct _dmic_ops *)dev->api;

	return api->read(dev, stream, buffer, size, timeout);
     750:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     754:	68a3      	ldr	r3, [r4, #8]
     756:	9200      	str	r2, [sp, #0]
     758:	f8d3 a008 	ldr.w	sl, [r3, #8]
     75c:	2100      	movs	r1, #0
     75e:	4620      	mov	r0, r4
     760:	f107 0318 	add.w	r3, r7, #24
     764:	f107 0208 	add.w	r2, r7, #8
     768:	47d0      	blx	sl
		if (ret < 0) {
     76a:	2800      	cmp	r0, #0
     76c:	da10      	bge.n	790 <main+0x148>
			LOG_ERR("%d - read failed: %d", i, ret);
     76e:	466c      	mov	r4, sp
     770:	b088      	sub	sp, #32
     772:	aa02      	add	r2, sp, #8
     774:	4b54      	ldr	r3, [pc, #336]	; (8c8 <CONFIG_ISR_STACK_SIZE+0xc8>)
     776:	f44f 5101 	mov.w	r1, #8256	; 0x2040
     77a:	e9c2 3505 	strd	r3, r5, [r2, #20]
     77e:	2304      	movs	r3, #4
     780:	61d0      	str	r0, [r2, #28]
     782:	f842 3f10 	str.w	r3, [r2, #16]!
		LOG_ERR("STOP trigger failed: %d", ret);
     786:	4842      	ldr	r0, [pc, #264]	; (890 <CONFIG_ISR_STACK_SIZE+0x90>)
     788:	f006 fbc8 	bl	6f1c <z_log_msg_static_create.constprop.0>
     78c:	46a5      	mov	sp, r4
		return ret;
     78e:	e783      	b.n	698 <main+0x50>
		LOG_INF("%d - got buffer %p of %u bytes", i, buffer, size);
     790:	46ea      	mov	sl, sp
     792:	b08a      	sub	sp, #40	; 0x28
     794:	68b9      	ldr	r1, [r7, #8]
     796:	69bb      	ldr	r3, [r7, #24]
     798:	aa02      	add	r2, sp, #8
     79a:	e9c2 1307 	strd	r1, r3, [r2, #28]
     79e:	2305      	movs	r3, #5
     7a0:	e9c2 8505 	strd	r8, r5, [r2, #20]
     7a4:	f44f 5123 	mov.w	r1, #10432	; 0x28c0
     7a8:	4648      	mov	r0, r9
     7aa:	f842 3f10 	str.w	r3, [r2, #16]!
     7ae:	f006 fbb5 	bl	6f1c <z_log_msg_static_create.constprop.0>
     7b2:	46d5      	mov	sp, sl
		if(i!=0){
     7b4:	b1bd      	cbz	r5, 7e6 <main+0x19e>
			printk("i: %d\n", i);
     7b6:	4629      	mov	r1, r5
     7b8:	4844      	ldr	r0, [pc, #272]	; (8cc <CONFIG_ISR_STACK_SIZE+0xcc>)
     7ba:	f006 fc12 	bl	6fe2 <printk>
     7be:	46b3      	mov	fp, r6
     7c0:	f04f 0a00 	mov.w	sl, #0
				memcpy(&tempInt, buffer + 2*j, 2);
     7c4:	68b9      	ldr	r1, [r7, #8]
     7c6:	2202      	movs	r2, #2
     7c8:	4451      	add	r1, sl
     7ca:	1db8      	adds	r0, r7, #6
     7cc:	f007 f916 	bl	79fc <memcpy>
				tempFloat = (float)tempInt;
     7d0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
     7d4:	f7ff fd78 	bl	2c8 <__aeabi_i2f>
			for(int j=0; j<1600; j++){
     7d8:	f10a 0a02 	add.w	sl, sl, #2
     7dc:	f5ba 6f48 	cmp.w	sl, #3200	; 0xc80
				tempFloat = (float)tempInt;
     7e0:	f84b 0b04 	str.w	r0, [fp], #4
			for(int j=0; j<1600; j++){
     7e4:	d1ee      	bne.n	7c4 <main+0x17c>
		k_mem_slab_free(&mem_slab, &buffer);
     7e6:	482f      	ldr	r0, [pc, #188]	; (8a4 <CONFIG_ISR_STACK_SIZE+0xa4>)
     7e8:	f107 0108 	add.w	r1, r7, #8
	for (int i = 0; i < 21; ++i) {
     7ec:	3501      	adds	r5, #1
		k_mem_slab_free(&mem_slab, &buffer);
     7ee:	f007 fcff 	bl	81f0 <k_mem_slab_free>
	for (int i = 0; i < 21; ++i) {
     7f2:	2d15      	cmp	r5, #21
     7f4:	f506 56c8 	add.w	r6, r6, #6400	; 0x1900
     7f8:	d1aa      	bne.n	750 <main+0x108>
	counter++;
     7fa:	4d35      	ldr	r5, [pc, #212]	; (8d0 <CONFIG_ISR_STACK_SIZE+0xd0>)
	printk("wrapper_add_data\n");
     7fc:	4835      	ldr	r0, [pc, #212]	; (8d4 <CONFIG_ISR_STACK_SIZE+0xd4>)
	counter++;
     7fe:	682b      	ldr	r3, [r5, #0]
     800:	4e35      	ldr	r6, [pc, #212]	; (8d8 <CONFIG_ISR_STACK_SIZE+0xd8>)
     802:	3301      	adds	r3, #1
     804:	602b      	str	r3, [r5, #0]
	printk("wrapper_add_data\n");
     806:	f006 fbec 	bl	6fe2 <printk>
	printk("data_size: %d\n", data_size);
     80a:	f44f 31fa 	mov.w	r1, #128000	; 0x1f400
     80e:	4833      	ldr	r0, [pc, #204]	; (8dc <CONFIG_ISR_STACK_SIZE+0xdc>)
     810:	f006 fbe7 	bl	6fe2 <printk>
	printk("counter: %d\n", counter);
     814:	6829      	ldr	r1, [r5, #0]
     816:	4832      	ldr	r0, [pc, #200]	; (8e0 <CONFIG_ISR_STACK_SIZE+0xe0>)
     818:	f006 fbe3 	bl	6fe2 <printk>
	for (int i = 0; i < data_size; i++) {
     81c:	2500      	movs	r5, #0
		printk("%d ", ((uint8_t *)data)[i]);
     81e:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8e4 <CONFIG_ISR_STACK_SIZE+0xe4>
     822:	4640      	mov	r0, r8
     824:	f816 1b01 	ldrb.w	r1, [r6], #1
	for (int i = 0; i < data_size; i++) {
     828:	3501      	adds	r5, #1
		printk("%d ", ((uint8_t *)data)[i]);
     82a:	f006 fbda 	bl	6fe2 <printk>
	for (int i = 0; i < data_size; i++) {
     82e:	f5b5 3ffa 	cmp.w	r5, #128000	; 0x1f400
     832:	d1f6      	bne.n	822 <CONFIG_ISR_STACK_SIZE+0x22>
	return api->trigger(dev, cmd);
     834:	68a3      	ldr	r3, [r4, #8]
     836:	2100      	movs	r1, #0
     838:	685b      	ldr	r3, [r3, #4]
     83a:	4816      	ldr	r0, [pc, #88]	; (894 <CONFIG_ISR_STACK_SIZE+0x94>)
     83c:	4798      	blx	r3
	if (ret < 0) {
     83e:	2800      	cmp	r0, #0
     840:	da0b      	bge.n	85a <CONFIG_ISR_STACK_SIZE+0x5a>
		LOG_ERR("STOP trigger failed: %d", ret);
     842:	466c      	mov	r4, sp
     844:	b088      	sub	sp, #32
     846:	aa02      	add	r2, sp, #8
     848:	4b27      	ldr	r3, [pc, #156]	; (8e8 <CONFIG_ISR_STACK_SIZE+0xe8>)
     84a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
     84e:	e9c2 3005 	strd	r3, r0, [r2, #20]
     852:	2303      	movs	r3, #3
     854:	f842 3f10 	str.w	r3, [r2, #16]!
     858:	e795      	b.n	786 <main+0x13e>
	LOG_INF("DMIC sample finished\n");
     85a:	2402      	movs	r4, #2
     85c:	4b23      	ldr	r3, [pc, #140]	; (8ec <CONFIG_ISR_STACK_SIZE+0xec>)
     85e:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
     862:	480b      	ldr	r0, [pc, #44]	; (890 <CONFIG_ISR_STACK_SIZE+0x90>)
     864:	f107 0228 	add.w	r2, r7, #40	; 0x28
     868:	62fb      	str	r3, [r7, #44]	; 0x2c
     86a:	62bc      	str	r4, [r7, #40]	; 0x28
     86c:	f006 fb56 	bl	6f1c <z_log_msg_static_create.constprop.0>
	LOG_INF("Exiting");
     870:	4b1f      	ldr	r3, [pc, #124]	; (8f0 <CONFIG_ISR_STACK_SIZE+0xf0>)
     872:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
     876:	4806      	ldr	r0, [pc, #24]	; (890 <CONFIG_ISR_STACK_SIZE+0x90>)
     878:	f107 0228 	add.w	r2, r7, #40	; 0x28
     87c:	e9c7 430a 	strd	r4, r3, [r7, #40]	; 0x28
     880:	f006 fb4c 	bl	6f1c <z_log_msg_static_create.constprop.0>
     884:	e708      	b.n	698 <main+0x50>
     886:	bf00      	nop
     888:	00008bf0 	.word	0x00008bf0
     88c:	00008c05 	.word	0x00008c05
     890:	000088ac 	.word	0x000088ac
     894:	00008638 	.word	0x00008638
     898:	00008c11 	.word	0x00008c11
     89c:	01000003 	.word	0x01000003
     8a0:	00008c21 	.word	0x00008c21
     8a4:	20000158 	.word	0x20000158
     8a8:	000f4240 	.word	0x000f4240
     8ac:	003567e0 	.word	0x003567e0
     8b0:	0c800010 	.word	0x0c800010
     8b4:	00008c32 	.word	0x00008c32
     8b8:	00008c54 	.word	0x00008c54
     8bc:	00008c77 	.word	0x00008c77
     8c0:	1fffeec8 	.word	0x1fffeec8
     8c4:	00008ca5 	.word	0x00008ca5
     8c8:	00008c90 	.word	0x00008c90
     8cc:	00008cc4 	.word	0x00008cc4
     8d0:	2001fbc8 	.word	0x2001fbc8
     8d4:	00008ccb 	.word	0x00008ccb
     8d8:	200007c8 	.word	0x200007c8
     8dc:	00008cdd 	.word	0x00008cdd
     8e0:	00008cec 	.word	0x00008cec
     8e4:	00008cf9 	.word	0x00008cf9
     8e8:	00008cfd 	.word	0x00008cfd
     8ec:	00008d15 	.word	0x00008d15
     8f0:	00008d2b 	.word	0x00008d2b

000008f4 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
     8f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     8f8:	b093      	sub	sp, #76	; 0x4c
     8fa:	4604      	mov	r4, r0
     8fc:	461f      	mov	r7, r3
	unsigned int args_size, ros_nbr, rws_nbr;
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
     8fe:	468b      	mov	fp, r1
{
     900:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
     904:	9201      	str	r2, [sp, #4]
	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
     906:	b949      	cbnz	r1, 91c <cbprintf_package_convert+0x28>
	buf += ros_nbr;
     908:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
     90a:	7846      	ldrb	r6, [r0, #1]
	buf += ros_nbr;
     90c:	7880      	ldrb	r0, [r0, #2]
     90e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
     912:	4420      	add	r0, r4
	for (int i = 0; i < s_nbr; i++) {
     914:	45b3      	cmp	fp, r6
     916:	d318      	bcc.n	94a <cbprintf_package_convert+0x56>
	return (size_t)(uintptr_t)(buf - start);
     918:	eba0 0b04 	sub.w	fp, r0, r4

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
     91c:	78a5      	ldrb	r5, [r4, #2]
     91e:	9503      	str	r5, [sp, #12]
	ro_cpy = ros_nbr &&
     920:	b1e5      	cbz	r5, 95c <cbprintf_package_convert+0x68>
		(flags & CBPRINTF_PACKAGE_COPY_RO_STR) == CBPRINTF_PACKAGE_COPY_RO_STR;
     922:	f00a 0301 	and.w	r3, sl, #1

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
     926:	78e2      	ldrb	r2, [r4, #3]
     928:	9202      	str	r2, [sp, #8]
	rw_cpy = rws_nbr > 0 &&
     92a:	b112      	cbz	r2, 932 <cbprintf_package_convert+0x3e>

	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
     92c:	f01a 0f02 	tst.w	sl, #2
     930:	d116      	bne.n	960 <cbprintf_package_convert+0x6c>
     932:	b9ab      	cbnz	r3, 960 <cbprintf_package_convert+0x6c>
		if (cb) {
     934:	9b01      	ldr	r3, [sp, #4]
     936:	b11b      	cbz	r3, 940 <cbprintf_package_convert+0x4c>
			cb(in_packaged, in_len, ctx);
     938:	463a      	mov	r2, r7
     93a:	4659      	mov	r1, fp
     93c:	4620      	mov	r0, r4
     93e:	4798      	blx	r3
		}

		return in_len;
     940:	465e      	mov	r6, fp

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
     942:	4630      	mov	r0, r6
     944:	b013      	add	sp, #76	; 0x4c
     946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
     94a:	1c45      	adds	r5, r0, #1
		buf += strlen((const char *)buf) + 1;
     94c:	4628      	mov	r0, r5
     94e:	f007 f845 	bl	79dc <strlen>
     952:	3001      	adds	r0, #1
     954:	4428      	add	r0, r5
	for (int i = 0; i < s_nbr; i++) {
     956:	f10b 0b01 	add.w	fp, fp, #1
     95a:	e7db      	b.n	914 <cbprintf_package_convert+0x20>
	ro_cpy = ros_nbr &&
     95c:	462b      	mov	r3, r5
     95e:	e7e2      	b.n	926 <cbprintf_package_convert+0x32>
	args_size = in_desc->len * sizeof(int);
     960:	f894 9000 	ldrb.w	r9, [r4]
     964:	ea4f 0289 	mov.w	r2, r9, lsl #2
     968:	9204      	str	r2, [sp, #16]
	if (cb == NULL) {
     96a:	9a01      	ldr	r2, [sp, #4]
	uint8_t *str_pos = &buf[args_size];
     96c:	eb04 0989 	add.w	r9, r4, r9, lsl #2
	if (cb == NULL) {
     970:	2a00      	cmp	r2, #0
     972:	d15a      	bne.n	a2a <cbprintf_package_convert+0x136>
		out_len = (int)in_len;
     974:	465e      	mov	r6, fp
		if (ro_cpy) {
     976:	b393      	cbz	r3, 9de <cbprintf_package_convert+0xea>
	size_t strl_cnt = 0;
     978:	4617      	mov	r7, r2
     97a:	444d      	add	r5, r9
			for (int i = 0; i < ros_nbr; i++) {
     97c:	45a9      	cmp	r9, r5
     97e:	d11c      	bne.n	9ba <cbprintf_package_convert+0xc6>
		bool drop_ro_str_pos = !(flags &
     980:	464d      	mov	r5, r9
     982:	f8dd 8008 	ldr.w	r8, [sp, #8]
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
     986:	f8df c234 	ldr.w	ip, [pc, #564]	; bbc <cbprintf_package_convert+0x2c8>
			if ((is_ro && flags & CBPRINTF_PACKAGE_COPY_RO_STR) ||
     98a:	498d      	ldr	r1, [pc, #564]	; (bc0 <cbprintf_package_convert+0x2cc>)
		bool drop_ro_str_pos = !(flags &
     98c:	f00a 0b05 	and.w	fp, sl, #5
		for (int i = 0; i < rws_nbr; i++) {
     990:	44c8      	add	r8, r9
			    (!is_ro && flags & CBPRINTF_PACKAGE_COPY_RW_STR)) {
     992:	f00a 0202 	and.w	r2, sl, #2
		for (int i = 0; i < rws_nbr; i++) {
     996:	45a8      	cmp	r8, r5
     998:	d0d3      	beq.n	942 <cbprintf_package_convert+0x4e>
			const char *str = *(const char **)&buf32[*str_pos];
     99a:	f815 0b01 	ldrb.w	r0, [r5], #1
     99e:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
     9a2:	4560      	cmp	r0, ip
     9a4:	d324      	bcc.n	9f0 <cbprintf_package_convert+0xfc>
			if ((is_ro && flags & CBPRINTF_PACKAGE_COPY_RO_STR) ||
     9a6:	4288      	cmp	r0, r1
     9a8:	d222      	bcs.n	9f0 <cbprintf_package_convert+0xfc>
     9aa:	f01a 0f01 	tst.w	sl, #1
     9ae:	d139      	bne.n	a24 <cbprintf_package_convert+0x130>
			if (is_ro && drop_ro_str_pos) {
     9b0:	f1bb 0f00 	cmp.w	fp, #0
     9b4:	d1ef      	bne.n	996 <cbprintf_package_convert+0xa2>
				out_len--;
     9b6:	3e01      	subs	r6, #1
		for (int i = 0; i < rws_nbr; i++) {
     9b8:	e7ed      	b.n	996 <cbprintf_package_convert+0xa2>
				const char *str = *(const char **)&buf32[*str_pos];
     9ba:	f819 3b01 	ldrb.w	r3, [r9], #1
		return 1 + strlen(str);
     9be:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
     9c2:	f007 f80b 	bl	79dc <strlen>
				if (strl && strl_cnt < strl_len) {
     9c6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
		return 1 + strlen(str);
     9c8:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
     9ca:	b133      	cbz	r3, 9da <cbprintf_package_convert+0xe6>
     9cc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
     9ce:	429f      	cmp	r7, r3
					strl[strl_cnt++] = (uint16_t)len;
     9d0:	bf3e      	ittt	cc
     9d2:	9b1d      	ldrcc	r3, [sp, #116]	; 0x74
     9d4:	f823 0017 	strhcc.w	r0, [r3, r7, lsl #1]
     9d8:	3701      	addcc	r7, #1
				out_len += len;
     9da:	4406      	add	r6, r0
			for (int i = 0; i < ros_nbr; i++) {
     9dc:	e7ce      	b.n	97c <cbprintf_package_convert+0x88>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
     9de:	b12d      	cbz	r5, 9ec <cbprintf_package_convert+0xf8>
     9e0:	f01a 0704 	ands.w	r7, sl, #4
     9e4:	d0cc      	beq.n	980 <cbprintf_package_convert+0x8c>
	size_t strl_cnt = 0;
     9e6:	461f      	mov	r7, r3
				str_pos += ros_nbr;
     9e8:	44a9      	add	r9, r5
     9ea:	e7c9      	b.n	980 <cbprintf_package_convert+0x8c>
	size_t strl_cnt = 0;
     9ec:	462f      	mov	r7, r5
     9ee:	e7c7      	b.n	980 <cbprintf_package_convert+0x8c>
			    (!is_ro && flags & CBPRINTF_PACKAGE_COPY_RW_STR)) {
     9f0:	2a00      	cmp	r2, #0
     9f2:	d0d0      	beq.n	996 <cbprintf_package_convert+0xa2>
     9f4:	f04f 0900 	mov.w	r9, #0
		return 1 + strlen(str);
     9f8:	9201      	str	r2, [sp, #4]
     9fa:	f006 ffef 	bl	79dc <strlen>
				if (strl && strl_cnt < strl_len) {
     9fe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
     a00:	f8df c1b8 	ldr.w	ip, [pc, #440]	; bbc <cbprintf_package_convert+0x2c8>
     a04:	9a01      	ldr	r2, [sp, #4]
     a06:	496e      	ldr	r1, [pc, #440]	; (bc0 <cbprintf_package_convert+0x2cc>)
		return 1 + strlen(str);
     a08:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
     a0a:	b133      	cbz	r3, a1a <cbprintf_package_convert+0x126>
     a0c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
     a0e:	429f      	cmp	r7, r3
					strl[strl_cnt++] = (uint16_t)len;
     a10:	bf3e      	ittt	cc
     a12:	9b1d      	ldrcc	r3, [sp, #116]	; 0x74
     a14:	f823 0017 	strhcc.w	r0, [r3, r7, lsl #1]
     a18:	3701      	addcc	r7, #1
				out_len += len;
     a1a:	4406      	add	r6, r0
			if (is_ro && drop_ro_str_pos) {
     a1c:	f1b9 0f00 	cmp.w	r9, #0
     a20:	d0b9      	beq.n	996 <cbprintf_package_convert+0xa2>
     a22:	e7c5      	b.n	9b0 <cbprintf_package_convert+0xbc>
     a24:	f04f 0901 	mov.w	r9, #1
     a28:	e7e6      	b.n	9f8 <cbprintf_package_convert+0x104>
	if (ro_cpy) {
     a2a:	2b00      	cmp	r3, #0
     a2c:	f040 80b9 	bne.w	ba2 <cbprintf_package_convert+0x2ae>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
     a30:	b125      	cbz	r5, a3c <cbprintf_package_convert+0x148>
     a32:	f01a 0f04 	tst.w	sl, #4
     a36:	f040 80bc 	bne.w	bb2 <cbprintf_package_convert+0x2be>
		keep_cnt = 0;
     a3a:	461d      	mov	r5, r3
     a3c:	46a8      	mov	r8, r5
	str_pos += ros_nbr;
     a3e:	9b03      	ldr	r3, [sp, #12]
		(flags & CBPRINTF_PACKAGE_COPY_RO_STR) == CBPRINTF_PACKAGE_COPY_RO_STR;
     a40:	f00a 0001 	and.w	r0, sl, #1
	str_pos += ros_nbr;
     a44:	4499      	add	r9, r3
	for (int i = 0; i < rws_nbr; i++) {
     a46:	464a      	mov	r2, r9
     a48:	9b02      	ldr	r3, [sp, #8]
			if (flags & CBPRINTF_PACKAGE_COPY_RW_STR) {
     a4a:	f00a 0e02 	and.w	lr, sl, #2
     a4e:	eb03 0c09 	add.w	ip, r3, r9
			} else if (flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
     a52:	f00a 0304 	and.w	r3, sl, #4
     a56:	9305      	str	r3, [sp, #20]
	for (int i = 0; i < rws_nbr; i++) {
     a58:	4594      	cmp	ip, r2
     a5a:	d14f      	bne.n	afc <cbprintf_package_convert+0x208>
     a5c:	9b02      	ldr	r3, [sp, #8]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_COPY_RW_STR) ? 0 : keep_cnt;
     a5e:	f01a 0f02 	tst.w	sl, #2
     a62:	444b      	add	r3, r9
     a64:	9306      	str	r3, [sp, #24]
	out_desc.len = in_desc->len;
     a66:	7823      	ldrb	r3, [r4, #0]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_COPY_RW_STR) ? 0 : keep_cnt;
     a68:	bf08      	it	eq
     a6a:	46c4      	moveq	ip, r8
	out_desc.len = in_desc->len;
     a6c:	9305      	str	r3, [sp, #20]
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
     a6e:	7863      	ldrb	r3, [r4, #1]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_COPY_RW_STR) ? 0 : keep_cnt;
     a70:	bf18      	it	ne
     a72:	f04f 0c00 	movne.w	ip, #0
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
     a76:	195a      	adds	r2, r3, r5
     a78:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_COPY_RO_STR) ? 0 :
     a7a:	2800      	cmp	r0, #0
     a7c:	d160      	bne.n	b40 <cbprintf_package_convert+0x24c>
     a7e:	f01a 0f04 	tst.w	sl, #4
     a82:	bf14      	ite	ne
     a84:	4641      	movne	r1, r8
     a86:	2100      	moveq	r1, #0
	struct cbprintf_package_desc in_desc_backup = *in_desc;
     a88:	f894 a002 	ldrb.w	sl, [r4, #2]
     a8c:	78e6      	ldrb	r6, [r4, #3]
     a8e:	9307      	str	r3, [sp, #28]
	*in_desc = out_desc;
     a90:	7062      	strb	r2, [r4, #1]
     a92:	70a1      	strb	r1, [r4, #2]
	rv = cb(in_packaged, args_size, ctx);
     a94:	463a      	mov	r2, r7
     a96:	4620      	mov	r0, r4
     a98:	9904      	ldr	r1, [sp, #16]
     a9a:	9b01      	ldr	r3, [sp, #4]
	*in_desc = out_desc;
     a9c:	f884 c003 	strb.w	ip, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
     aa0:	4798      	blx	r3
	if (rv < 0) {
     aa2:	f1b0 0900 	subs.w	r9, r0, #0
     aa6:	db78      	blt.n	b9a <cbprintf_package_convert+0x2a6>
	*in_desc = in_desc_backup;
     aa8:	9b05      	ldr	r3, [sp, #20]
     aaa:	70e6      	strb	r6, [r4, #3]
     aac:	7023      	strb	r3, [r4, #0]
     aae:	9b07      	ldr	r3, [sp, #28]
	rv = cb(keep_str_pos, keep_cnt, ctx);
     ab0:	463a      	mov	r2, r7
	*in_desc = in_desc_backup;
     ab2:	7063      	strb	r3, [r4, #1]
	rv = cb(keep_str_pos, keep_cnt, ctx);
     ab4:	4641      	mov	r1, r8
     ab6:	9b01      	ldr	r3, [sp, #4]
	*in_desc = in_desc_backup;
     ab8:	f884 a002 	strb.w	sl, [r4, #2]
	rv = cb(keep_str_pos, keep_cnt, ctx);
     abc:	a80e      	add	r0, sp, #56	; 0x38
     abe:	4798      	blx	r3
	if (rv < 0) {
     ac0:	1e06      	subs	r6, r0, #0
     ac2:	f6ff af3e 	blt.w	942 <cbprintf_package_convert+0x4e>
	size_t strs_len = in_len - (args_size + ros_nbr + rws_nbr);
     ac6:	e9dd 3102 	ldrd	r3, r1, [sp, #8]
     aca:	4419      	add	r1, r3
     acc:	9b04      	ldr	r3, [sp, #16]
	rv = cb(str_pos, strs_len, ctx);
     ace:	463a      	mov	r2, r7
	size_t strs_len = in_len - (args_size + ros_nbr + rws_nbr);
     ad0:	4419      	add	r1, r3
	rv = cb(str_pos, strs_len, ctx);
     ad2:	9806      	ldr	r0, [sp, #24]
     ad4:	9b01      	ldr	r3, [sp, #4]
     ad6:	ebab 0101 	sub.w	r1, fp, r1
     ada:	4798      	blx	r3
	if (rv < 0) {
     adc:	2800      	cmp	r0, #0
     ade:	db5e      	blt.n	b9e <cbprintf_package_convert+0x2aa>
	out_len += rv;
     ae0:	444e      	add	r6, r9
	for (int i = 0; i < scpy_cnt; i++) {
     ae2:	f04f 0900 	mov.w	r9, #0
	out_len += rv;
     ae6:	4406      	add	r6, r0
		uint8_t loc = cpy_str_pos[i];
     ae8:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
	for (int i = 0; i < scpy_cnt; i++) {
     aec:	454d      	cmp	r5, r9
     aee:	dc29      	bgt.n	b44 <cbprintf_package_convert+0x250>
	(void)cb(NULL, 0, ctx);
     af0:	2100      	movs	r1, #0
     af2:	463a      	mov	r2, r7
     af4:	4608      	mov	r0, r1
     af6:	9b01      	ldr	r3, [sp, #4]
     af8:	4798      	blx	r3
	return out_len;
     afa:	e722      	b.n	942 <cbprintf_package_convert+0x4e>
		const char *str = *(const char **)&buf32[*str_pos];
     afc:	f812 3b01 	ldrb.w	r3, [r2], #1
     b00:	4e2e      	ldr	r6, [pc, #184]	; (bbc <cbprintf_package_convert+0x2c8>)
     b02:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
     b06:	42b1      	cmp	r1, r6
     b08:	d302      	bcc.n	b10 <cbprintf_package_convert+0x21c>
     b0a:	4e2d      	ldr	r6, [pc, #180]	; (bc0 <cbprintf_package_convert+0x2cc>)
     b0c:	42b1      	cmp	r1, r6
     b0e:	d30b      	bcc.n	b28 <cbprintf_package_convert+0x234>
			if (flags & CBPRINTF_PACKAGE_COPY_RW_STR) {
     b10:	f1be 0f00 	cmp.w	lr, #0
     b14:	d109      	bne.n	b2a <cbprintf_package_convert+0x236>
				keep_str_pos[keep_cnt++] = *str_pos;
     b16:	ae12      	add	r6, sp, #72	; 0x48
     b18:	f108 0101 	add.w	r1, r8, #1
     b1c:	44b0      	add	r8, r6
     b1e:	f808 3c10 	strb.w	r3, [r8, #-16]
     b22:	fa5f f881 	uxtb.w	r8, r1
	for (int i = 0; i < rws_nbr; i++) {
     b26:	e797      	b.n	a58 <cbprintf_package_convert+0x164>
			if (flags & CBPRINTF_PACKAGE_COPY_RO_STR) {
     b28:	b130      	cbz	r0, b38 <cbprintf_package_convert+0x244>
				cpy_str_pos[scpy_cnt++] = *str_pos;
     b2a:	ae12      	add	r6, sp, #72	; 0x48
     b2c:	1c69      	adds	r1, r5, #1
     b2e:	4435      	add	r5, r6
     b30:	f805 3c20 	strb.w	r3, [r5, #-32]
     b34:	b2cd      	uxtb	r5, r1
     b36:	e78f      	b.n	a58 <cbprintf_package_convert+0x164>
			} else if (flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
     b38:	9905      	ldr	r1, [sp, #20]
     b3a:	2900      	cmp	r1, #0
     b3c:	d08c      	beq.n	a58 <cbprintf_package_convert+0x164>
     b3e:	e7ea      	b.n	b16 <cbprintf_package_convert+0x222>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_COPY_RO_STR) ? 0 :
     b40:	2100      	movs	r1, #0
     b42:	e7a1      	b.n	a88 <cbprintf_package_convert+0x194>
		uint8_t loc = cpy_str_pos[i];
     b44:	f819 300b 	ldrb.w	r3, [r9, fp]
		const char *str = *(const char **)&buf32[loc];
     b48:	f854 a023 	ldr.w	sl, [r4, r3, lsl #2]
		uint8_t loc = cpy_str_pos[i];
     b4c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
		uint16_t str_len = strl ? strl[i] : 0;
     b50:	9b1d      	ldr	r3, [sp, #116]	; 0x74
     b52:	b1fb      	cbz	r3, b94 <cbprintf_package_convert+0x2a0>
     b54:	f833 8019 	ldrh.w	r8, [r3, r9, lsl #1]
		rv = cb(&loc, 1, ctx);
     b58:	463a      	mov	r2, r7
     b5a:	2101      	movs	r1, #1
     b5c:	9b01      	ldr	r3, [sp, #4]
     b5e:	f10d 0027 	add.w	r0, sp, #39	; 0x27
     b62:	4798      	blx	r3
		if (rv < 0) {
     b64:	2800      	cmp	r0, #0
     b66:	db1a      	blt.n	b9e <cbprintf_package_convert+0x2aa>
		out_len += rv;
     b68:	4406      	add	r6, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
     b6a:	f1b8 0f00 	cmp.w	r8, #0
     b6e:	d106      	bne.n	b7e <cbprintf_package_convert+0x28a>
     b70:	4650      	mov	r0, sl
     b72:	f006 ff33 	bl	79dc <strlen>
     b76:	f100 0801 	add.w	r8, r0, #1
     b7a:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
     b7e:	463a      	mov	r2, r7
     b80:	4641      	mov	r1, r8
     b82:	4650      	mov	r0, sl
     b84:	9b01      	ldr	r3, [sp, #4]
     b86:	4798      	blx	r3
		if (rv < 0) {
     b88:	2800      	cmp	r0, #0
     b8a:	db08      	blt.n	b9e <cbprintf_package_convert+0x2aa>
		out_len += rv;
     b8c:	4406      	add	r6, r0
	for (int i = 0; i < scpy_cnt; i++) {
     b8e:	f109 0901 	add.w	r9, r9, #1
     b92:	e7ab      	b.n	aec <cbprintf_package_convert+0x1f8>
		uint16_t str_len = strl ? strl[i] : 0;
     b94:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
     b98:	e7de      	b.n	b58 <cbprintf_package_convert+0x264>
     b9a:	464e      	mov	r6, r9
     b9c:	e6d1      	b.n	942 <cbprintf_package_convert+0x4e>
     b9e:	4606      	mov	r6, r0
     ba0:	e6cf      	b.n	942 <cbprintf_package_convert+0x4e>
		keep_cnt = 0;
     ba2:	f04f 0800 	mov.w	r8, #0
		dst = cpy_str_pos;
     ba6:	a80a      	add	r0, sp, #40	; 0x28
		memcpy(dst, str_pos, ros_nbr);
     ba8:	4649      	mov	r1, r9
     baa:	9a03      	ldr	r2, [sp, #12]
     bac:	f006 ff26 	bl	79fc <memcpy>
     bb0:	e745      	b.n	a3e <cbprintf_package_convert+0x14a>
     bb2:	46a8      	mov	r8, r5
		dst = keep_str_pos;
     bb4:	a80e      	add	r0, sp, #56	; 0x38
		scpy_cnt = 0;
     bb6:	461d      	mov	r5, r3
     bb8:	e7f6      	b.n	ba8 <cbprintf_package_convert+0x2b4>
     bba:	bf00      	nop
     bbc:	00008548 	.word	0x00008548
     bc0:	000097bc 	.word	0x000097bc

00000bc4 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
     bc4:	4b01      	ldr	r3, [pc, #4]	; (bcc <char_out+0x8>)
     bc6:	681b      	ldr	r3, [r3, #0]
     bc8:	4718      	bx	r3
     bca:	bf00      	nop
     bcc:	20000000 	.word	0x20000000

00000bd0 <__printk_hook_install>:
	_char_out = fn;
     bd0:	4b01      	ldr	r3, [pc, #4]	; (bd8 <__printk_hook_install+0x8>)
     bd2:	6018      	str	r0, [r3, #0]
}
     bd4:	4770      	bx	lr
     bd6:	bf00      	nop
     bd8:	20000000 	.word	0x20000000

00000bdc <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
     bdc:	b507      	push	{r0, r1, r2, lr}
     bde:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
     be0:	2100      	movs	r1, #0
     be2:	4602      	mov	r2, r0
     be4:	9100      	str	r1, [sp, #0]
     be6:	4803      	ldr	r0, [pc, #12]	; (bf4 <vprintk+0x18>)
     be8:	f000 f8fc 	bl	de4 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
     bec:	b003      	add	sp, #12
     bee:	f85d fb04 	ldr.w	pc, [sp], #4
     bf2:	bf00      	nop
     bf4:	00000bc5 	.word	0x00000bc5

00000bf8 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
     bf8:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
     bfa:	2500      	movs	r5, #0
{
     bfc:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
     bfe:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
     c02:	4604      	mov	r4, r0
     c04:	9500      	str	r5, [sp, #0]
     c06:	a903      	add	r1, sp, #12
     c08:	4805      	ldr	r0, [pc, #20]	; (c20 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
     c0a:	9505      	str	r5, [sp, #20]
     c0c:	f000 f8ea 	bl	de4 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
     c10:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
     c14:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
     c16:	bfb8      	it	lt
     c18:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
     c1a:	b007      	add	sp, #28
     c1c:	bd30      	pop	{r4, r5, pc}
     c1e:	bf00      	nop
     c20:	00006fbd 	.word	0x00006fbd

00000c24 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     c24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     c28:	f8b0 9018 	ldrh.w	r9, [r0, #24]
{
     c2c:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     c2e:	f019 0808 	ands.w	r8, r9, #8
{
     c32:	4693      	mov	fp, r2
	if (processing) {
     c34:	d00d      	beq.n	c52 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
     c36:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     c38:	bf0c      	ite	eq
     c3a:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     c3e:	f049 0920 	orrne.w	r9, r9, #32
     c42:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     c46:	f38b 8811 	msr	BASEPRI, fp
     c4a:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     c4e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     c52:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
     c56:	2902      	cmp	r1, #2
     c58:	d107      	bne.n	c6a <process_event+0x46>
			evt = process_recheck(mgr);
     c5a:	4620      	mov	r0, r4
     c5c:	f006 f9db 	bl	7016 <process_recheck>
		if (evt == EVT_NOP) {
     c60:	2800      	cmp	r0, #0
     c62:	d0f0      	beq.n	c46 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
     c64:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     c66:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
     c68:	d14e      	bne.n	d08 <process_event+0xe4>
			res = mgr->last_res;
     c6a:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     c6c:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     c6e:	2f00      	cmp	r7, #0
     c70:	da15      	bge.n	c9e <process_event+0x7a>
		*clients = mgr->clients;
     c72:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     c74:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
     c78:	e9c4 8800 	strd	r8, r8, [r4]
     c7c:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
     c80:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
     c82:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     c84:	8b21      	ldrh	r1, [r4, #24]
     c86:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     c8a:	45ca      	cmp	sl, r9
     c8c:	d002      	beq.n	c94 <process_event+0x70>
		if (do_monitors
     c8e:	68a3      	ldr	r3, [r4, #8]
     c90:	2b00      	cmp	r3, #0
     c92:	d15a      	bne.n	d4a <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
     c94:	b90d      	cbnz	r5, c9a <process_event+0x76>
		    || (transit != NULL)) {
     c96:	2e00      	cmp	r6, #0
     c98:	d071      	beq.n	d7e <process_event+0x15a>
     c9a:	2300      	movs	r3, #0
     c9c:	e056      	b.n	d4c <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     c9e:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     ca2:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     ca4:	2a01      	cmp	r2, #1
     ca6:	d81e      	bhi.n	ce6 <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     ca8:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     cac:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     cae:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     cb0:	b289      	uxth	r1, r1
     cb2:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     cb6:	d10a      	bne.n	cce <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     cb8:	b13d      	cbz	r5, cca <process_event+0xa6>
     cba:	462a      	mov	r2, r5
     cbc:	8b63      	ldrh	r3, [r4, #26]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
     cbe:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
     cc0:	3301      	adds	r3, #1
     cc2:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     cc4:	2a00      	cmp	r2, #0
     cc6:	d1fa      	bne.n	cbe <process_event+0x9a>
     cc8:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     cca:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
     cce:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
     cd0:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     cd2:	f006 f9a0 	bl	7016 <process_recheck>
     cd6:	4606      	mov	r6, r0
     cd8:	2800      	cmp	r0, #0
     cda:	d0d3      	beq.n	c84 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     cdc:	8b23      	ldrh	r3, [r4, #24]
     cde:	f043 0320 	orr.w	r3, r3, #32
     ce2:	8323      	strh	r3, [r4, #24]
     ce4:	e7cd      	b.n	c82 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
     ce6:	2b04      	cmp	r3, #4
     ce8:	d10c      	bne.n	d04 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     cea:	f021 0107 	bic.w	r1, r1, #7
     cee:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
     cf0:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
     cf2:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     cf4:	f006 f98f 	bl	7016 <process_recheck>
     cf8:	4605      	mov	r5, r0
     cfa:	2800      	cmp	r0, #0
     cfc:	d0c1      	beq.n	c82 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     cfe:	f041 0120 	orr.w	r1, r1, #32
     d02:	8321      	strh	r1, [r4, #24]
     d04:	2500      	movs	r5, #0
     d06:	e7bc      	b.n	c82 <process_event+0x5e>
		} else if (evt == EVT_START) {
     d08:	2803      	cmp	r0, #3
     d0a:	d109      	bne.n	d20 <process_event+0xfc>
			transit = mgr->transitions->start;
     d0c:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     d0e:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
     d12:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     d14:	f043 0306 	orr.w	r3, r3, #6
}
     d18:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
     d1a:	8323      	strh	r3, [r4, #24]
		res = 0;
     d1c:	462f      	mov	r7, r5
     d1e:	e7b1      	b.n	c84 <process_event+0x60>
		} else if (evt == EVT_STOP) {
     d20:	2804      	cmp	r0, #4
     d22:	d106      	bne.n	d32 <process_event+0x10e>
			transit = mgr->transitions->stop;
     d24:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     d26:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
     d2a:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     d2c:	f043 0304 	orr.w	r3, r3, #4
     d30:	e7f2      	b.n	d18 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
     d32:	2805      	cmp	r0, #5
     d34:	d106      	bne.n	d44 <process_event+0x120>
			transit = mgr->transitions->reset;
     d36:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     d38:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
     d3c:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     d3e:	f043 0305 	orr.w	r3, r3, #5
     d42:	e7e9      	b.n	d18 <process_event+0xf4>
     d44:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
     d46:	462e      	mov	r6, r5
     d48:	e7e8      	b.n	d1c <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
     d4a:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     d4c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     d50:	8321      	strh	r1, [r4, #24]
     d52:	f38b 8811 	msr	BASEPRI, fp
     d56:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     d5a:	b9fb      	cbnz	r3, d9c <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
     d5c:	bb85      	cbnz	r5, dc0 <process_event+0x19c>
			if (transit != NULL) {
     d5e:	b116      	cbz	r6, d66 <process_event+0x142>
				transit(mgr, transition_complete);
     d60:	4620      	mov	r0, r4
     d62:	491f      	ldr	r1, [pc, #124]	; (de0 <process_event+0x1bc>)
     d64:	47b0      	blx	r6
	__asm__ volatile(
     d66:	f04f 0320 	mov.w	r3, #32
     d6a:	f3ef 8b11 	mrs	fp, BASEPRI
     d6e:	f383 8812 	msr	BASEPRI_MAX, r3
     d72:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     d76:	8b23      	ldrh	r3, [r4, #24]
     d78:	f023 0308 	bic.w	r3, r3, #8
     d7c:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     d7e:	8b23      	ldrh	r3, [r4, #24]
     d80:	06da      	lsls	r2, r3, #27
     d82:	d525      	bpl.n	dd0 <process_event+0x1ac>
			evt = EVT_COMPLETE;
     d84:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     d86:	f023 0310 	bic.w	r3, r3, #16
     d8a:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
     d8c:	f8b4 9018 	ldrh.w	r9, [r4, #24]
     d90:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
     d94:	2900      	cmp	r1, #0
     d96:	f47f af5e 	bne.w	c56 <process_event+0x32>
out:
     d9a:	e754      	b.n	c46 <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     d9c:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     d9e:	2900      	cmp	r1, #0
     da0:	d0dc      	beq.n	d5c <process_event+0x138>
	return node->next;
     da2:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
     da6:	463b      	mov	r3, r7
     da8:	4652      	mov	r2, sl
     daa:	4620      	mov	r0, r4
     dac:	f8d1 b004 	ldr.w	fp, [r1, #4]
     db0:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     db2:	f1b9 0f00 	cmp.w	r9, #0
     db6:	d0d1      	beq.n	d5c <process_event+0x138>
     db8:	4649      	mov	r1, r9
     dba:	f8d9 9000 	ldr.w	r9, [r9]
     dbe:	e7f2      	b.n	da6 <process_event+0x182>
     dc0:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
     dc2:	463b      	mov	r3, r7
     dc4:	4652      	mov	r2, sl
     dc6:	4620      	mov	r0, r4
     dc8:	682d      	ldr	r5, [r5, #0]
     dca:	f006 f940 	bl	704e <notify_one>
     dce:	e7c5      	b.n	d5c <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     dd0:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     dd4:	bf1e      	ittt	ne
     dd6:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
     dda:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     ddc:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
     dde:	e7d5      	b.n	d8c <process_event+0x168>
     de0:	0000707b 	.word	0x0000707b

00000de4 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
     de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     de8:	468b      	mov	fp, r1
     dea:	4692      	mov	sl, r2
     dec:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     dee:	2500      	movs	r5, #0
{
     df0:	b091      	sub	sp, #68	; 0x44
     df2:	9002      	str	r0, [sp, #8]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     df4:	f89a 0000 	ldrb.w	r0, [sl]
     df8:	b908      	cbnz	r0, dfe <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
     dfa:	4628      	mov	r0, r5
     dfc:	e363      	b.n	14c6 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x4c6>
		if (*fp != '%') {
     dfe:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
     e00:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
     e04:	d007      	beq.n	e16 <z_cbvprintf_impl+0x32>
			OUTC('%');
     e06:	4659      	mov	r1, fp
     e08:	9b02      	ldr	r3, [sp, #8]
     e0a:	4798      	blx	r3
     e0c:	2800      	cmp	r0, #0
     e0e:	f2c0 835a 	blt.w	14c6 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x4c6>
     e12:	3501      	adds	r5, #1
			break;
     e14:	e212      	b.n	123c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x23c>
		} state = {
     e16:	2218      	movs	r2, #24
     e18:	2100      	movs	r1, #0
     e1a:	a80a      	add	r0, sp, #40	; 0x28
     e1c:	f006 fdf9 	bl	7a12 <memset>
	if (*sp == '%') {
     e20:	f89a 3001 	ldrb.w	r3, [sl, #1]
     e24:	2b25      	cmp	r3, #37	; 0x25
     e26:	d078      	beq.n	f1a <z_cbvprintf_impl+0x136>
     e28:	2200      	movs	r2, #0
     e2a:	4610      	mov	r0, r2
     e2c:	4696      	mov	lr, r2
     e2e:	4694      	mov	ip, r2
     e30:	4616      	mov	r6, r2
     e32:	4639      	mov	r1, r7
		switch (*sp) {
     e34:	f817 3b01 	ldrb.w	r3, [r7], #1
     e38:	2b2b      	cmp	r3, #43	; 0x2b
     e3a:	f000 809d 	beq.w	f78 <z_cbvprintf_impl+0x194>
     e3e:	f200 8094 	bhi.w	f6a <z_cbvprintf_impl+0x186>
     e42:	2b20      	cmp	r3, #32
     e44:	f000 809b 	beq.w	f7e <z_cbvprintf_impl+0x19a>
     e48:	2b23      	cmp	r3, #35	; 0x23
     e4a:	f000 809b 	beq.w	f84 <z_cbvprintf_impl+0x1a0>
     e4e:	b12e      	cbz	r6, e5c <z_cbvprintf_impl+0x78>
     e50:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     e54:	f046 0604 	orr.w	r6, r6, #4
     e58:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     e5c:	f1bc 0f00 	cmp.w	ip, #0
     e60:	d005      	beq.n	e6e <z_cbvprintf_impl+0x8a>
     e62:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     e66:	f046 0608 	orr.w	r6, r6, #8
     e6a:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     e6e:	f1be 0f00 	cmp.w	lr, #0
     e72:	d005      	beq.n	e80 <z_cbvprintf_impl+0x9c>
     e74:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     e78:	f046 0610 	orr.w	r6, r6, #16
     e7c:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     e80:	b128      	cbz	r0, e8e <z_cbvprintf_impl+0xaa>
     e82:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     e86:	f040 0020 	orr.w	r0, r0, #32
     e8a:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     e8e:	b12a      	cbz	r2, e9c <z_cbvprintf_impl+0xb8>
     e90:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     e94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     e98:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
     e9c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     ea0:	f002 0044 	and.w	r0, r2, #68	; 0x44
     ea4:	2844      	cmp	r0, #68	; 0x44
     ea6:	d103      	bne.n	eb0 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
     ea8:	f36f 1286 	bfc	r2, #6, #1
     eac:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
     eb0:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     eb4:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
     eb6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     eba:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     ebe:	d17b      	bne.n	fb8 <z_cbvprintf_impl+0x1d4>
		conv->width_star = true;
     ec0:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
			++sp;
     ec4:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
     ec6:	f042 0201 	orr.w	r2, r2, #1
     eca:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
     ece:	781a      	ldrb	r2, [r3, #0]
     ed0:	2a2e      	cmp	r2, #46	; 0x2e
     ed2:	bf0c      	ite	eq
     ed4:	2101      	moveq	r1, #1
     ed6:	2100      	movne	r1, #0
     ed8:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     edc:	f361 0241 	bfi	r2, r1, #1, #1
     ee0:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
     ee4:	d174      	bne.n	fd0 <z_cbvprintf_impl+0x1ec>
	if (*sp == '*') {
     ee6:	785a      	ldrb	r2, [r3, #1]
     ee8:	2a2a      	cmp	r2, #42	; 0x2a
     eea:	d06a      	beq.n	fc2 <z_cbvprintf_impl+0x1de>
	size_t val = 0;
     eec:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
     eee:	260a      	movs	r6, #10
	++sp;
     ef0:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     ef2:	4618      	mov	r0, r3
     ef4:	f810 2b01 	ldrb.w	r2, [r0], #1
     ef8:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     efc:	2f09      	cmp	r7, #9
     efe:	f240 808e 	bls.w	101e <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1e>
	conv->unsupported |= ((conv->prec_value < 0)
     f02:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
     f06:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
     f08:	f3c2 0040 	ubfx	r0, r2, #1, #1
     f0c:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
     f10:	f361 0241 	bfi	r2, r1, #1, #1
     f14:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     f18:	e05a      	b.n	fd0 <z_cbvprintf_impl+0x1ec>
		conv->specifier = *sp++;
     f1a:	f10a 0702 	add.w	r7, sl, #2
     f1e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
     f22:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     f26:	07d9      	lsls	r1, r3, #31
     f28:	f140 8149 	bpl.w	11be <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1be>
			width = va_arg(ap, int);
     f2c:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
     f30:	f1b9 0f00 	cmp.w	r9, #0
     f34:	da07      	bge.n	f46 <z_cbvprintf_impl+0x162>
				conv->flag_dash = true;
     f36:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				width = -width;
     f3a:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
     f3e:	f042 0204 	orr.w	r2, r2, #4
     f42:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
		if (conv->prec_star) {
     f46:	075a      	lsls	r2, r3, #29
     f48:	f140 8142 	bpl.w	11d0 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1d0>
			int arg = va_arg(ap, int);
     f4c:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
     f50:	f1b8 0f00 	cmp.w	r8, #0
     f54:	f280 8141 	bge.w	11da <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1da>
				conv->prec_present = false;
     f58:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     f5c:	f36f 0341 	bfc	r3, #1, #1
     f60:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
     f64:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
     f68:	e137      	b.n	11da <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1da>
		switch (*sp) {
     f6a:	2b2d      	cmp	r3, #45	; 0x2d
     f6c:	d00c      	beq.n	f88 <z_cbvprintf_impl+0x1a4>
     f6e:	2b30      	cmp	r3, #48	; 0x30
     f70:	f47f af6d 	bne.w	e4e <z_cbvprintf_impl+0x6a>
			conv->flag_zero = true;
     f74:	2201      	movs	r2, #1
	} while (loop);
     f76:	e75c      	b.n	e32 <z_cbvprintf_impl+0x4e>
			conv->flag_plus = true;
     f78:	f04f 0c01 	mov.w	ip, #1
     f7c:	e759      	b.n	e32 <z_cbvprintf_impl+0x4e>
			conv->flag_space = true;
     f7e:	f04f 0e01 	mov.w	lr, #1
     f82:	e756      	b.n	e32 <z_cbvprintf_impl+0x4e>
			conv->flag_hash = true;
     f84:	2001      	movs	r0, #1
     f86:	e754      	b.n	e32 <z_cbvprintf_impl+0x4e>
		switch (*sp) {
     f88:	2601      	movs	r6, #1
     f8a:	e752      	b.n	e32 <z_cbvprintf_impl+0x4e>
		val = 10U * val + *sp++ - '0';
     f8c:	4633      	mov	r3, r6
     f8e:	fb0c 0202 	mla	r2, ip, r2, r0
     f92:	3a30      	subs	r2, #48	; 0x30
     f94:	461e      	mov	r6, r3
     f96:	f816 0b01 	ldrb.w	r0, [r6], #1
     f9a:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     f9e:	2f09      	cmp	r7, #9
     fa0:	d9f4      	bls.n	f8c <z_cbvprintf_impl+0x1a8>
	if (sp != wp) {
     fa2:	4299      	cmp	r1, r3
     fa4:	d093      	beq.n	ece <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
     fa6:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
     faa:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
     fac:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     fae:	f362 0141 	bfi	r1, r2, #1, #1
     fb2:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
     fb6:	e78a      	b.n	ece <z_cbvprintf_impl+0xea>
     fb8:	460b      	mov	r3, r1
	size_t val = 0;
     fba:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     fbc:	f04f 0c0a 	mov.w	ip, #10
     fc0:	e7e8      	b.n	f94 <z_cbvprintf_impl+0x1b0>
		conv->prec_star = true;
     fc2:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		return ++sp;
     fc6:	3302      	adds	r3, #2
		conv->prec_star = true;
     fc8:	f042 0204 	orr.w	r2, r2, #4
     fcc:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	switch (*sp) {
     fd0:	461f      	mov	r7, r3
     fd2:	f817 2b01 	ldrb.w	r2, [r7], #1
     fd6:	2a6c      	cmp	r2, #108	; 0x6c
     fd8:	d041      	beq.n	105e <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x5e>
     fda:	d825      	bhi.n	1028 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x28>
     fdc:	2a68      	cmp	r2, #104	; 0x68
     fde:	d02b      	beq.n	1038 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x38>
     fe0:	2a6a      	cmp	r2, #106	; 0x6a
     fe2:	d046      	beq.n	1072 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x72>
     fe4:	2a4c      	cmp	r2, #76	; 0x4c
     fe6:	d04c      	beq.n	1082 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x82>
     fe8:	461f      	mov	r7, r3
	conv->specifier = *sp++;
     fea:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
     fee:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	switch (conv->specifier) {
     ff2:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
     ff4:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
     ff8:	f200 80d9 	bhi.w	11ae <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1ae>
     ffc:	2a57      	cmp	r2, #87	; 0x57
     ffe:	d84d      	bhi.n	109c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x9c>
    1000:	2a41      	cmp	r2, #65	; 0x41
    1002:	d003      	beq.n	100c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xc>
    1004:	3a45      	subs	r2, #69	; 0x45
    1006:	2a02      	cmp	r2, #2
    1008:	f200 80d1 	bhi.w	11ae <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1ae>
		conv->specifier_cat = SPECIFIER_FP;
    100c:	2204      	movs	r2, #4
    100e:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    1012:	f362 0302 	bfi	r3, r2, #0, #3
    1016:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
    101a:	2301      	movs	r3, #1
			break;
    101c:	e09e      	b.n	115c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x15c>
		val = 10U * val + *sp++ - '0';
    101e:	fb06 2101 	mla	r1, r6, r1, r2
    1022:	4603      	mov	r3, r0
    1024:	3930      	subs	r1, #48	; 0x30
    1026:	e764      	b.n	ef2 <z_cbvprintf_impl+0x10e>
	switch (*sp) {
    1028:	2a74      	cmp	r2, #116	; 0x74
    102a:	d026      	beq.n	107a <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x7a>
    102c:	2a7a      	cmp	r2, #122	; 0x7a
    102e:	d1db      	bne.n	fe8 <z_cbvprintf_impl+0x204>
		conv->length_mod = LENGTH_Z;
    1030:	2206      	movs	r2, #6
    1032:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1036:	e00d      	b.n	1054 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x54>
		if (*++sp == 'h') {
    1038:	785a      	ldrb	r2, [r3, #1]
    103a:	2a68      	cmp	r2, #104	; 0x68
    103c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1040:	d106      	bne.n	1050 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x50>
			conv->length_mod = LENGTH_HH;
    1042:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    1044:	f361 02c6 	bfi	r2, r1, #3, #4
    1048:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
    104c:	1c9f      	adds	r7, r3, #2
    104e:	e7cc      	b.n	fea <z_cbvprintf_impl+0x206>
			conv->length_mod = LENGTH_H;
    1050:	4613      	mov	r3, r2
    1052:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    1054:	f362 03c6 	bfi	r3, r2, #3, #4
    1058:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
    105c:	e7c5      	b.n	fea <z_cbvprintf_impl+0x206>
		if (*++sp == 'l') {
    105e:	785a      	ldrb	r2, [r3, #1]
    1060:	2a6c      	cmp	r2, #108	; 0x6c
    1062:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1066:	d101      	bne.n	106c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x6c>
			conv->length_mod = LENGTH_LL;
    1068:	2104      	movs	r1, #4
    106a:	e7eb      	b.n	1044 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x44>
			conv->length_mod = LENGTH_L;
    106c:	4613      	mov	r3, r2
    106e:	2203      	movs	r2, #3
    1070:	e7f0      	b.n	1054 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x54>
		conv->length_mod = LENGTH_J;
    1072:	2205      	movs	r2, #5
    1074:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1078:	e7ec      	b.n	1054 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x54>
		conv->length_mod = LENGTH_T;
    107a:	2207      	movs	r2, #7
    107c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1080:	e7e8      	b.n	1054 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x54>
		conv->unsupported = true;
    1082:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    1086:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    108a:	f023 0302 	bic.w	r3, r3, #2
    108e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1092:	f043 0302 	orr.w	r3, r3, #2
    1096:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
    109a:	e7a6      	b.n	fea <z_cbvprintf_impl+0x206>
	switch (conv->specifier) {
    109c:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    10a0:	2920      	cmp	r1, #32
    10a2:	f200 8084 	bhi.w	11ae <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1ae>
    10a6:	a001      	add	r0, pc, #4	; (adr r0, 10ac <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xac>)
    10a8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    10ac:	00001171 	.word	0x00001171
    10b0:	000011af 	.word	0x000011af
    10b4:	000011af 	.word	0x000011af
    10b8:	000011af 	.word	0x000011af
    10bc:	000011af 	.word	0x000011af
    10c0:	000011af 	.word	0x000011af
    10c4:	000011af 	.word	0x000011af
    10c8:	000011af 	.word	0x000011af
    10cc:	000011af 	.word	0x000011af
    10d0:	0000100d 	.word	0x0000100d
    10d4:	000011af 	.word	0x000011af
    10d8:	00001171 	.word	0x00001171
    10dc:	00001131 	.word	0x00001131
    10e0:	0000100d 	.word	0x0000100d
    10e4:	0000100d 	.word	0x0000100d
    10e8:	0000100d 	.word	0x0000100d
    10ec:	000011af 	.word	0x000011af
    10f0:	00001131 	.word	0x00001131
    10f4:	000011af 	.word	0x000011af
    10f8:	000011af 	.word	0x000011af
    10fc:	000011af 	.word	0x000011af
    1100:	000011af 	.word	0x000011af
    1104:	00001179 	.word	0x00001179
    1108:	00001171 	.word	0x00001171
    110c:	00001195 	.word	0x00001195
    1110:	000011af 	.word	0x000011af
    1114:	000011af 	.word	0x000011af
    1118:	00001195 	.word	0x00001195
    111c:	000011af 	.word	0x000011af
    1120:	00001171 	.word	0x00001171
    1124:	000011af 	.word	0x000011af
    1128:	000011af 	.word	0x000011af
    112c:	00001171 	.word	0x00001171
		conv->specifier_cat = SPECIFIER_SINT;
    1130:	2001      	movs	r0, #1
    1132:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    1136:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    113a:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    113e:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    1140:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
    1144:	bf02      	ittt	eq
    1146:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
    114a:	f041 0101 	orreq.w	r1, r1, #1
    114e:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    1152:	2a63      	cmp	r2, #99	; 0x63
    1154:	d131      	bne.n	11ba <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1ba>
			unsupported = (conv->length_mod != LENGTH_NONE);
    1156:	3b00      	subs	r3, #0
    1158:	bf18      	it	ne
    115a:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    115c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1160:	f3c2 0140 	ubfx	r1, r2, #1, #1
    1164:	430b      	orrs	r3, r1
    1166:	f363 0241 	bfi	r2, r3, #1, #1
    116a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    116e:	e6d8      	b.n	f22 <z_cbvprintf_impl+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
    1170:	2002      	movs	r0, #2
    1172:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    1176:	e7de      	b.n	1136 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x136>
		conv->specifier_cat = SPECIFIER_PTR;
    1178:	2103      	movs	r1, #3
    117a:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    117e:	f003 0378 	and.w	r3, r3, #120	; 0x78
    1182:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    1186:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    118a:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    118c:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    1190:	4143      	adcs	r3, r0
    1192:	e7e3      	b.n	115c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x15c>
		conv->specifier_cat = SPECIFIER_PTR;
    1194:	2103      	movs	r1, #3
    1196:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    119a:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    119e:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
    11a2:	bf14      	ite	ne
    11a4:	2301      	movne	r3, #1
    11a6:	2300      	moveq	r3, #0
		conv->specifier_cat = SPECIFIER_PTR;
    11a8:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    11ac:	e7d6      	b.n	115c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x15c>
		conv->invalid = true;
    11ae:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    11b2:	f043 0301 	orr.w	r3, r3, #1
    11b6:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    11ba:	2300      	movs	r3, #0
    11bc:	e7ce      	b.n	115c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x15c>
		} else if (conv->width_present) {
    11be:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    11c2:	2a00      	cmp	r2, #0
		int width = -1;
    11c4:	bfac      	ite	ge
    11c6:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
			width = conv->width_value;
    11ca:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
    11ce:	e6ba      	b.n	f46 <z_cbvprintf_impl+0x162>
		} else if (conv->prec_present) {
    11d0:	079b      	lsls	r3, r3, #30
    11d2:	f57f aec7 	bpl.w	f64 <z_cbvprintf_impl+0x180>
			precision = conv->prec_value;
    11d6:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		conv->pad0_value = 0;
    11da:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    11dc:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    11e0:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
			= (enum length_mod_enum)conv->length_mod;
    11e4:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		enum specifier_cat_enum specifier_cat
    11e8:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    11ec:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    11ee:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    11f2:	d135      	bne.n	1260 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x260>
			switch (length_mod) {
    11f4:	1ecb      	subs	r3, r1, #3
    11f6:	2b04      	cmp	r3, #4
    11f8:	d822      	bhi.n	1240 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x240>
    11fa:	e8df f003 	tbb	[pc, r3]
    11fe:	0903      	.short	0x0903
    1200:	2109      	.short	0x2109
    1202:	21          	.byte	0x21
    1203:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    1204:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    1208:	17da      	asrs	r2, r3, #31
    120a:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
    120e:	e006      	b.n	121e <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x21e>
					(sint_value_type)va_arg(ap, intmax_t);
    1210:	3407      	adds	r4, #7
    1212:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    1216:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    121a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    121e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    1222:	f013 0603 	ands.w	r6, r3, #3
    1226:	d059      	beq.n	12dc <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x2dc>
			OUTS(sp, fp);
    1228:	463b      	mov	r3, r7
    122a:	4652      	mov	r2, sl
    122c:	4659      	mov	r1, fp
    122e:	9802      	ldr	r0, [sp, #8]
    1230:	f006 f8ec 	bl	740c <outs>
    1234:	2800      	cmp	r0, #0
    1236:	f2c0 8146 	blt.w	14c6 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x4c6>
    123a:	4405      	add	r5, r0
			continue;
    123c:	46ba      	mov	sl, r7
    123e:	e5d9      	b.n	df4 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1240:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    1244:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1246:	ea4f 72e3 	mov.w	r2, r3, asr #31
    124a:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    124e:	d102      	bne.n	1256 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x256>
				value->sint = (signed char)value->sint;
    1250:	f99d 3028 	ldrsb.w	r3, [sp, #40]	; 0x28
    1254:	e7d8      	b.n	1208 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x208>
			} else if (length_mod == LENGTH_H) {
    1256:	2902      	cmp	r1, #2
    1258:	d1e1      	bne.n	121e <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x21e>
				value->sint = (short)value->sint;
    125a:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
    125e:	e7d3      	b.n	1208 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x208>
		} else if (specifier_cat == SPECIFIER_UINT) {
    1260:	2b02      	cmp	r3, #2
    1262:	d129      	bne.n	12b8 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x2b8>
			switch (length_mod) {
    1264:	1ecb      	subs	r3, r1, #3
    1266:	2b04      	cmp	r3, #4
    1268:	d813      	bhi.n	1292 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x292>
    126a:	e8df f003 	tbb	[pc, r3]
    126e:	0a03      	.short	0x0a03
    1270:	120a      	.short	0x120a
    1272:	12          	.byte	0x12
    1273:	00          	.byte	0x00
				if ((!WCHAR_IS_SIGNED)
    1274:	2300      	movs	r3, #0
					value->uint = (wchar_t)va_arg(ap,
    1276:	6822      	ldr	r2, [r4, #0]
				value->sint = va_arg(ap, int);
    1278:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    127a:	920a      	str	r2, [sp, #40]	; 0x28
    127c:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
    127e:	4604      	mov	r4, r0
    1280:	e7cd      	b.n	121e <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x21e>
					(uint_value_type)va_arg(ap,
    1282:	1de0      	adds	r0, r4, #7
    1284:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    1288:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    128c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
    1290:	e7f5      	b.n	127e <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x27e>
					(uint_value_type)va_arg(ap, size_t);
    1292:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    1296:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    1298:	930a      	str	r3, [sp, #40]	; 0x28
    129a:	f04f 0300 	mov.w	r3, #0
    129e:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    12a0:	d105      	bne.n	12ae <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x2ae>
				value->uint = (unsigned char)value->uint;
    12a2:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
    12a6:	930a      	str	r3, [sp, #40]	; 0x28
    12a8:	2300      	movs	r3, #0
    12aa:	930b      	str	r3, [sp, #44]	; 0x2c
    12ac:	e7b7      	b.n	121e <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x21e>
			} else if (length_mod == LENGTH_H) {
    12ae:	2902      	cmp	r1, #2
    12b0:	d1b5      	bne.n	121e <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x21e>
				value->uint = (unsigned short)value->uint;
    12b2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    12b6:	e7f6      	b.n	12a6 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x2a6>
		} else if (specifier_cat == SPECIFIER_FP) {
    12b8:	2b04      	cmp	r3, #4
    12ba:	d109      	bne.n	12d0 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x2d0>
					(sint_value_type)va_arg(ap, long long);
    12bc:	1de3      	adds	r3, r4, #7
    12be:	f023 0307 	bic.w	r3, r3, #7
    12c2:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    12c6:	e9d3 2300 	ldrd	r2, r3, [r3]
    12ca:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    12ce:	e7a6      	b.n	121e <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x21e>
		} else if (specifier_cat == SPECIFIER_PTR) {
    12d0:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    12d2:	bf04      	itt	eq
    12d4:	f854 3b04 	ldreq.w	r3, [r4], #4
    12d8:	930a      	streq	r3, [sp, #40]	; 0x28
    12da:	e7a0      	b.n	121e <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x21e>
		switch (conv->specifier) {
    12dc:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    12e0:	2878      	cmp	r0, #120	; 0x78
    12e2:	d8ab      	bhi.n	123c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x23c>
    12e4:	2862      	cmp	r0, #98	; 0x62
    12e6:	d822      	bhi.n	132e <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x32e>
    12e8:	2825      	cmp	r0, #37	; 0x25
    12ea:	f43f ad8c 	beq.w	e06 <z_cbvprintf_impl+0x22>
    12ee:	2858      	cmp	r0, #88	; 0x58
    12f0:	d1a4      	bne.n	123c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x23c>
			bps = encode_uint(value->uint, conv, buf, bpe);
    12f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    12f6:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    12fa:	9300      	str	r3, [sp, #0]
    12fc:	aa0c      	add	r2, sp, #48	; 0x30
    12fe:	ab04      	add	r3, sp, #16
    1300:	f006 f83e 	bl	7380 <encode_uint>
    1304:	4682      	mov	sl, r0
			if (precision >= 0) {
    1306:	f1b8 0f00 	cmp.w	r8, #0
    130a:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    130e:	db0c      	blt.n	132a <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x32a>
				conv->flag_zero = false;
    1310:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    1314:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    1318:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    131c:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    131e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    1322:	d902      	bls.n	132a <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x32a>
					conv->pad0_value = precision - (int)len;
    1324:	eba8 0303 	sub.w	r3, r8, r3
    1328:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    132a:	4680      	mov	r8, r0
    132c:	e03e      	b.n	13ac <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x3ac>
		switch (conv->specifier) {
    132e:	3863      	subs	r0, #99	; 0x63
    1330:	2815      	cmp	r0, #21
    1332:	d883      	bhi.n	123c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x23c>
    1334:	a201      	add	r2, pc, #4	; (adr r2, 133c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x33c>)
    1336:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    133a:	bf00      	nop
    133c:	000013bd 	.word	0x000013bd
    1340:	00001421 	.word	0x00001421
    1344:	0000123d 	.word	0x0000123d
    1348:	0000123d 	.word	0x0000123d
    134c:	0000123d 	.word	0x0000123d
    1350:	0000123d 	.word	0x0000123d
    1354:	00001421 	.word	0x00001421
    1358:	0000123d 	.word	0x0000123d
    135c:	0000123d 	.word	0x0000123d
    1360:	0000123d 	.word	0x0000123d
    1364:	0000123d 	.word	0x0000123d
    1368:	0000147b 	.word	0x0000147b
    136c:	00001449 	.word	0x00001449
    1370:	0000144d 	.word	0x0000144d
    1374:	0000123d 	.word	0x0000123d
    1378:	0000123d 	.word	0x0000123d
    137c:	00001395 	.word	0x00001395
    1380:	0000123d 	.word	0x0000123d
    1384:	00001449 	.word	0x00001449
    1388:	0000123d 	.word	0x0000123d
    138c:	0000123d 	.word	0x0000123d
    1390:	00001449 	.word	0x00001449
			if (precision >= 0) {
    1394:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    1398:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    139c:	db0a      	blt.n	13b4 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x3b4>
				len = strnlen(bps, precision);
    139e:	4641      	mov	r1, r8
    13a0:	4650      	mov	r0, sl
    13a2:	f006 fb22 	bl	79ea <strnlen>
		char sign = 0;
    13a6:	2600      	movs	r6, #0
			bpe = bps + len;
    13a8:	eb0a 0800 	add.w	r8, sl, r0
		if (bps == NULL) {
    13ac:	f1ba 0f00 	cmp.w	sl, #0
    13b0:	d10c      	bne.n	13cc <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x3cc>
    13b2:	e743      	b.n	123c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x23c>
				len = strlen(bps);
    13b4:	4650      	mov	r0, sl
    13b6:	f006 fb11 	bl	79dc <strlen>
    13ba:	e7f4      	b.n	13a6 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x3a6>
			break;
    13bc:	2600      	movs	r6, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    13be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			bps = buf;
    13c0:	f10d 0a10 	add.w	sl, sp, #16
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    13c4:	f88d 3010 	strb.w	r3, [sp, #16]
			bpe = buf + 1;
    13c8:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
    13cc:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    13d0:	b106      	cbz	r6, 13d4 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x3d4>
			nj_len += 1U;
    13d2:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    13d4:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    13d8:	06d0      	lsls	r0, r2, #27
    13da:	d568      	bpl.n	14ae <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x4ae>
			nj_len += 2U;
    13dc:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    13de:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    13e0:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    13e2:	bf48      	it	mi
    13e4:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    13e6:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    13e8:	bf48      	it	mi
    13ea:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    13ec:	f1b9 0f00 	cmp.w	r9, #0
    13f0:	dd76      	ble.n	14e0 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x4e0>
			if (!conv->flag_dash) {
    13f2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    13f6:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    13fa:	f3c2 0380 	ubfx	r3, r2, #2, #1
    13fe:	9303      	str	r3, [sp, #12]
    1400:	0753      	lsls	r3, r2, #29
    1402:	d46d      	bmi.n	14e0 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x4e0>
				if (conv->flag_zero) {
    1404:	0650      	lsls	r0, r2, #25
    1406:	d561      	bpl.n	14cc <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x4cc>
					if (sign != 0) {
    1408:	b146      	cbz	r6, 141c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x41c>
						OUTC(sign);
    140a:	4659      	mov	r1, fp
    140c:	4630      	mov	r0, r6
    140e:	9b02      	ldr	r3, [sp, #8]
    1410:	4798      	blx	r3
    1412:	2800      	cmp	r0, #0
    1414:	db57      	blt.n	14c6 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x4c6>
						sign = 0;
    1416:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    1418:	3501      	adds	r5, #1
						sign = 0;
    141a:	461e      	mov	r6, r3
					pad = '0';
    141c:	2330      	movs	r3, #48	; 0x30
    141e:	e056      	b.n	14ce <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x4ce>
			if (conv->flag_plus) {
    1420:	071e      	lsls	r6, r3, #28
    1422:	d40f      	bmi.n	1444 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x444>
				sign = ' ';
    1424:	f013 0610 	ands.w	r6, r3, #16
    1428:	bf18      	it	ne
    142a:	2620      	movne	r6, #32
			sint = value->sint;
    142c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
    1430:	2b00      	cmp	r3, #0
    1432:	f6bf af5e 	bge.w	12f2 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x2f2>
				value->uint = (uint_value_type)-sint;
    1436:	4252      	negs	r2, r2
    1438:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
    143c:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
    143e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    1442:	e756      	b.n	12f2 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x2f2>
				sign = '+';
    1444:	262b      	movs	r6, #43	; 0x2b
    1446:	e7f1      	b.n	142c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x42c>
		switch (conv->specifier) {
    1448:	2600      	movs	r6, #0
    144a:	e752      	b.n	12f2 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x2f2>
			if (value->ptr != NULL) {
    144c:	980a      	ldr	r0, [sp, #40]	; 0x28
    144e:	b340      	cbz	r0, 14a2 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x4a2>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1450:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    1454:	9300      	str	r3, [sp, #0]
    1456:	2100      	movs	r1, #0
    1458:	ab04      	add	r3, sp, #16
    145a:	aa0c      	add	r2, sp, #48	; 0x30
    145c:	f005 ff90 	bl	7380 <encode_uint>
				conv->altform_0c = true;
    1460:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1464:	4682      	mov	sl, r0
				conv->altform_0c = true;
    1466:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    146a:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    146e:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
    1472:	2600      	movs	r6, #0
				conv->altform_0c = true;
    1474:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
				goto prec_int_pad0;
    1478:	e745      	b.n	1306 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x306>
				store_count(conv, value->ptr, count);
    147a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    147c:	2907      	cmp	r1, #7
    147e:	f63f aedd 	bhi.w	123c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x23c>
    1482:	e8df f001 	tbb	[pc, r1]
    1486:	040c      	.short	0x040c
    1488:	08080c06 	.word	0x08080c06
    148c:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    148e:	701d      	strb	r5, [r3, #0]
		break;
    1490:	e6d4      	b.n	123c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x23c>
		*(short *)dp = (short)count;
    1492:	801d      	strh	r5, [r3, #0]
		break;
    1494:	e6d2      	b.n	123c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x23c>
		*(intmax_t *)dp = (intmax_t)count;
    1496:	17ea      	asrs	r2, r5, #31
    1498:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    149c:	e6ce      	b.n	123c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x23c>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    149e:	601d      	str	r5, [r3, #0]
		break;
    14a0:	e6cc      	b.n	123c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x23c>
			bps = "(nil)";
    14a2:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 156c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x56c>
    14a6:	4606      	mov	r6, r0
			bpe = bps + 5;
    14a8:	f10a 0805 	add.w	r8, sl, #5
    14ac:	e78e      	b.n	13cc <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x3cc>
		} else if (conv->altform_0) {
    14ae:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    14b0:	bf48      	it	mi
    14b2:	3301      	addmi	r3, #1
    14b4:	e793      	b.n	13de <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x3de>
					OUTC(pad);
    14b6:	4618      	mov	r0, r3
    14b8:	9303      	str	r3, [sp, #12]
    14ba:	4659      	mov	r1, fp
    14bc:	9b02      	ldr	r3, [sp, #8]
    14be:	4798      	blx	r3
    14c0:	2800      	cmp	r0, #0
    14c2:	9b03      	ldr	r3, [sp, #12]
    14c4:	da04      	bge.n	14d0 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x4d0>
#undef OUTS
#undef OUTC
}
    14c6:	b011      	add	sp, #68	; 0x44
    14c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    14cc:	2320      	movs	r3, #32
    14ce:	444d      	add	r5, r9
    14d0:	464a      	mov	r2, r9
				while (width-- > 0) {
    14d2:	2a00      	cmp	r2, #0
    14d4:	eba5 0109 	sub.w	r1, r5, r9
    14d8:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    14dc:	dceb      	bgt.n	14b6 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x4b6>
    14de:	460d      	mov	r5, r1
		if (sign != 0) {
    14e0:	b136      	cbz	r6, 14f0 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x4f0>
			OUTC(sign);
    14e2:	4659      	mov	r1, fp
    14e4:	4630      	mov	r0, r6
    14e6:	9b02      	ldr	r3, [sp, #8]
    14e8:	4798      	blx	r3
    14ea:	2800      	cmp	r0, #0
    14ec:	dbeb      	blt.n	14c6 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x4c6>
    14ee:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    14f0:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    14f4:	06d9      	lsls	r1, r3, #27
    14f6:	d401      	bmi.n	14fc <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x4fc>
    14f8:	071a      	lsls	r2, r3, #28
    14fa:	d506      	bpl.n	150a <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x50a>
				OUTC('0');
    14fc:	4659      	mov	r1, fp
    14fe:	2030      	movs	r0, #48	; 0x30
    1500:	9b02      	ldr	r3, [sp, #8]
    1502:	4798      	blx	r3
    1504:	2800      	cmp	r0, #0
    1506:	dbde      	blt.n	14c6 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x4c6>
    1508:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    150a:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    150e:	06db      	lsls	r3, r3, #27
    1510:	d507      	bpl.n	1522 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x522>
				OUTC(conv->specifier);
    1512:	4659      	mov	r1, fp
    1514:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    1518:	9b02      	ldr	r3, [sp, #8]
    151a:	4798      	blx	r3
    151c:	2800      	cmp	r0, #0
    151e:	dbd2      	blt.n	14c6 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x4c6>
    1520:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    1522:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    1524:	442e      	add	r6, r5
    1526:	1b73      	subs	r3, r6, r5
    1528:	2b00      	cmp	r3, #0
    152a:	dc16      	bgt.n	155a <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x55a>
			OUTS(bps, bpe);
    152c:	4643      	mov	r3, r8
    152e:	4652      	mov	r2, sl
    1530:	4659      	mov	r1, fp
    1532:	9802      	ldr	r0, [sp, #8]
    1534:	f005 ff6a 	bl	740c <outs>
    1538:	2800      	cmp	r0, #0
    153a:	dbc4      	blt.n	14c6 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x4c6>
    153c:	4405      	add	r5, r0
		while (width > 0) {
    153e:	44a9      	add	r9, r5
    1540:	eba9 0305 	sub.w	r3, r9, r5
    1544:	2b00      	cmp	r3, #0
    1546:	f77f ae79 	ble.w	123c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x23c>
			OUTC(' ');
    154a:	4659      	mov	r1, fp
    154c:	2020      	movs	r0, #32
    154e:	9b02      	ldr	r3, [sp, #8]
    1550:	4798      	blx	r3
    1552:	2800      	cmp	r0, #0
    1554:	dbb7      	blt.n	14c6 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x4c6>
    1556:	3501      	adds	r5, #1
			--width;
    1558:	e7f2      	b.n	1540 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x540>
				OUTC('0');
    155a:	4659      	mov	r1, fp
    155c:	2030      	movs	r0, #48	; 0x30
    155e:	9b02      	ldr	r3, [sp, #8]
    1560:	4798      	blx	r3
    1562:	2800      	cmp	r0, #0
    1564:	dbaf      	blt.n	14c6 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x4c6>
    1566:	3501      	adds	r5, #1
    1568:	e7dd      	b.n	1526 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x526>
    156a:	bf00      	nop
    156c:	00008d3f 	.word	0x00008d3f

00001570 <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    1570:	b508      	push	{r3, lr}
    1572:	f04f 0220 	mov.w	r2, #32
    1576:	f3ef 8311 	mrs	r3, BASEPRI
    157a:	f382 8812 	msr	BASEPRI_MAX, r2
    157e:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    1582:	f001 fccb 	bl	2f1c <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    1586:	4803      	ldr	r0, [pc, #12]	; (1594 <sys_reboot+0x24>)
    1588:	f005 fd2b 	bl	6fe2 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    158c:	f001 f80c 	bl	25a8 <arch_cpu_idle>
    1590:	e7fc      	b.n	158c <sys_reboot+0x1c>
    1592:	bf00      	nop
    1594:	00008d45 	.word	0x00008d45

00001598 <nrf_gpio_pin_control_select.constprop.0>:

#if NRF_GPIO_HAS_SEL
NRF_STATIC_INLINE void nrf_gpio_pin_control_select(uint32_t pin_number, nrf_gpio_pin_sel_t ctrl)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
    1598:	4b05      	ldr	r3, [pc, #20]	; (15b0 <nrf_gpio_pin_control_select.constprop.0+0x18>)
    159a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    159e:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    15a2:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (ctrl << GPIO_PIN_CNF_MCUSEL_Pos);
    15a6:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
    15aa:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
    15ae:	4770      	bx	lr
    15b0:	50842500 	.word	0x50842500

000015b4 <nordicsemi_nrf53_init>:

}
#endif /* CONFIG_PM_S2RAM */

static int nordicsemi_nrf53_init(const struct device *arg)
{
    15b4:	b510      	push	{r4, lr}
    15b6:	f04f 0320 	mov.w	r3, #32
    15ba:	f3ef 8411 	mrs	r4, BASEPRI
    15be:	f383 8812 	msr	BASEPRI_MAX, r3
    15c2:	f3bf 8f6f 	isb	sy

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_cache_enable(NRF_CACHE_Type * p_reg)
{
    p_reg->ENABLE = CACHE_ENABLE_ENABLE_Enabled;
    15c6:	2201      	movs	r2, #1
    15c8:	4b0c      	ldr	r3, [pc, #48]	; (15fc <nordicsemi_nrf53_init+0x48>)
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
    15ca:	490d      	ldr	r1, [pc, #52]	; (1600 <nordicsemi_nrf53_init+0x4c>)
    15cc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    15d0:	2302      	movs	r3, #2
#if !defined(CONFIG_BUILD_WITH_TFM)
	/* This can only be done from secure code.
	 * This is handled by the TF-M platform so we skip it when TF-M is
	 * enabled.
	 */
	nrf_gpio_pin_control_select(PIN_XL1, NRF_GPIO_PIN_SEL_PERIPHERAL);
    15d2:	2000      	movs	r0, #0
    15d4:	f8c1 36d0 	str.w	r3, [r1, #1744]	; 0x6d0
    15d8:	f7ff ffde 	bl	1598 <nrf_gpio_pin_control_select.constprop.0>
	nrf_gpio_pin_control_select(PIN_XL2, NRF_GPIO_PIN_SEL_PERIPHERAL);
    15dc:	4610      	mov	r0, r2
    15de:	f7ff ffdb 	bl	1598 <nrf_gpio_pin_control_select.constprop.0>
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
    15e2:	f8c1 2704 	str.w	r2, [r1, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
    15e6:	f8c1 2904 	str.w	r2, [r1, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
    15ea:	f8c1 2b00 	str.w	r2, [r1, #2816]	; 0xb00
	__asm__ volatile(
    15ee:	f384 8811 	msr	BASEPRI, r4
    15f2:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    15f6:	2000      	movs	r0, #0
    15f8:	bd10      	pop	{r4, pc}
    15fa:	bf00      	nop
    15fc:	50001000 	.word	0x50001000
    1600:	50004000 	.word	0x50004000

00001604 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    1604:	b148      	cbz	r0, 161a <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    1606:	4b05      	ldr	r3, [pc, #20]	; (161c <arch_busy_wait+0x18>)
    1608:	681a      	ldr	r2, [r3, #0]
    160a:	4b05      	ldr	r3, [pc, #20]	; (1620 <arch_busy_wait+0x1c>)
    160c:	fbb2 f2f3 	udiv	r2, r2, r3
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    1610:	4b04      	ldr	r3, [pc, #16]	; (1624 <arch_busy_wait+0x20>)
    delay_cycles(cycles);
    1612:	4350      	muls	r0, r2
    1614:	f043 0301 	orr.w	r3, r3, #1
    1618:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    161a:	4770      	bx	lr
    161c:	20000054 	.word	0x20000054
    1620:	000f4240 	.word	0x000f4240
    1624:	00008920 	.word	0x00008920

00001628 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    1628:	2806      	cmp	r0, #6
    162a:	d107      	bne.n	163c <pm_state_set+0x14>
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
    162c:	2201      	movs	r2, #1
    162e:	4b04      	ldr	r3, [pc, #16]	; (1640 <pm_state_set+0x18>)
    1630:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1634:	f3bf 8f4f 	dsb	sy
        __WFE();
    1638:	bf20      	wfe
    while (true)
    163a:	e7fd      	b.n	1638 <pm_state_set+0x10>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    163c:	4770      	bx	lr
    163e:	bf00      	nop
    1640:	50004000 	.word	0x50004000

00001644 <sync_rtc_setup>:
	return ipm_set_enabled(ipm_dev, true);
}

/* Setup RTC synchronization. */
static int sync_rtc_setup(const struct device *unused)
{
    1644:	b5f0      	push	{r4, r5, r6, r7, lr}
    1646:	b083      	sub	sp, #12
    1648:	af00      	add	r7, sp, #0
	nrfx_err_t err;
	union rtc_sync_channels channels;
	int32_t sync_rtc_ch;
	int rv;

	err = nrfx_dppi_channel_alloc(&channels.ch.ppi);
    164a:	1d38      	adds	r0, r7, #4
    164c:	f003 fb9c 	bl	4d88 <nrfx_dppi_channel_alloc>
	if (err != NRFX_SUCCESS) {
    1650:	4b27      	ldr	r3, [pc, #156]	; (16f0 <sync_rtc_setup+0xac>)
    1652:	4298      	cmp	r0, r3
    1654:	d148      	bne.n	16e8 <sync_rtc_setup+0xa4>
		rv = -ENODEV;
		goto bail;
	}

	sync_rtc_ch = z_nrf_rtc_timer_chan_alloc();
    1656:	f003 f82d 	bl	46b4 <z_nrf_rtc_timer_chan_alloc>
	if (sync_rtc_ch < 0) {
    165a:	1e04      	subs	r4, r0, #0
    165c:	da13      	bge.n	1686 <sync_rtc_setup+0x42>
		nrfx_dppi_channel_free(channels.ch.ppi);
    165e:	7938      	ldrb	r0, [r7, #4]
    1660:	f003 fb98 	bl	4d94 <nrfx_dppi_channel_free>
		irq_unlock(key);
	}

bail:
	if (rv != 0) {
		LOG_ERR("Failed synchronized RTC setup (err: %d)", rv);
    1664:	466d      	mov	r5, sp
    1666:	b088      	sub	sp, #32
    1668:	466a      	mov	r2, sp
    166a:	4b22      	ldr	r3, [pc, #136]	; (16f4 <sync_rtc_setup+0xb0>)
    166c:	e9c2 3405 	strd	r3, r4, [r2, #20]
    1670:	2303      	movs	r3, #3
    1672:	f842 3f10 	str.w	r3, [r2, #16]!
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
    1676:	2300      	movs	r3, #0
    1678:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    167c:	481e      	ldr	r0, [pc, #120]	; (16f8 <sync_rtc_setup+0xb4>)
    167e:	f000 fb03 	bl	1c88 <z_impl_z_log_msg_static_create>
    1682:	46ad      	mov	sp, r5
	}

	return rv;
    1684:	e02c      	b.n	16e0 <sync_rtc_setup+0x9c>
	channels.ch.ipc_out = CONFIG_NRF53_SYNC_RTC_IPM_OUT;
    1686:	f640 0307 	movw	r3, #2055	; 0x807
 */
static inline int mbox_register_callback(const struct mbox_channel *channel,
					 mbox_callback_t cb,
					 void *user_data)
{
	const struct mbox_driver_api *api =
    168a:	4d1c      	ldr	r5, [pc, #112]	; (16fc <sync_rtc_setup+0xb8>)
	channels.ch.rtc = (uint8_t)sync_rtc_ch;
    168c:	717c      	strb	r4, [r7, #5]
		(const struct mbox_driver_api *)channel->dev->api;

	if (api->register_callback == NULL) {
    168e:	68ae      	ldr	r6, [r5, #8]
	channels.ch.ipc_out = CONFIG_NRF53_SYNC_RTC_IPM_OUT;
    1690:	80fb      	strh	r3, [r7, #6]
    1692:	6874      	ldr	r4, [r6, #4]
	rv = IS_ENABLED(CONFIG_MBOX) ? mbox_rx_init((void *)channels.raw) :
    1694:	687b      	ldr	r3, [r7, #4]
    1696:	b13c      	cbz	r4, 16a8 <sync_rtc_setup+0x64>
		return -ENOSYS;
	}

	return api->register_callback(channel->dev, channel->id, cb, user_data);
    1698:	2108      	movs	r1, #8
    169a:	4628      	mov	r0, r5
    169c:	4a18      	ldr	r2, [pc, #96]	; (1700 <sync_rtc_setup+0xbc>)
    169e:	47a0      	blx	r4
	if (err < 0) {
    16a0:	1e04      	subs	r4, r0, #0
    16a2:	dbdf      	blt.n	1664 <sync_rtc_setup+0x20>
static inline int z_impl_mbox_set_enabled(const struct mbox_channel *channel, bool enable)
{
	const struct mbox_driver_api *api =
		(const struct mbox_driver_api *)channel->dev->api;

	if (api->set_enabled == NULL) {
    16a4:	6933      	ldr	r3, [r6, #16]
    16a6:	b913      	cbnz	r3, 16ae <sync_rtc_setup+0x6a>
		return -ENOSYS;
    16a8:	f06f 0457 	mvn.w	r4, #87	; 0x57
	if (rv < 0) {
    16ac:	e7da      	b.n	1664 <sync_rtc_setup+0x20>
		return -ENOSYS;
	}

	return api->set_enabled(channel->dev, channel->id, enable);
    16ae:	2201      	movs	r2, #1
    16b0:	2108      	movs	r1, #8
    16b2:	4628      	mov	r0, r5
    16b4:	4798      	blx	r3
    16b6:	1e04      	subs	r4, r0, #0
    16b8:	dbd4      	blt.n	1664 <sync_rtc_setup+0x20>
	nrfx_gppi_channels_enable(BIT(channels.ch.ppi));
    16ba:	2301      	movs	r3, #1
    16bc:	793d      	ldrb	r5, [r7, #4]
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    16be:	4a11      	ldr	r2, [pc, #68]	; (1704 <sync_rtc_setup+0xc0>)
    16c0:	40ab      	lsls	r3, r5
    16c2:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	uint32_t task_addr = z_nrf_rtc_timer_capture_task_address_get(channels.ch.rtc);
    16c6:	7978      	ldrb	r0, [r7, #5]
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    16c8:	79fe      	ldrb	r6, [r7, #7]
    16ca:	f006 fb20 	bl	7d0e <z_nrf_rtc_timer_capture_task_address_get>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
    16ce:	4b0e      	ldr	r3, [pc, #56]	; (1708 <sync_rtc_setup+0xc4>)
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    16d0:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    16d4:	00b6      	lsls	r6, r6, #2
    16d6:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
    16da:	519d      	str	r5, [r3, r6]
	if (rv != 0) {
    16dc:	2c00      	cmp	r4, #0
    16de:	d1c1      	bne.n	1664 <sync_rtc_setup+0x20>
}
    16e0:	4620      	mov	r0, r4
    16e2:	370c      	adds	r7, #12
    16e4:	46bd      	mov	sp, r7
    16e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rv = -ENODEV;
    16e8:	f06f 0412 	mvn.w	r4, #18
    16ec:	e7ba      	b.n	1664 <sync_rtc_setup+0x20>
    16ee:	bf00      	nop
    16f0:	0bad0000 	.word	0x0bad0000
    16f4:	00008d72 	.word	0x00008d72
    16f8:	000088f4 	.word	0x000088f4
    16fc:	00008620 	.word	0x00008620
    1700:	00001751 	.word	0x00001751
    1704:	50017000 	.word	0x50017000
    1708:	5002a180 	.word	0x5002a180

0000170c <rtc_cb>:
{
    170c:	b538      	push	{r3, r4, r5, lr}
    170e:	9c04      	ldr	r4, [sp, #16]
	uint32_t evt_addr = z_nrf_rtc_timer_compare_evt_address_get(channels.ch.rtc);
    1710:	f3c4 2507 	ubfx	r5, r4, #8, #8
    1714:	4628      	mov	r0, r5
    1716:	f002 fe33 	bl	4380 <z_nrf_rtc_timer_compare_evt_address_get>

__STATIC_INLINE void nrfx_gppi_event_endpoint_clear(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    (void)channel;
    *((volatile uint32_t *)(eep + 0x80uL)) = 0;
    171a:	2100      	movs	r1, #0
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) = 0;
    171c:	4b0a      	ldr	r3, [pc, #40]	; (1748 <rtc_cb+0x3c>)
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    171e:	0ba2      	lsrs	r2, r4, #14
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) = 0;
    1720:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    1724:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
    1728:	5099      	str	r1, [r3, r2]
	nrfx_gppi_channels_disable(BIT(channels.ch.ppi));
    172a:	2301      	movs	r3, #1
    172c:	b2e4      	uxtb	r4, r4
}

NRF_STATIC_INLINE void nrf_dppi_channels_disable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
    172e:	4a07      	ldr	r2, [pc, #28]	; (174c <rtc_cb+0x40>)
    1730:	40a3      	lsls	r3, r4
	z_nrf_rtc_timer_chan_free(channels.ch.rtc);
    1732:	4628      	mov	r0, r5
    1734:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    1738:	f002 ffda 	bl	46f0 <z_nrf_rtc_timer_chan_free>
	err = nrfx_dppi_channel_free(channels.ch.ppi);
    173c:	4620      	mov	r0, r4
}
    173e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	err = nrfx_dppi_channel_free(channels.ch.ppi);
    1742:	f003 bb27 	b.w	4d94 <nrfx_dppi_channel_free>
    1746:	bf00      	nop
    1748:	5002a080 	.word	0x5002a080
    174c:	50017000 	.word	0x50017000

00001750 <mbox_callback>:
{
    1750:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1752:	4614      	mov	r4, r2
	if (api->set_enabled == NULL) {
    1754:	6883      	ldr	r3, [r0, #8]
    1756:	691b      	ldr	r3, [r3, #16]
    1758:	b10b      	cbz	r3, 175e <mbox_callback+0xe>
	return api->set_enabled(channel->dev, channel->id, enable);
    175a:	2200      	movs	r2, #0
    175c:	4798      	blx	r3
	cc = z_nrf_rtc_timer_compare_read(channels.ch.rtc);
    175e:	f3c4 2607 	ubfx	r6, r4, #8, #8
    1762:	4630      	mov	r0, r6
    1764:	f002 fe14 	bl	4390 <z_nrf_rtc_timer_compare_read>
    1768:	4605      	mov	r5, r0
	uint32_t task_addr = z_nrf_rtc_timer_capture_task_address_get(channels.ch.rtc);
    176a:	4630      	mov	r0, r6
    176c:	f006 facf 	bl	7d0e <z_nrf_rtc_timer_capture_task_address_get>

__STATIC_INLINE void nrfx_gppi_task_endpoint_clear(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    (void)channel;
    *((volatile uint32_t *)(tep + 0x80uL)) = 0;
    1770:	2700      	movs	r7, #0
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) = 0;
    1772:	4b10      	ldr	r3, [pc, #64]	; (17b4 <mbox_callback+0x64>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    1774:	0e22      	lsrs	r2, r4, #24
    1776:	0092      	lsls	r2, r2, #2
    1778:	f8c0 7080 	str.w	r7, [r0, #128]	; 0x80
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) = 0;
    177c:	509f      	str	r7, [r3, r2]
	uint32_t evt_addr = z_nrf_rtc_timer_compare_evt_address_get(channels.ch.rtc);
    177e:	4630      	mov	r0, r6
    1780:	f002 fdfe 	bl	4380 <z_nrf_rtc_timer_compare_evt_address_get>
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    1784:	0ba2      	lsrs	r2, r4, #14
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    1786:	4b0c      	ldr	r3, [pc, #48]	; (17b8 <mbox_callback+0x68>)
    1788:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    178c:	4413      	add	r3, r2
            ((uint32_t)channel | IPC_SUBSCRIBE_SEND_EN_Msk);
    178e:	b2e2      	uxtb	r2, r4
    1790:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    1794:	601a      	str	r2, [r3, #0]
		z_nrf_rtc_timer_set(channels.ch.rtc, cc + cc + RTC_SYNC_ARBITRARY_DELAY,
    1796:	4b09      	ldr	r3, [pc, #36]	; (17bc <mbox_callback+0x6c>)
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    1798:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    179c:	f105 0232 	add.w	r2, r5, #50	; 0x32
    17a0:	9300      	str	r3, [sp, #0]
    17a2:	4630      	mov	r0, r6
    17a4:	463b      	mov	r3, r7
    17a6:	9401      	str	r4, [sp, #4]
    17a8:	0052      	lsls	r2, r2, #1
    17aa:	f006 fab9 	bl	7d20 <z_nrf_rtc_timer_set>
}
    17ae:	b003      	add	sp, #12
    17b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    17b2:	bf00      	nop
    17b4:	5002a180 	.word	0x5002a180
    17b8:	5002a080 	.word	0x5002a080
    17bc:	0000170d 	.word	0x0000170d

000017c0 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    17c0:	f003 b986 	b.w	4ad0 <SystemInit>

000017c4 <activate_foreach_backend>:
		z_log_runtime_filters_init();
	}
}

static uint32_t activate_foreach_backend(uint32_t mask)
{
    17c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    17c8:	4604      	mov	r4, r0
	uint32_t mask_cpy = mask;

	while (mask_cpy) {
    17ca:	4607      	mov	r7, r0
		uint32_t i = __builtin_ctz(mask_cpy);
		const struct log_backend *backend = log_backend_get(i);

		mask_cpy &= ~BIT(i);
    17cc:	f04f 0901 	mov.w	r9, #1
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    17d0:	f8df 8050 	ldr.w	r8, [pc, #80]	; 1824 <activate_foreach_backend+0x60>
	while (mask_cpy) {
    17d4:	b914      	cbnz	r4, 17dc <activate_foreach_backend+0x18>
					   CONFIG_LOG_MAX_LEVEL);
		}
	}

	return mask;
}
    17d6:	4638      	mov	r0, r7
    17d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
    17dc:	fa94 f5a4 	rbit	r5, r4
    17e0:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
    17e4:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    17e8:	012e      	lsls	r6, r5, #4
    17ea:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
    17ee:	ea6f 0a03 	mvn.w	sl, r3
    17f2:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    17f6:	7b2b      	ldrb	r3, [r5, #12]
    17f8:	2b00      	cmp	r3, #0
    17fa:	d0eb      	beq.n	17d4 <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
    17fc:	f858 3006 	ldr.w	r3, [r8, r6]
    1800:	691b      	ldr	r3, [r3, #16]
    1802:	b94b      	cbnz	r3, 1818 <activate_foreach_backend+0x54>
					   backend->cb->ctx,
    1804:	4446      	add	r6, r8
			log_backend_enable(backend,
    1806:	6873      	ldr	r3, [r6, #4]
    1808:	2204      	movs	r2, #4
    180a:	4628      	mov	r0, r5
    180c:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
    180e:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
    1812:	f000 fa2b 	bl	1c6c <log_backend_enable>
    1816:	e7dd      	b.n	17d4 <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
    1818:	4628      	mov	r0, r5
    181a:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    181c:	2800      	cmp	r0, #0
    181e:	d1d9      	bne.n	17d4 <activate_foreach_backend+0x10>
    1820:	e7f0      	b.n	1804 <activate_foreach_backend+0x40>
    1822:	bf00      	nop
    1824:	00008904 	.word	0x00008904

00001828 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    1828:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    182a:	2200      	movs	r2, #0
{
    182c:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    182e:	490f      	ldr	r1, [pc, #60]	; (186c <enable_logger+0x44>)
    1830:	480f      	ldr	r0, [pc, #60]	; (1870 <enable_logger+0x48>)
    1832:	f006 fe53 	bl	84dc <k_timer_init>
		};
		return (k_tid_t) arch_syscall_invoke6(parm0.x, parm1.x, parm2.x, parm3.x, parm4.x, (uintptr_t) &more, K_SYSCALL_K_THREAD_CREATE);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    1836:	2200      	movs	r2, #0
    1838:	2300      	movs	r3, #0
    183a:	2400      	movs	r4, #0
    183c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    1840:	230e      	movs	r3, #14
    1842:	4d0c      	ldr	r5, [pc, #48]	; (1874 <enable_logger+0x4c>)
    1844:	e9cd 3403 	strd	r3, r4, [sp, #12]
    1848:	f44f 7240 	mov.w	r2, #768	; 0x300
    184c:	4628      	mov	r0, r5
    184e:	e9cd 4401 	strd	r4, r4, [sp, #4]
    1852:	4b09      	ldr	r3, [pc, #36]	; (1878 <enable_logger+0x50>)
    1854:	4909      	ldr	r1, [pc, #36]	; (187c <enable_logger+0x54>)
    1856:	9400      	str	r4, [sp, #0]
    1858:	f004 fa16 	bl	5c88 <z_impl_k_thread_create>
		union { uintptr_t x; const char * val; } parm1 = { .val = str };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_THREAD_NAME_SET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_name_set(thread, str);
    185c:	4908      	ldr	r1, [pc, #32]	; (1880 <enable_logger+0x58>)
    185e:	4628      	mov	r0, r5
    1860:	f006 fcf5 	bl	824e <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
    1864:	4620      	mov	r0, r4
    1866:	b009      	add	sp, #36	; 0x24
    1868:	bd30      	pop	{r4, r5, pc}
    186a:	bf00      	nop
    186c:	00001885 	.word	0x00001885
    1870:	200005d8 	.word	0x200005d8
    1874:	20000610 	.word	0x20000610
    1878:	00001b0d 	.word	0x00001b0d
    187c:	20020598 	.word	0x20020598
    1880:	00008da3 	.word	0x00008da3

00001884 <log_process_thread_timer_expiry_fn>:
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    1884:	4801      	ldr	r0, [pc, #4]	; (188c <log_process_thread_timer_expiry_fn+0x8>)
    1886:	f004 bc01 	b.w	608c <z_impl_k_sem_give>
    188a:	bf00      	nop
    188c:	200001c4 	.word	0x200001c4

00001890 <z_log_init>:
{
    1890:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1894:	4681      	mov	r9, r0
    1896:	4688      	mov	r8, r1
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    1898:	4b22      	ldr	r3, [pc, #136]	; (1924 <z_log_init+0x94>)
    189a:	e8d3 4fef 	ldaex	r4, [r3]
    189e:	1c62      	adds	r2, r4, #1
    18a0:	e8c3 2fe1 	stlex	r1, r2, [r3]
    18a4:	2900      	cmp	r1, #0
    18a6:	d1f8      	bne.n	189a <z_log_init+0xa>
	if (atomic_inc(&initialized) != 0) {
    18a8:	b11c      	cbz	r4, 18b2 <z_log_init+0x22>
		return 0;
    18aa:	2400      	movs	r4, #0
}
    18ac:	4620      	mov	r0, r4
    18ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (i = 0; i < log_backend_count_get(); i++) {
    18b2:	4627      	mov	r7, r4
				mask |= BIT(i);
    18b4:	f04f 0a01 	mov.w	sl, #1
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    18b8:	4d1b      	ldr	r5, [pc, #108]	; (1928 <z_log_init+0x98>)
    18ba:	4e1c      	ldr	r6, [pc, #112]	; (192c <z_log_init+0x9c>)
    18bc:	1b76      	subs	r6, r6, r5
    18be:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    18c0:	42b7      	cmp	r7, r6
    18c2:	db11      	blt.n	18e8 <z_log_init+0x58>
	if (blocking) {
    18c4:	f1b9 0f00 	cmp.w	r9, #0
    18c8:	d0f0      	beq.n	18ac <z_log_init+0x1c>
		while (mask) {
    18ca:	2c00      	cmp	r4, #0
    18cc:	d0ed      	beq.n	18aa <z_log_init+0x1a>
			mask = activate_foreach_backend(mask);
    18ce:	4620      	mov	r0, r4
    18d0:	f7ff ff78 	bl	17c4 <activate_foreach_backend>
    18d4:	4604      	mov	r4, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    18d6:	f1b8 0f00 	cmp.w	r8, #0
    18da:	d0f6      	beq.n	18ca <z_log_init+0x3a>
	return z_impl_k_sleep(timeout);
    18dc:	2100      	movs	r1, #0
    18de:	f44f 70a4 	mov.w	r0, #328	; 0x148
    18e2:	f004 fef3 	bl	66cc <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    18e6:	e7f0      	b.n	18ca <z_log_init+0x3a>
		if (backend->autostart) {
    18e8:	7b2b      	ldrb	r3, [r5, #12]
    18ea:	b17b      	cbz	r3, 190c <z_log_init+0x7c>
	if (backend->api->init) {
    18ec:	f8d5 b000 	ldr.w	fp, [r5]
    18f0:	f8db 300c 	ldr.w	r3, [fp, #12]
    18f4:	b10b      	cbz	r3, 18fa <z_log_init+0x6a>
		backend->api->init(backend);
    18f6:	4628      	mov	r0, r5
    18f8:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
    18fa:	f8db 3010 	ldr.w	r3, [fp, #16]
    18fe:	b943      	cbnz	r3, 1912 <z_log_init+0x82>
				log_backend_enable(backend,
    1900:	686b      	ldr	r3, [r5, #4]
    1902:	2204      	movs	r2, #4
    1904:	4628      	mov	r0, r5
    1906:	6819      	ldr	r1, [r3, #0]
    1908:	f000 f9b0 	bl	1c6c <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    190c:	3701      	adds	r7, #1
    190e:	3510      	adds	r5, #16
    1910:	e7d6      	b.n	18c0 <z_log_init+0x30>
		return backend->api->is_ready(backend);
    1912:	4628      	mov	r0, r5
    1914:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
    1916:	2800      	cmp	r0, #0
    1918:	d0f2      	beq.n	1900 <z_log_init+0x70>
				mask |= BIT(i);
    191a:	fa0a f307 	lsl.w	r3, sl, r7
    191e:	431c      	orrs	r4, r3
    1920:	e7f4      	b.n	190c <z_log_init+0x7c>
    1922:	bf00      	nop
    1924:	2001fbd4 	.word	0x2001fbd4
    1928:	00008904 	.word	0x00008904
    192c:	00008914 	.word	0x00008914

00001930 <log_format_func_t_get>:
}
    1930:	4b01      	ldr	r3, [pc, #4]	; (1938 <log_format_func_t_get+0x8>)
    1932:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    1936:	4770      	bx	lr
    1938:	00008928 	.word	0x00008928

0000193c <z_log_notify_backend_enabled>:
{
    193c:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    193e:	4c04      	ldr	r4, [pc, #16]	; (1950 <z_log_notify_backend_enabled+0x14>)
    1940:	7823      	ldrb	r3, [r4, #0]
    1942:	b913      	cbnz	r3, 194a <z_log_notify_backend_enabled+0xe>
	z_impl_k_sem_give(sem);
    1944:	4803      	ldr	r0, [pc, #12]	; (1954 <z_log_notify_backend_enabled+0x18>)
    1946:	f004 fba1 	bl	608c <z_impl_k_sem_give>
	backend_attached = true;
    194a:	2301      	movs	r3, #1
    194c:	7023      	strb	r3, [r4, #0]
}
    194e:	bd10      	pop	{r4, pc}
    1950:	2002058c 	.word	0x2002058c
    1954:	200001c4 	.word	0x200001c4

00001958 <z_log_dropped>:
    1958:	4b08      	ldr	r3, [pc, #32]	; (197c <z_log_dropped+0x24>)
    195a:	e8d3 2fef 	ldaex	r2, [r3]
    195e:	3201      	adds	r2, #1
    1960:	e8c3 2fe1 	stlex	r1, r2, [r3]
    1964:	2900      	cmp	r1, #0
    1966:	d1f8      	bne.n	195a <z_log_dropped+0x2>
	if (buffered) {
    1968:	b138      	cbz	r0, 197a <z_log_dropped+0x22>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    196a:	4b05      	ldr	r3, [pc, #20]	; (1980 <z_log_dropped+0x28>)
    196c:	e8d3 2fef 	ldaex	r2, [r3]
    1970:	3a01      	subs	r2, #1
    1972:	e8c3 2fe1 	stlex	r1, r2, [r3]
    1976:	2900      	cmp	r1, #0
    1978:	d1f8      	bne.n	196c <z_log_dropped+0x14>
}
    197a:	4770      	bx	lr
    197c:	2001fbd0 	.word	0x2001fbd0
    1980:	2001fbcc 	.word	0x2001fbcc

00001984 <z_log_dropped_read_and_clear>:
}
    1984:	2000      	movs	r0, #0
    1986:	4602      	mov	r2, r0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1988:	4b03      	ldr	r3, [pc, #12]	; (1998 <z_log_dropped_read_and_clear+0x14>)
    198a:	e8d3 0fef 	ldaex	r0, [r3]
    198e:	e8c3 2fe1 	stlex	r1, r2, [r3]
    1992:	2900      	cmp	r1, #0
    1994:	d1f9      	bne.n	198a <z_log_dropped_read_and_clear+0x6>
    1996:	4770      	bx	lr
    1998:	2001fbd0 	.word	0x2001fbd0

0000199c <dropped_notify>:
{
    199c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    199e:	f7ff fff1 	bl	1984 <z_log_dropped_read_and_clear>
	for (int i = 0; i < log_backend_count_get(); i++) {
    19a2:	2600      	movs	r6, #0
	uint32_t dropped = z_log_dropped_read_and_clear();
    19a4:	4607      	mov	r7, r0
	return __log_backends_end - __log_backends_start;
    19a6:	4c09      	ldr	r4, [pc, #36]	; (19cc <dropped_notify+0x30>)
    19a8:	4d09      	ldr	r5, [pc, #36]	; (19d0 <dropped_notify+0x34>)
    19aa:	1b2d      	subs	r5, r5, r4
    19ac:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    19ae:	42ae      	cmp	r6, r5
    19b0:	db00      	blt.n	19b4 <dropped_notify+0x18>
}
    19b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    19b4:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    19b6:	795b      	ldrb	r3, [r3, #5]
    19b8:	b12b      	cbz	r3, 19c6 <dropped_notify+0x2a>
	if (backend->api->dropped != NULL) {
    19ba:	6823      	ldr	r3, [r4, #0]
    19bc:	685b      	ldr	r3, [r3, #4]
    19be:	b113      	cbz	r3, 19c6 <dropped_notify+0x2a>
		backend->api->dropped(backend, cnt);
    19c0:	4639      	mov	r1, r7
    19c2:	4620      	mov	r0, r4
    19c4:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    19c6:	3601      	adds	r6, #1
    19c8:	3410      	adds	r4, #16
    19ca:	e7f0      	b.n	19ae <dropped_notify+0x12>
    19cc:	00008904 	.word	0x00008904
    19d0:	00008914 	.word	0x00008914

000019d4 <z_log_msg_init>:
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    19d4:	4901      	ldr	r1, [pc, #4]	; (19dc <z_log_msg_init+0x8>)
    19d6:	4802      	ldr	r0, [pc, #8]	; (19e0 <z_log_msg_init+0xc>)
    19d8:	f005 bde3 	b.w	75a2 <mpsc_pbuf_init>
    19dc:	00008934 	.word	0x00008934
    19e0:	2001fbd8 	.word	0x2001fbd8

000019e4 <log_core_init>:
{
    19e4:	b508      	push	{r3, lr}
	panic_mode = false;
    19e6:	2300      	movs	r3, #0
    19e8:	4a07      	ldr	r2, [pc, #28]	; (1a08 <log_core_init+0x24>)
		log_output_timestamp_freq_set(freq);
    19ea:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	panic_mode = false;
    19ee:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    19f0:	4a06      	ldr	r2, [pc, #24]	; (1a0c <log_core_init+0x28>)
    19f2:	6013      	str	r3, [r2, #0]
	timestamp_func = timestamp_getter;
    19f4:	4b06      	ldr	r3, [pc, #24]	; (1a10 <log_core_init+0x2c>)
    19f6:	4a07      	ldr	r2, [pc, #28]	; (1a14 <log_core_init+0x30>)
    19f8:	601a      	str	r2, [r3, #0]
		log_output_timestamp_freq_set(freq);
    19fa:	f000 fb6d 	bl	20d8 <log_output_timestamp_freq_set>
}
    19fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
    1a02:	f7ff bfe7 	b.w	19d4 <z_log_msg_init>
    1a06:	bf00      	nop
    1a08:	2002058d 	.word	0x2002058d
    1a0c:	2001fbd0 	.word	0x2001fbd0
    1a10:	20000004 	.word	0x20000004
    1a14:	00007861 	.word	0x00007861

00001a18 <z_log_msg_alloc>:
{
    1a18:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(&log_buffer, wlen,
    1a1a:	2200      	movs	r2, #0
    1a1c:	2300      	movs	r3, #0
    1a1e:	4801      	ldr	r0, [pc, #4]	; (1a24 <z_log_msg_alloc+0xc>)
    1a20:	f005 bde0 	b.w	75e4 <mpsc_pbuf_alloc>
    1a24:	2001fbd8 	.word	0x2001fbd8

00001a28 <z_log_msg_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
    1a28:	4801      	ldr	r0, [pc, #4]	; (1a30 <z_log_msg_claim+0x8>)
    1a2a:	f005 be74 	b.w	7716 <mpsc_pbuf_claim>
    1a2e:	bf00      	nop
    1a30:	2001fbd8 	.word	0x2001fbd8

00001a34 <z_log_msg_free>:
{
    1a34:	4601      	mov	r1, r0
	mpsc_pbuf_free(&log_buffer, (union mpsc_pbuf_generic *)msg);
    1a36:	4801      	ldr	r0, [pc, #4]	; (1a3c <z_log_msg_free+0x8>)
    1a38:	f005 beb9 	b.w	77ae <mpsc_pbuf_free>
    1a3c:	2001fbd8 	.word	0x2001fbd8

00001a40 <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(&log_buffer);
    1a40:	4801      	ldr	r0, [pc, #4]	; (1a48 <z_log_msg_pending+0x8>)
    1a42:	f005 bee8 	b.w	7816 <mpsc_pbuf_is_pending>
    1a46:	bf00      	nop
    1a48:	2001fbd8 	.word	0x2001fbd8

00001a4c <z_impl_log_process>:
{
    1a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!backend_attached) {
    1a4e:	4b17      	ldr	r3, [pc, #92]	; (1aac <z_impl_log_process+0x60>)
    1a50:	7818      	ldrb	r0, [r3, #0]
    1a52:	b350      	cbz	r0, 1aaa <z_impl_log_process+0x5e>
	msg = z_log_msg_claim();
    1a54:	f7ff ffe8 	bl	1a28 <z_log_msg_claim>
	if (msg) {
    1a58:	4605      	mov	r5, r0
    1a5a:	b188      	cbz	r0, 1a80 <z_impl_log_process+0x34>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    1a5c:	4b14      	ldr	r3, [pc, #80]	; (1ab0 <z_impl_log_process+0x64>)
    1a5e:	e8d3 2fef 	ldaex	r2, [r3]
    1a62:	3a01      	subs	r2, #1
    1a64:	e8c3 2fe1 	stlex	r1, r2, [r3]
    1a68:	2900      	cmp	r1, #0
    1a6a:	d1f8      	bne.n	1a5e <z_impl_log_process+0x12>
	for (int i = 0; i < log_backend_count_get(); i++) {
    1a6c:	2700      	movs	r7, #0
	return __log_backends_end - __log_backends_start;
    1a6e:	4c11      	ldr	r4, [pc, #68]	; (1ab4 <z_impl_log_process+0x68>)
    1a70:	4e11      	ldr	r6, [pc, #68]	; (1ab8 <z_impl_log_process+0x6c>)
    1a72:	1b36      	subs	r6, r6, r4
    1a74:	1136      	asrs	r6, r6, #4
    1a76:	42b7      	cmp	r7, r6
    1a78:	db0c      	blt.n	1a94 <z_impl_log_process+0x48>
		z_log_msg_free(msg);
    1a7a:	4628      	mov	r0, r5
    1a7c:	f7ff ffda 	bl	1a34 <z_log_msg_free>
	return dropped_cnt > 0;
    1a80:	4b0e      	ldr	r3, [pc, #56]	; (1abc <z_impl_log_process+0x70>)
	if (z_log_dropped_pending()) {
    1a82:	681b      	ldr	r3, [r3, #0]
    1a84:	2b00      	cmp	r3, #0
    1a86:	dd01      	ble.n	1a8c <z_impl_log_process+0x40>
		dropped_notify();
    1a88:	f7ff ff88 	bl	199c <dropped_notify>
}
    1a8c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return z_log_msg_pending();
    1a90:	f7ff bfd6 	b.w	1a40 <z_log_msg_pending>
	return backend->cb->active;
    1a94:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
    1a96:	795b      	ldrb	r3, [r3, #5]
    1a98:	b123      	cbz	r3, 1aa4 <z_impl_log_process+0x58>
	backend->api->process(backend, msg);
    1a9a:	6823      	ldr	r3, [r4, #0]
    1a9c:	4629      	mov	r1, r5
    1a9e:	4620      	mov	r0, r4
    1aa0:	681b      	ldr	r3, [r3, #0]
    1aa2:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    1aa4:	3701      	adds	r7, #1
    1aa6:	3410      	adds	r4, #16
    1aa8:	e7e5      	b.n	1a76 <z_impl_log_process+0x2a>
}
    1aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1aac:	2002058c 	.word	0x2002058c
    1ab0:	2001fbcc 	.word	0x2001fbcc
    1ab4:	00008904 	.word	0x00008904
    1ab8:	00008914 	.word	0x00008914
    1abc:	2001fbd0 	.word	0x2001fbd0

00001ac0 <z_impl_log_panic>:
{
    1ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    1ac2:	4f0f      	ldr	r7, [pc, #60]	; (1b00 <z_impl_log_panic+0x40>)
    1ac4:	783d      	ldrb	r5, [r7, #0]
    1ac6:	b97d      	cbnz	r5, 1ae8 <z_impl_log_panic+0x28>
	(void)z_log_init(true, false);
    1ac8:	4629      	mov	r1, r5
    1aca:	2001      	movs	r0, #1
    1acc:	f7ff fee0 	bl	1890 <z_log_init>
	return __log_backends_end - __log_backends_start;
    1ad0:	4c0c      	ldr	r4, [pc, #48]	; (1b04 <z_impl_log_panic+0x44>)
    1ad2:	4e0d      	ldr	r6, [pc, #52]	; (1b08 <z_impl_log_panic+0x48>)
    1ad4:	1b36      	subs	r6, r6, r4
    1ad6:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    1ad8:	42b5      	cmp	r5, r6
    1ada:	db06      	blt.n	1aea <z_impl_log_panic+0x2a>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
    1adc:	f7ff ffb6 	bl	1a4c <z_impl_log_process>
		while (log_process() == true) {
    1ae0:	2800      	cmp	r0, #0
    1ae2:	d1fb      	bne.n	1adc <z_impl_log_panic+0x1c>
	panic_mode = true;
    1ae4:	2301      	movs	r3, #1
    1ae6:	703b      	strb	r3, [r7, #0]
}
    1ae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    1aea:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    1aec:	795b      	ldrb	r3, [r3, #5]
    1aee:	b11b      	cbz	r3, 1af8 <z_impl_log_panic+0x38>
	backend->api->panic(backend);
    1af0:	6823      	ldr	r3, [r4, #0]
    1af2:	4620      	mov	r0, r4
    1af4:	689b      	ldr	r3, [r3, #8]
    1af6:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    1af8:	3501      	adds	r5, #1
    1afa:	3410      	adds	r4, #16
    1afc:	e7ec      	b.n	1ad8 <z_impl_log_panic+0x18>
    1afe:	bf00      	nop
    1b00:	2002058d 	.word	0x2002058d
    1b04:	00008904 	.word	0x00008904
    1b08:	00008914 	.word	0x00008914

00001b0c <log_process_thread_func>:
	uint32_t activate_mask = z_log_init(false, false);
    1b0c:	2100      	movs	r1, #0
{
    1b0e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t activate_mask = z_log_init(false, false);
    1b12:	4608      	mov	r0, r1
    1b14:	f7ff febc 	bl	1890 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    1b18:	4604      	mov	r4, r0
    1b1a:	b380      	cbz	r0, 1b7e <log_process_thread_func+0x72>
    1b1c:	f240 6867 	movw	r8, #1639	; 0x667
    1b20:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
    1b24:	f004 fdec 	bl	6700 <z_impl_z_current_get>
	proc_tid = process_tid;
    1b28:	4b1d      	ldr	r3, [pc, #116]	; (1ba0 <log_process_thread_func+0x94>)
    1b2a:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    1b2c:	b130      	cbz	r0, 1b3c <log_process_thread_func+0x30>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    1b2e:	4b1d      	ldr	r3, [pc, #116]	; (1ba4 <log_process_thread_func+0x98>)
	    process_tid &&
    1b30:	681b      	ldr	r3, [r3, #0]
    1b32:	2b09      	cmp	r3, #9
    1b34:	dd02      	ble.n	1b3c <log_process_thread_func+0x30>
	z_impl_k_sem_give(sem);
    1b36:	481c      	ldr	r0, [pc, #112]	; (1ba8 <log_process_thread_func+0x9c>)
    1b38:	f004 faa8 	bl	608c <z_impl_k_sem_give>
	return __log_backends_end - __log_backends_start;
    1b3c:	2700      	movs	r7, #0
    1b3e:	4e1b      	ldr	r6, [pc, #108]	; (1bac <log_process_thread_func+0xa0>)
    1b40:	4b1b      	ldr	r3, [pc, #108]	; (1bb0 <log_process_thread_func+0xa4>)
	return z_impl_k_sem_take(sem, timeout);
    1b42:	f8df b064 	ldr.w	fp, [pc, #100]	; 1ba8 <log_process_thread_func+0x9c>
    1b46:	1af6      	subs	r6, r6, r3
    1b48:	1136      	asrs	r6, r6, #4
		if (activate_mask) {
    1b4a:	b144      	cbz	r4, 1b5e <log_process_thread_func+0x52>
			activate_mask = activate_foreach_backend(activate_mask);
    1b4c:	4620      	mov	r0, r4
    1b4e:	f7ff fe39 	bl	17c4 <activate_foreach_backend>
			if (!activate_mask) {
    1b52:	4604      	mov	r4, r0
    1b54:	b918      	cbnz	r0, 1b5e <log_process_thread_func+0x52>
				timeout = K_FOREVER;
    1b56:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    1b5a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    1b5e:	f7ff ff75 	bl	1a4c <z_impl_log_process>
		if (log_process() == false) {
    1b62:	4605      	mov	r5, r0
    1b64:	b948      	cbnz	r0, 1b7a <log_process_thread_func+0x6e>
			if (processed_any) {
    1b66:	b11f      	cbz	r7, 1b70 <log_process_thread_func+0x64>
	for (int i = 0; i < log_backend_count_get(); i++) {
    1b68:	4682      	mov	sl, r0
    1b6a:	4f11      	ldr	r7, [pc, #68]	; (1bb0 <log_process_thread_func+0xa4>)
    1b6c:	45b2      	cmp	sl, r6
    1b6e:	db0b      	blt.n	1b88 <log_process_thread_func+0x7c>
    1b70:	4642      	mov	r2, r8
    1b72:	464b      	mov	r3, r9
    1b74:	4658      	mov	r0, fp
    1b76:	f004 faa9 	bl	60cc <z_impl_k_sem_take>
    1b7a:	462f      	mov	r7, r5
    1b7c:	e7e5      	b.n	1b4a <log_process_thread_func+0x3e>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    1b7e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    1b82:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    1b86:	e7cd      	b.n	1b24 <log_process_thread_func+0x18>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
    1b88:	683b      	ldr	r3, [r7, #0]
    1b8a:	699b      	ldr	r3, [r3, #24]
    1b8c:	b11b      	cbz	r3, 1b96 <log_process_thread_func+0x8a>
		backend->api->notify(backend, event, arg);
    1b8e:	2200      	movs	r2, #0
    1b90:	4638      	mov	r0, r7
    1b92:	4611      	mov	r1, r2
    1b94:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    1b96:	f10a 0a01 	add.w	sl, sl, #1
    1b9a:	3710      	adds	r7, #16
    1b9c:	e7e6      	b.n	1b6c <log_process_thread_func+0x60>
    1b9e:	bf00      	nop
    1ba0:	2001fc10 	.word	0x2001fc10
    1ba4:	2001fbcc 	.word	0x2001fbcc
    1ba8:	200001c4 	.word	0x200001c4
    1bac:	00008914 	.word	0x00008914
    1bb0:	00008904 	.word	0x00008904

00001bb4 <z_log_msg_commit>:
	msg->hdr.timestamp = timestamp_func();
    1bb4:	4b1f      	ldr	r3, [pc, #124]	; (1c34 <z_log_msg_commit+0x80>)
{
    1bb6:	b513      	push	{r0, r1, r4, lr}
	msg->hdr.timestamp = timestamp_func();
    1bb8:	681b      	ldr	r3, [r3, #0]
{
    1bba:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    1bbc:	4798      	blx	r3
	mpsc_pbuf_commit(&log_buffer, &m->buf);
    1bbe:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
    1bc0:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(&log_buffer, &m->buf);
    1bc2:	481d      	ldr	r0, [pc, #116]	; (1c38 <z_log_msg_commit+0x84>)
    1bc4:	f005 fd87 	bl	76d6 <mpsc_pbuf_commit>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    1bc8:	4b1c      	ldr	r3, [pc, #112]	; (1c3c <z_log_msg_commit+0x88>)
    1bca:	e8d3 2fef 	ldaex	r2, [r3]
    1bce:	1c51      	adds	r1, r2, #1
    1bd0:	e8c3 1fe0 	stlex	r0, r1, [r3]
    1bd4:	2800      	cmp	r0, #0
    1bd6:	d1f8      	bne.n	1bca <z_log_msg_commit+0x16>
	if (panic_mode) {
    1bd8:	4b19      	ldr	r3, [pc, #100]	; (1c40 <z_log_msg_commit+0x8c>)
    1bda:	781b      	ldrb	r3, [r3, #0]
    1bdc:	b17b      	cbz	r3, 1bfe <z_log_msg_commit+0x4a>
	__asm__ volatile(
    1bde:	f04f 0320 	mov.w	r3, #32
    1be2:	f3ef 8411 	mrs	r4, BASEPRI
    1be6:	f383 8812 	msr	BASEPRI_MAX, r3
    1bea:	f3bf 8f6f 	isb	sy
    1bee:	f7ff ff2d 	bl	1a4c <z_impl_log_process>
	__asm__ volatile(
    1bf2:	f384 8811 	msr	BASEPRI, r4
    1bf6:	f3bf 8f6f 	isb	sy
}
    1bfa:	b002      	add	sp, #8
    1bfc:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
    1bfe:	4b11      	ldr	r3, [pc, #68]	; (1c44 <z_log_msg_commit+0x90>)
    1c00:	681b      	ldr	r3, [r3, #0]
    1c02:	2b00      	cmp	r3, #0
    1c04:	d0f9      	beq.n	1bfa <z_log_msg_commit+0x46>
		if (cnt == 0) {
    1c06:	b952      	cbnz	r2, 1c1e <z_log_msg_commit+0x6a>
	z_impl_k_timer_start(timer, duration, period);
    1c08:	2200      	movs	r2, #0
    1c0a:	2300      	movs	r3, #0
    1c0c:	480e      	ldr	r0, [pc, #56]	; (1c48 <z_log_msg_commit+0x94>)
    1c0e:	e9cd 2300 	strd	r2, r3, [sp]
    1c12:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    1c16:	2300      	movs	r3, #0
    1c18:	f004 ff96 	bl	6b48 <z_impl_k_timer_start>
    1c1c:	e7ed      	b.n	1bfa <z_log_msg_commit+0x46>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    1c1e:	2a0a      	cmp	r2, #10
    1c20:	d1eb      	bne.n	1bfa <z_log_msg_commit+0x46>
	z_impl_k_timer_stop(timer);
    1c22:	4809      	ldr	r0, [pc, #36]	; (1c48 <z_log_msg_commit+0x94>)
    1c24:	f006 fc66 	bl	84f4 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    1c28:	4808      	ldr	r0, [pc, #32]	; (1c4c <z_log_msg_commit+0x98>)
}
    1c2a:	b002      	add	sp, #8
    1c2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1c30:	f004 ba2c 	b.w	608c <z_impl_k_sem_give>
    1c34:	20000004 	.word	0x20000004
    1c38:	2001fbd8 	.word	0x2001fbd8
    1c3c:	2001fbcc 	.word	0x2001fbcc
    1c40:	2002058d 	.word	0x2002058d
    1c44:	2001fc10 	.word	0x2001fc10
    1c48:	200005d8 	.word	0x200005d8
    1c4c:	200001c4 	.word	0x200001c4

00001c50 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    1c50:	4a04      	ldr	r2, [pc, #16]	; (1c64 <log_source_name_get+0x14>)
    1c52:	4b05      	ldr	r3, [pc, #20]	; (1c68 <log_source_name_get+0x18>)
    1c54:	1a9b      	subs	r3, r3, r2
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    1c56:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    1c5a:	bf34      	ite	cc
    1c5c:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    1c60:	2000      	movcs	r0, #0
}
    1c62:	4770      	bx	lr
    1c64:	0000889c 	.word	0x0000889c
    1c68:	00008904 	.word	0x00008904

00001c6c <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    1c6c:	4a05      	ldr	r2, [pc, #20]	; (1c84 <log_backend_enable+0x18>)
	backend->cb->id = id;
    1c6e:	6843      	ldr	r3, [r0, #4]
    1c70:	1a80      	subs	r0, r0, r2
	backend->cb->active = true;
    1c72:	2201      	movs	r2, #1
    1c74:	1100      	asrs	r0, r0, #4
    1c76:	3001      	adds	r0, #1

	log_backend_id_set(backend, id);
    1c78:	7118      	strb	r0, [r3, #4]
	backend->cb->ctx = ctx;
    1c7a:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    1c7c:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
    1c7e:	f7ff be5d 	b.w	193c <z_log_notify_backend_enabled>
    1c82:	bf00      	nop
    1c84:	00008904 	.word	0x00008904

00001c88 <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
    1c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    1c8c:	f3c1 45cb 	ubfx	r5, r1, #19, #12
    1c90:	f3c1 2649 	ubfx	r6, r1, #9, #10
    1c94:	4681      	mov	r9, r0
    1c96:	460c      	mov	r4, r1
    1c98:	4690      	mov	r8, r2
    1c9a:	469a      	mov	sl, r3
    1c9c:	b08d      	sub	sp, #52	; 0x34
    1c9e:	3517      	adds	r5, #23

	struct log_msg_desc out_desc = desc;
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
    1ca0:	2e00      	cmp	r6, #0
    1ca2:	d03b      	beq.n	1d1c <z_impl_z_log_msg_static_create+0x94>
	return cbprintf_package_convert(in_packaged, in_len,
    1ca4:	2302      	movs	r3, #2
    1ca6:	f04f 0b04 	mov.w	fp, #4
	struct z_cbprintf_buf_desc buf_desc = {
    1caa:	2200      	movs	r2, #0
	return cbprintf_package_convert(in_packaged, in_len,
    1cac:	a809      	add	r0, sp, #36	; 0x24
    1cae:	af07      	add	r7, sp, #28
		uint32_t flags = CBPRINTF_PACKAGE_COPY_RW_STR;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
    1cb0:	4631      	mov	r1, r6
    1cb2:	9300      	str	r3, [sp, #0]
    1cb4:	f8cd b008 	str.w	fp, [sp, #8]
    1cb8:	4603      	mov	r3, r0
    1cba:	9701      	str	r7, [sp, #4]
    1cbc:	4640      	mov	r0, r8
	struct z_cbprintf_buf_desc buf_desc = {
    1cbe:	e9cd 2209 	strd	r2, r2, [sp, #36]	; 0x24
    1cc2:	920b      	str	r2, [sp, #44]	; 0x2c
	return cbprintf_package_convert(in_packaged, in_len,
    1cc4:	9605      	str	r6, [sp, #20]
    1cc6:	f7fe fe15 	bl	8f4 <cbprintf_package_convert>
					    strl, ARRAY_SIZE(strl));

		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
    1cca:	f3c0 0309 	ubfx	r3, r0, #0, #10
    1cce:	1958      	adds	r0, r3, r5
    1cd0:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    1cd4:	0880      	lsrs	r0, r0, #2
		out_desc.package_len = len;
    1cd6:	461e      	mov	r6, r3
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    1cd8:	f363 2452 	bfi	r4, r3, #9, #10
    1cdc:	9304      	str	r3, [sp, #16]
    1cde:	f7ff fe9b 	bl	1a18 <z_log_msg_alloc>
		if (msg) {
    1ce2:	4605      	mov	r5, r0
    1ce4:	b178      	cbz	r0, 1d06 <z_impl_z_log_msg_static_create+0x7e>
	struct z_cbprintf_buf_desc buf_desc = {
    1ce6:	9b04      	ldr	r3, [sp, #16]
    1ce8:	2200      	movs	r2, #0
    1cea:	930a      	str	r3, [sp, #40]	; 0x28
	return cbprintf_package_convert(in_packaged, in_len,
    1cec:	2302      	movs	r3, #2
			len = cbprintf_package_copy(package, inlen,
						    msg->data, out_desc.package_len,
    1cee:	3010      	adds	r0, #16
	struct z_cbprintf_buf_desc buf_desc = {
    1cf0:	9009      	str	r0, [sp, #36]	; 0x24
    1cf2:	920b      	str	r2, [sp, #44]	; 0x2c
	return cbprintf_package_convert(in_packaged, in_len,
    1cf4:	9300      	str	r3, [sp, #0]
    1cf6:	4640      	mov	r0, r8
    1cf8:	e9cd 7b01 	strd	r7, fp, [sp, #4]
    1cfc:	4a0b      	ldr	r2, [pc, #44]	; (1d2c <z_impl_z_log_msg_static_create+0xa4>)
    1cfe:	9905      	ldr	r1, [sp, #20]
    1d00:	ab09      	add	r3, sp, #36	; 0x24
    1d02:	f7fe fdf7 	bl	8f4 <cbprintf_package_convert>
		}
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
	}

	z_log_msg_finalize(msg, source, out_desc, data);
    1d06:	f366 2452 	bfi	r4, r6, #9, #10
    1d0a:	4653      	mov	r3, sl
    1d0c:	4622      	mov	r2, r4
    1d0e:	4649      	mov	r1, r9
    1d10:	4628      	mov	r0, r5
}
    1d12:	b00d      	add	sp, #52	; 0x34
    1d14:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_log_msg_finalize(msg, source, out_desc, data);
    1d18:	f005 bdc0 	b.w	789c <z_log_msg_finalize>
    1d1c:	f025 0007 	bic.w	r0, r5, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    1d20:	0880      	lsrs	r0, r0, #2
    1d22:	f7ff fe79 	bl	1a18 <z_log_msg_alloc>
    1d26:	4605      	mov	r5, r0
    1d28:	e7ed      	b.n	1d06 <z_impl_z_log_msg_static_create+0x7e>
    1d2a:	bf00      	nop
    1d2c:	0000786f 	.word	0x0000786f

00001d30 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    1d30:	b40e      	push	{r1, r2, r3}
    1d32:	b503      	push	{r0, r1, lr}
    1d34:	ab03      	add	r3, sp, #12
    1d36:	f853 2b04 	ldr.w	r2, [r3], #4
    1d3a:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    1d3c:	4804      	ldr	r0, [pc, #16]	; (1d50 <print_formatted+0x20>)
	va_start(args, fmt);
    1d3e:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    1d40:	f005 fdd4 	bl	78ec <cbvprintf>
	va_end(args);

	return length;
}
    1d44:	b002      	add	sp, #8
    1d46:	f85d eb04 	ldr.w	lr, [sp], #4
    1d4a:	b003      	add	sp, #12
    1d4c:	4770      	bx	lr
    1d4e:	bf00      	nop
    1d50:	00007915 	.word	0x00007915

00001d54 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
    1d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1d58:	b089      	sub	sp, #36	; 0x24
    1d5a:	469a      	mov	sl, r3
    1d5c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    1d60:	4604      	mov	r4, r0
    1d62:	9304      	str	r3, [sp, #16]
    1d64:	e9dd 8313 	ldrd	r8, r3, [sp, #76]	; 0x4c
    1d68:	9306      	str	r3, [sp, #24]
    1d6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1d6c:	460f      	mov	r7, r1
    1d6e:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;

	if (!raw_string) {
    1d70:	9b04      	ldr	r3, [sp, #16]
{
    1d72:	4693      	mov	fp, r2
    1d74:	9e16      	ldr	r6, [sp, #88]	; 0x58
	if (!raw_string) {
    1d76:	2b00      	cmp	r3, #0
    1d78:	f000 8113 	beq.w	1fa2 <log_output_process+0x24e>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    1d7c:	f006 0308 	and.w	r3, r6, #8
    1d80:	9307      	str	r3, [sp, #28]
	const char *tag = z_log_get_tag();
    1d82:	f005 fd72 	bl	786a <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    1d86:	f006 0502 	and.w	r5, r6, #2
	if (tag) {
    1d8a:	4602      	mov	r2, r0
    1d8c:	2800      	cmp	r0, #0
    1d8e:	f000 80b2 	beq.w	1ef6 <log_output_process+0x1a2>
		length += print_formatted(output, "%s ", tag);
    1d92:	4620      	mov	r0, r4
    1d94:	4989      	ldr	r1, [pc, #548]	; (1fbc <log_output_process+0x268>)
    1d96:	f7ff ffcb 	bl	1d30 <print_formatted>
    1d9a:	4681      	mov	r9, r0
	if (stamp) {
    1d9c:	b14d      	cbz	r5, 1db2 <log_output_process+0x5e>
	if (!format) {
    1d9e:	f016 0f44 	tst.w	r6, #68	; 0x44
    1da2:	f040 80aa 	bne.w	1efa <log_output_process+0x1a6>
		length = print_formatted(output, "[%08lu] ", timestamp);
    1da6:	463a      	mov	r2, r7
    1da8:	4620      	mov	r0, r4
    1daa:	4985      	ldr	r1, [pc, #532]	; (1fc0 <log_output_process+0x26c>)
    1dac:	f7ff ffc0 	bl	1d30 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    1db0:	4481      	add	r9, r0
	if (color) {
    1db2:	f006 0301 	and.w	r3, r6, #1
    1db6:	b15b      	cbz	r3, 1dd0 <log_output_process+0x7c>
		const char *log_color = start && (colors[level] != NULL) ?
    1db8:	4b82      	ldr	r3, [pc, #520]	; (1fc4 <log_output_process+0x270>)
    1dba:	9a04      	ldr	r2, [sp, #16]
		print_formatted(output, "%s", log_color);
    1dbc:	4620      	mov	r0, r4
		const char *log_color = start && (colors[level] != NULL) ?
    1dbe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		print_formatted(output, "%s", log_color);
    1dc2:	4b81      	ldr	r3, [pc, #516]	; (1fc8 <log_output_process+0x274>)
    1dc4:	4981      	ldr	r1, [pc, #516]	; (1fcc <log_output_process+0x278>)
    1dc6:	2a00      	cmp	r2, #0
    1dc8:	bf08      	it	eq
    1dca:	461a      	moveq	r2, r3
    1dcc:	f7ff ffb0 	bl	1d30 <print_formatted>
	if (level_on) {
    1dd0:	f006 0308 	and.w	r3, r6, #8
    1dd4:	2b00      	cmp	r3, #0
    1dd6:	f000 80bc 	beq.w	1f52 <log_output_process+0x1fe>
		total += print_formatted(output, "<%s> ", severity[level]);
    1dda:	4b7d      	ldr	r3, [pc, #500]	; (1fd0 <log_output_process+0x27c>)
    1ddc:	9a04      	ldr	r2, [sp, #16]
    1dde:	4620      	mov	r0, r4
    1de0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1de4:	497b      	ldr	r1, [pc, #492]	; (1fd4 <log_output_process+0x280>)
    1de6:	f7ff ffa3 	bl	1d30 <print_formatted>
    1dea:	4605      	mov	r5, r0
	if (domain) {
    1dec:	f1bb 0f00 	cmp.w	fp, #0
    1df0:	d005      	beq.n	1dfe <log_output_process+0xaa>
		total += print_formatted(output, "%s/", domain);
    1df2:	465a      	mov	r2, fp
    1df4:	4620      	mov	r0, r4
    1df6:	4978      	ldr	r1, [pc, #480]	; (1fd8 <log_output_process+0x284>)
    1df8:	f7ff ff9a 	bl	1d30 <print_formatted>
    1dfc:	4405      	add	r5, r0
	if (source) {
    1dfe:	f1ba 0f00 	cmp.w	sl, #0
    1e02:	d005      	beq.n	1e10 <log_output_process+0xbc>
		total += print_formatted(output,
    1e04:	4652      	mov	r2, sl
    1e06:	4620      	mov	r0, r4
    1e08:	4974      	ldr	r1, [pc, #464]	; (1fdc <log_output_process+0x288>)
    1e0a:	f7ff ff91 	bl	1d30 <print_formatted>
    1e0e:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
    1e10:	444d      	add	r5, r9
		prefix_offset = prefix_print(output, flags, 0, timestamp, domain, source, level);
	} else {
		prefix_offset = 0;
	}

	if (package) {
    1e12:	f1b8 0f00 	cmp.w	r8, #0
    1e16:	f000 80cc 	beq.w	1fb2 <log_output_process+0x25e>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
    1e1a:	4871      	ldr	r0, [pc, #452]	; (1fe0 <log_output_process+0x28c>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    1e1c:	4643      	mov	r3, r8
    1e1e:	4622      	mov	r2, r4
    1e20:	4970      	ldr	r1, [pc, #448]	; (1fe4 <log_output_process+0x290>)
    1e22:	f005 f87e 	bl	6f22 <cbpprintf_external>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
    1e26:	9b05      	ldr	r3, [sp, #20]
    1e28:	2b00      	cmp	r3, #0
    1e2a:	d04c      	beq.n	1ec6 <log_output_process+0x172>
		print_formatted(output, " ");
    1e2c:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 1fe8 <log_output_process+0x294>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    1e30:	9f05      	ldr	r7, [sp, #20]
    1e32:	2f10      	cmp	r7, #16
    1e34:	bf28      	it	cs
    1e36:	2710      	movcs	r7, #16
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    1e38:	06f3      	lsls	r3, r6, #27
    1e3a:	d407      	bmi.n	1e4c <log_output_process+0xf8>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    1e3c:	06b0      	lsls	r0, r6, #26
		print_formatted(ctx, "\n");
    1e3e:	bf48      	it	mi
    1e40:	496a      	ldrmi	r1, [pc, #424]	; (1fec <log_output_process+0x298>)
		print_formatted(ctx, "\r\n");
    1e42:	4620      	mov	r0, r4
    1e44:	bf58      	it	pl
    1e46:	496a      	ldrpl	r1, [pc, #424]	; (1ff0 <log_output_process+0x29c>)
    1e48:	f7ff ff72 	bl	1d30 <print_formatted>
		prefix_offset = 0;
    1e4c:	f04f 0a00 	mov.w	sl, #0
	for (int i = 0; i < prefix_offset; i++) {
    1e50:	4555      	cmp	r5, sl
    1e52:	f300 8084 	bgt.w	1f5e <log_output_process+0x20a>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1e56:	f04f 0900 	mov.w	r9, #0
			print_formatted(output, "   ");
    1e5a:	f8df a198 	ldr.w	sl, [pc, #408]	; 1ff4 <log_output_process+0x2a0>
			print_formatted(output, "%02x ", data[i]);
    1e5e:	f8df b198 	ldr.w	fp, [pc, #408]	; 1ff8 <log_output_process+0x2a4>
		if (i < length) {
    1e62:	45b9      	cmp	r9, r7
    1e64:	f080 808b 	bcs.w	1f7e <log_output_process+0x22a>
			print_formatted(output, "%02x ", data[i]);
    1e68:	9b06      	ldr	r3, [sp, #24]
    1e6a:	4659      	mov	r1, fp
    1e6c:	4620      	mov	r0, r4
    1e6e:	f813 2009 	ldrb.w	r2, [r3, r9]
    1e72:	f7ff ff5d 	bl	1d30 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1e76:	f109 0901 	add.w	r9, r9, #1
    1e7a:	f1b9 0f10 	cmp.w	r9, #16
    1e7e:	d175      	bne.n	1f6c <log_output_process+0x218>
	print_formatted(output, "|");
    1e80:	4620      	mov	r0, r4
    1e82:	495e      	ldr	r1, [pc, #376]	; (1ffc <log_output_process+0x2a8>)
    1e84:	f7ff ff54 	bl	1d30 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1e88:	f04f 0b00 	mov.w	fp, #0
			print_formatted(output, "%c",
    1e8c:	f8df a170 	ldr.w	sl, [pc, #368]	; 2000 <CONFIG_NRF_SPU_RAM_REGION_SIZE>
		if (i < length) {
    1e90:	455f      	cmp	r7, fp
    1e92:	f240 8081 	bls.w	1f98 <log_output_process+0x244>
			char c = (char)data[i];
    1e96:	9b06      	ldr	r3, [sp, #24]
			print_formatted(output, "%c",
    1e98:	4651      	mov	r1, sl
			char c = (char)data[i];
    1e9a:	f813 200b 	ldrb.w	r2, [r3, fp]
			print_formatted(output, "%c",
    1e9e:	4620      	mov	r0, r4
	return (int)((((unsigned)c) >= ' ') &&
    1ea0:	f1a2 0320 	sub.w	r3, r2, #32
    1ea4:	2b5f      	cmp	r3, #95	; 0x5f
    1ea6:	bf28      	it	cs
    1ea8:	222e      	movcs	r2, #46	; 0x2e
    1eaa:	f7ff ff41 	bl	1d30 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1eae:	f10b 0b01 	add.w	fp, fp, #1
    1eb2:	f1bb 0f10 	cmp.w	fp, #16
    1eb6:	d167      	bne.n	1f88 <log_output_process+0x234>
		data += length;
    1eb8:	9b06      	ldr	r3, [sp, #24]
    1eba:	443b      	add	r3, r7
    1ebc:	9306      	str	r3, [sp, #24]
	} while (len);
    1ebe:	9b05      	ldr	r3, [sp, #20]
    1ec0:	1bdb      	subs	r3, r3, r7
    1ec2:	9305      	str	r3, [sp, #20]
    1ec4:	d1b4      	bne.n	1e30 <log_output_process+0xdc>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
    1ec6:	9b04      	ldr	r3, [sp, #16]
    1ec8:	b17b      	cbz	r3, 1eea <log_output_process+0x196>
	if (color) {
    1eca:	07f1      	lsls	r1, r6, #31
    1ecc:	d504      	bpl.n	1ed8 <log_output_process+0x184>
		print_formatted(output, "%s", log_color);
    1ece:	4620      	mov	r0, r4
    1ed0:	4a3d      	ldr	r2, [pc, #244]	; (1fc8 <log_output_process+0x274>)
    1ed2:	493e      	ldr	r1, [pc, #248]	; (1fcc <log_output_process+0x278>)
    1ed4:	f7ff ff2c 	bl	1d30 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    1ed8:	06f2      	lsls	r2, r6, #27
    1eda:	d406      	bmi.n	1eea <log_output_process+0x196>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    1edc:	06b3      	lsls	r3, r6, #26
		print_formatted(ctx, "\r\n");
    1ede:	4620      	mov	r0, r4
		print_formatted(ctx, "\n");
    1ee0:	bf4c      	ite	mi
    1ee2:	4942      	ldrmi	r1, [pc, #264]	; (1fec <log_output_process+0x298>)
		print_formatted(ctx, "\r\n");
    1ee4:	4942      	ldrpl	r1, [pc, #264]	; (1ff0 <log_output_process+0x29c>)
    1ee6:	f7ff ff23 	bl	1d30 <print_formatted>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    1eea:	4620      	mov	r0, r4
}
    1eec:	b009      	add	sp, #36	; 0x24
    1eee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
    1ef2:	f005 bd02 	b.w	78fa <log_output_flush>
	uint32_t length = 0U;
    1ef6:	4681      	mov	r9, r0
    1ef8:	e750      	b.n	1d9c <log_output_process+0x48>
	} else if (freq != 0U) {
    1efa:	4b42      	ldr	r3, [pc, #264]	; (2004 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4>)
    1efc:	6818      	ldr	r0, [r3, #0]
    1efe:	2800      	cmp	r0, #0
    1f00:	f43f af56 	beq.w	1db0 <log_output_process+0x5c>
		timestamp /= timestamp_div;
    1f04:	4b40      	ldr	r3, [pc, #256]	; (2008 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x8>)
    1f06:	f44f 6561 	mov.w	r5, #3600	; 0xe10
    1f0a:	6819      	ldr	r1, [r3, #0]
		ms = (remainder * 1000U) / freq;
    1f0c:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		timestamp /= timestamp_div;
    1f10:	fbb7 f7f1 	udiv	r7, r7, r1
		total_seconds = timestamp / freq;
    1f14:	fbb7 f1f0 	udiv	r1, r7, r0
		seconds -= hours * 3600U;
    1f18:	fbb1 f2f5 	udiv	r2, r1, r5
		remainder = timestamp % freq;
    1f1c:	fb00 7711 	mls	r7, r0, r1, r7
		ms = (remainder * 1000U) / freq;
    1f20:	fb0e f707 	mul.w	r7, lr, r7
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1f24:	fbb7 fcf0 	udiv	ip, r7, r0
    1f28:	fb05 1512 	mls	r5, r5, r2, r1
		mins = seconds / 60U;
    1f2c:	213c      	movs	r1, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1f2e:	fb00 771c 	mls	r7, r0, ip, r7
		mins = seconds / 60U;
    1f32:	fbb5 f3f1 	udiv	r3, r5, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1f36:	fb0e f707 	mul.w	r7, lr, r7
    1f3a:	fbb7 f7f0 	udiv	r7, r7, r0
				length = print_formatted(output,
    1f3e:	fb01 5113 	mls	r1, r1, r3, r5
    1f42:	4620      	mov	r0, r4
    1f44:	9100      	str	r1, [sp, #0]
    1f46:	e9cd c701 	strd	ip, r7, [sp, #4]
    1f4a:	4930      	ldr	r1, [pc, #192]	; (200c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xc>)
    1f4c:	f7ff fef0 	bl	1d30 <print_formatted>
    1f50:	e72e      	b.n	1db0 <log_output_process+0x5c>
	int total = 0;
    1f52:	f006 0508 	and.w	r5, r6, #8
    1f56:	e749      	b.n	1dec <log_output_process+0x98>
		prefix_offset = 0;
    1f58:	9d04      	ldr	r5, [sp, #16]
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
    1f5a:	482d      	ldr	r0, [pc, #180]	; (2010 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x10>)
    1f5c:	e75e      	b.n	1e1c <log_output_process+0xc8>
		print_formatted(output, " ");
    1f5e:	4641      	mov	r1, r8
    1f60:	4620      	mov	r0, r4
    1f62:	f7ff fee5 	bl	1d30 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    1f66:	f10a 0a01 	add.w	sl, sl, #1
    1f6a:	e771      	b.n	1e50 <log_output_process+0xfc>
		if (i > 0 && !(i % 8)) {
    1f6c:	f019 0f07 	tst.w	r9, #7
    1f70:	f47f af77 	bne.w	1e62 <log_output_process+0x10e>
			print_formatted(output, " ");
    1f74:	4641      	mov	r1, r8
    1f76:	4620      	mov	r0, r4
    1f78:	f7ff feda 	bl	1d30 <print_formatted>
    1f7c:	e771      	b.n	1e62 <log_output_process+0x10e>
			print_formatted(output, "   ");
    1f7e:	4651      	mov	r1, sl
    1f80:	4620      	mov	r0, r4
    1f82:	f7ff fed5 	bl	1d30 <print_formatted>
    1f86:	e776      	b.n	1e76 <log_output_process+0x122>
		if (i > 0 && !(i % 8)) {
    1f88:	f01b 0f07 	tst.w	fp, #7
    1f8c:	d180      	bne.n	1e90 <log_output_process+0x13c>
			print_formatted(output, " ");
    1f8e:	4641      	mov	r1, r8
    1f90:	4620      	mov	r0, r4
    1f92:	f7ff fecd 	bl	1d30 <print_formatted>
    1f96:	e77b      	b.n	1e90 <log_output_process+0x13c>
			print_formatted(output, " ");
    1f98:	4641      	mov	r1, r8
    1f9a:	4620      	mov	r0, r4
    1f9c:	f7ff fec8 	bl	1d30 <print_formatted>
    1fa0:	e785      	b.n	1eae <log_output_process+0x15a>
	if (package) {
    1fa2:	f1b8 0f00 	cmp.w	r8, #0
    1fa6:	d1d7      	bne.n	1f58 <log_output_process+0x204>
	if (data_len) {
    1fa8:	9b05      	ldr	r3, [sp, #20]
    1faa:	2b00      	cmp	r3, #0
    1fac:	d09d      	beq.n	1eea <log_output_process+0x196>
		prefix_offset = 0;
    1fae:	9d04      	ldr	r5, [sp, #16]
    1fb0:	e73c      	b.n	1e2c <log_output_process+0xd8>
	if (data_len) {
    1fb2:	9b05      	ldr	r3, [sp, #20]
    1fb4:	2b00      	cmp	r3, #0
    1fb6:	d088      	beq.n	1eca <log_output_process+0x176>
    1fb8:	e738      	b.n	1e2c <log_output_process+0xd8>
    1fba:	bf00      	nop
    1fbc:	00008db4 	.word	0x00008db4
    1fc0:	00008db8 	.word	0x00008db8
    1fc4:	00008948 	.word	0x00008948
    1fc8:	00008daf 	.word	0x00008daf
    1fcc:	00008ddd 	.word	0x00008ddd
    1fd0:	0000895c 	.word	0x0000895c
    1fd4:	00008de0 	.word	0x00008de0
    1fd8:	00008de6 	.word	0x00008de6
    1fdc:	00008dea 	.word	0x00008dea
    1fe0:	00007915 	.word	0x00007915
    1fe4:	000078ed 	.word	0x000078ed
    1fe8:	00008dfa 	.word	0x00008dfa
    1fec:	00008df0 	.word	0x00008df0
    1ff0:	00008def 	.word	0x00008def
    1ff4:	00008df8 	.word	0x00008df8
    1ff8:	00008df2 	.word	0x00008df2
    1ffc:	00008dfc 	.word	0x00008dfc
    2000:	00008dfe 	.word	0x00008dfe
    2004:	2001fc14 	.word	0x2001fc14
    2008:	2001fc18 	.word	0x2001fc18
    200c:	00008dc1 	.word	0x00008dc1
    2010:	00007943 	.word	0x00007943

00002014 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
    2014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
    2018:	684b      	ldr	r3, [r1, #4]
	return msg->hdr.desc.level;
    201a:	880f      	ldrh	r7, [r1, #0]
    201c:	4605      	mov	r5, r0
    201e:	460c      	mov	r4, r1
    2020:	4690      	mov	r8, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
    2022:	688e      	ldr	r6, [r1, #8]
    2024:	b086      	sub	sp, #24
	return msg->hdr.desc.level;
    2026:	f3c7 1782 	ubfx	r7, r7, #6, #3
	log_timestamp_t timestamp = log_msg_get_timestamp(msg);
	uint8_t level = log_msg_get_level(msg);
	void *source = (void *)log_msg_get_source(msg);
	uint8_t domain_id = log_msg_get_domain(msg);
	int16_t source_id = source ?
    202a:	b15b      	cbz	r3, 2044 <log_output_msg_process+0x30>
    202c:	4913      	ldr	r1, [pc, #76]	; (207c <log_output_msg_process+0x68>)
    202e:	1a5b      	subs	r3, r3, r1
    2030:	f343 01cf 	sbfx	r1, r3, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    2034:	2900      	cmp	r1, #0
    2036:	db1f      	blt.n	2078 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
    2038:	7820      	ldrb	r0, [r4, #0]
    203a:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    203e:	f7ff fe07 	bl	1c50 <log_source_name_get>
    2042:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    2044:	4621      	mov	r1, r4
    2046:	f851 2b10 	ldr.w	r2, [r1], #16
	*len = msg->hdr.desc.data_len;
    204a:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
    204c:	f3c2 2249 	ubfx	r2, r2, #9, #10
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
    2050:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
    2052:	eb01 0402 	add.w	r4, r1, r2
    2056:	bf08      	it	eq
    2058:	2100      	moveq	r1, #0
	*len = msg->hdr.desc.data_len;
    205a:	f3c0 00cb 	ubfx	r0, r0, #3, #12
    205e:	e9cd 0803 	strd	r0, r8, [sp, #12]
    2062:	e9cd 1401 	strd	r1, r4, [sp, #4]
    2066:	2200      	movs	r2, #0
    2068:	4631      	mov	r1, r6
    206a:	4628      	mov	r0, r5
    206c:	9700      	str	r7, [sp, #0]
    206e:	f7ff fe71 	bl	1d54 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
    2072:	b006      	add	sp, #24
    2074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    2078:	2300      	movs	r3, #0
    207a:	e7e3      	b.n	2044 <log_output_msg_process+0x30>
    207c:	0000889c 	.word	0x0000889c

00002080 <log_output_dropped_process>:
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    2080:	f242 730f 	movw	r3, #9999	; 0x270f
{
    2084:	b573      	push	{r0, r1, r4, r5, r6, lr}
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    2086:	428b      	cmp	r3, r1
    2088:	bf28      	it	cs
    208a:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    208c:	6805      	ldr	r5, [r0, #0]
{
    208e:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    2090:	2105      	movs	r1, #5
    2092:	4668      	mov	r0, sp
    2094:	4a0d      	ldr	r2, [pc, #52]	; (20cc <log_output_dropped_process+0x4c>)
    2096:	f004 ffb1 	bl	6ffc <snprintk>
    209a:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    209c:	6863      	ldr	r3, [r4, #4]
    209e:	4628      	mov	r0, r5
    20a0:	220b      	movs	r2, #11
    20a2:	685b      	ldr	r3, [r3, #4]
    20a4:	490a      	ldr	r1, [pc, #40]	; (20d0 <log_output_dropped_process+0x50>)
    20a6:	f005 fc14 	bl	78d2 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    20aa:	6863      	ldr	r3, [r4, #4]
    20ac:	4632      	mov	r2, r6
    20ae:	4669      	mov	r1, sp
    20b0:	4628      	mov	r0, r5
    20b2:	685b      	ldr	r3, [r3, #4]
    20b4:	f005 fc0d 	bl	78d2 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    20b8:	6863      	ldr	r3, [r4, #4]
    20ba:	221b      	movs	r2, #27
    20bc:	4628      	mov	r0, r5
    20be:	685b      	ldr	r3, [r3, #4]
    20c0:	4904      	ldr	r1, [pc, #16]	; (20d4 <log_output_dropped_process+0x54>)
    20c2:	f005 fc06 	bl	78d2 <buffer_write>
		     output->control_block->ctx);
}
    20c6:	b002      	add	sp, #8
    20c8:	bd70      	pop	{r4, r5, r6, pc}
    20ca:	bf00      	nop
    20cc:	00008ca2 	.word	0x00008ca2
    20d0:	00008e3d 	.word	0x00008e3d
    20d4:	00008e21 	.word	0x00008e21

000020d8 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    20d8:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    20da:	2100      	movs	r1, #0
	timestamp_div = 1U;
    20dc:	4a07      	ldr	r2, [pc, #28]	; (20fc <log_output_timestamp_freq_set+0x24>)
{
    20de:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
    20e0:	4c07      	ldr	r4, [pc, #28]	; (2100 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    20e2:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    20e4:	42a0      	cmp	r0, r4
    20e6:	d804      	bhi.n	20f2 <log_output_timestamp_freq_set+0x1a>
    20e8:	b101      	cbz	r1, 20ec <log_output_timestamp_freq_set+0x14>
    20ea:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    20ec:	4b05      	ldr	r3, [pc, #20]	; (2104 <log_output_timestamp_freq_set+0x2c>)
    20ee:	6018      	str	r0, [r3, #0]
}
    20f0:	bd10      	pop	{r4, pc}
		timestamp_div *= 2U;
    20f2:	2101      	movs	r1, #1
		frequency /= 2U;
    20f4:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    20f6:	005b      	lsls	r3, r3, #1
    20f8:	e7f4      	b.n	20e4 <log_output_timestamp_freq_set+0xc>
    20fa:	bf00      	nop
    20fc:	2001fc18 	.word	0x2001fc18
    2100:	000f4240 	.word	0x000f4240
    2104:	2001fc14 	.word	0x2001fc14

00002108 <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    2108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    210a:	460d      	mov	r5, r1
    210c:	4604      	mov	r4, r0
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
			uart_poll_out(uart_dev, data[i]);
    210e:	4f06      	ldr	r7, [pc, #24]	; (2128 <char_out+0x20>)
    2110:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
    2112:	42b4      	cmp	r4, r6
    2114:	d101      	bne.n	211a <char_out+0x12>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
    2116:	4628      	mov	r0, r5
    2118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
    211a:	6838      	ldr	r0, [r7, #0]
    211c:	f814 1b01 	ldrb.w	r1, [r4], #1
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    2120:	6883      	ldr	r3, [r0, #8]
    2122:	685b      	ldr	r3, [r3, #4]
    2124:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    2126:	e7f4      	b.n	2112 <char_out+0xa>
    2128:	2001fc34 	.word	0x2001fc34

0000212c <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    212c:	4b01      	ldr	r3, [pc, #4]	; (2134 <format_set+0x8>)
	return 0;
}
    212e:	2000      	movs	r0, #0
	log_format_current = log_type;
    2130:	6019      	str	r1, [r3, #0]
}
    2132:	4770      	bx	lr
    2134:	2001fc24 	.word	0x2001fc24

00002138 <log_backend_uart_init>:

static void log_backend_uart_init(struct log_backend const *const backend)
{
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    2138:	4b01      	ldr	r3, [pc, #4]	; (2140 <log_backend_uart_init+0x8>)
    213a:	4a02      	ldr	r2, [pc, #8]	; (2144 <log_backend_uart_init+0xc>)
    213c:	601a      	str	r2, [r3, #0]
		} else {
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
				"Fallback to polling.", err);
		}
	}
}
    213e:	4770      	bx	lr
    2140:	2001fc34 	.word	0x2001fc34
    2144:	00008608 	.word	0x00008608

00002148 <panic>:

static void panic(struct log_backend const *const backend)
{
	in_panic = true;
    2148:	2201      	movs	r2, #1
    214a:	4b02      	ldr	r3, [pc, #8]	; (2154 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    214c:	4802      	ldr	r0, [pc, #8]	; (2158 <panic+0x10>)
    214e:	701a      	strb	r2, [r3, #0]
    2150:	f005 bbd3 	b.w	78fa <log_output_flush>
    2154:	2002058e 	.word	0x2002058e
    2158:	0000898c 	.word	0x0000898c

0000215c <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    215c:	4801      	ldr	r0, [pc, #4]	; (2164 <dropped+0x8>)
    215e:	f7ff bf8f 	b.w	2080 <log_output_dropped_process>
    2162:	bf00      	nop
    2164:	0000898c 	.word	0x0000898c

00002168 <process>:
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2168:	4b06      	ldr	r3, [pc, #24]	; (2184 <process+0x1c>)
{
    216a:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    216c:	6818      	ldr	r0, [r3, #0]
{
    216e:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2170:	f7ff fbde 	bl	1930 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
    2174:	4621      	mov	r1, r4
}
    2176:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    217a:	4603      	mov	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
    217c:	220f      	movs	r2, #15
    217e:	4802      	ldr	r0, [pc, #8]	; (2188 <process+0x20>)
    2180:	4718      	bx	r3
    2182:	bf00      	nop
    2184:	2001fc24 	.word	0x2001fc24
    2188:	0000898c 	.word	0x0000898c

0000218c <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    218c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2190:	4605      	mov	r5, r0
	__asm__ volatile(
    2192:	f04f 0320 	mov.w	r3, #32
    2196:	f3ef 8611 	mrs	r6, BASEPRI
    219a:	f383 8812 	msr	BASEPRI_MAX, r3
    219e:	f3bf 8f6f 	isb	sy
	return list->head;
    21a2:	4b0e      	ldr	r3, [pc, #56]	; (21dc <pm_state_notify+0x50>)
    21a4:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    21a6:	b19c      	cbz	r4, 21d0 <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    21a8:	f04f 090c 	mov.w	r9, #12
    21ac:	4f0c      	ldr	r7, [pc, #48]	; (21e0 <pm_state_notify+0x54>)
    21ae:	f8df 8034 	ldr.w	r8, [pc, #52]	; 21e4 <pm_state_notify+0x58>
			callback = notifier->state_exit;
    21b2:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    21b6:	2d00      	cmp	r5, #0
    21b8:	bf08      	it	eq
    21ba:	4613      	moveq	r3, r2
		if (callback) {
    21bc:	b12b      	cbz	r3, 21ca <pm_state_notify+0x3e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    21be:	f898 2014 	ldrb.w	r2, [r8, #20]
    21c2:	fb09 f202 	mul.w	r2, r9, r2
    21c6:	5cb8      	ldrb	r0, [r7, r2]
    21c8:	4798      	blx	r3
	return node->next;
    21ca:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    21cc:	2c00      	cmp	r4, #0
    21ce:	d1f0      	bne.n	21b2 <pm_state_notify+0x26>
	__asm__ volatile(
    21d0:	f386 8811 	msr	BASEPRI, r6
    21d4:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    21d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    21dc:	2001fc38 	.word	0x2001fc38
    21e0:	2001fc4c 	.word	0x2001fc4c
    21e4:	2002037c 	.word	0x2002037c

000021e8 <pm_system_resume>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    21e8:	2201      	movs	r2, #1

void pm_system_resume(void)
{
    21ea:	b538      	push	{r3, r4, r5, lr}
	uint8_t id = CURRENT_CPU;
    21ec:	4b17      	ldr	r3, [pc, #92]	; (224c <pm_system_resume+0x64>)
    21ee:	7d1c      	ldrb	r4, [r3, #20]
    21f0:	f004 031f 	and.w	r3, r4, #31
    21f4:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    21f6:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    21f8:	4b15      	ldr	r3, [pc, #84]	; (2250 <pm_system_resume+0x68>)
    21fa:	0961      	lsrs	r1, r4, #5
    21fc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    2200:	e8d3 1fef 	ldaex	r1, [r3]
    2204:	ea01 0500 	and.w	r5, r1, r0
    2208:	e8c3 5fec 	stlex	ip, r5, [r3]
    220c:	f1bc 0f00 	cmp.w	ip, #0
    2210:	d1f6      	bne.n	2200 <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    2212:	4211      	tst	r1, r2
    2214:	d013      	beq.n	223e <pm_system_resume+0x56>
	if (pm_state_exit_post_ops != NULL) {
    2216:	4b0f      	ldr	r3, [pc, #60]	; (2254 <pm_system_resume+0x6c>)
    2218:	4d0f      	ldr	r5, [pc, #60]	; (2258 <pm_system_resume+0x70>)
    221a:	b18b      	cbz	r3, 2240 <pm_system_resume+0x58>
		pm_state_exit_post_ops(info->state, info->substate_id);
    221c:	230c      	movs	r3, #12
    221e:	4363      	muls	r3, r4
    2220:	18ea      	adds	r2, r5, r3
    2222:	7851      	ldrb	r1, [r2, #1]
    2224:	5ce8      	ldrb	r0, [r5, r3]
    2226:	f005 fb02 	bl	782e <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    222a:	2000      	movs	r0, #0
    222c:	f7ff ffae 	bl	218c <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    2230:	230c      	movs	r3, #12
    2232:	435c      	muls	r4, r3
    2234:	2300      	movs	r3, #0
    2236:	192a      	adds	r2, r5, r4
    2238:	512b      	str	r3, [r5, r4]
    223a:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    223e:	bd38      	pop	{r3, r4, r5, pc}
    2240:	f383 8811 	msr	BASEPRI, r3
    2244:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    2248:	e7ef      	b.n	222a <pm_system_resume+0x42>
    224a:	bf00      	nop
    224c:	2002037c 	.word	0x2002037c
    2250:	2001fc58 	.word	0x2001fc58
    2254:	0000782f 	.word	0x0000782f
    2258:	2001fc4c 	.word	0x2001fc4c

0000225c <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    225c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    2260:	4b31      	ldr	r3, [pc, #196]	; (2328 <pm_system_suspend+0xcc>)
{
    2262:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    2264:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
    2266:	f04f 0320 	mov.w	r3, #32
    226a:	f3ef 8811 	mrs	r8, BASEPRI
    226e:	f383 8812 	msr	BASEPRI_MAX, r3
    2272:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    2276:	240c      	movs	r4, #12
    2278:	436c      	muls	r4, r5
    227a:	4b2c      	ldr	r3, [pc, #176]	; (232c <pm_system_suspend+0xd0>)
    227c:	4e2c      	ldr	r6, [pc, #176]	; (2330 <pm_system_suspend+0xd4>)
    227e:	5d19      	ldrb	r1, [r3, r4]
    2280:	191a      	adds	r2, r3, r4
    2282:	2900      	cmp	r1, #0
    2284:	d045      	beq.n	2312 <pm_system_suspend+0xb6>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    2286:	ca07      	ldmia	r2, {r0, r1, r2}
    2288:	eb06 0c04 	add.w	ip, r6, r4
    228c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    2290:	2200      	movs	r2, #0
    2292:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
    2294:	f388 8811 	msr	BASEPRI, r8
    2298:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    229c:	230c      	movs	r3, #12
    229e:	436b      	muls	r3, r5
    22a0:	5cf0      	ldrb	r0, [r6, r3]
    22a2:	18f2      	adds	r2, r6, r3
    22a4:	b398      	cbz	r0, 230e <pm_system_suspend+0xb2>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    22a6:	1c7b      	adds	r3, r7, #1
    22a8:	d00f      	beq.n	22ca <pm_system_suspend+0x6e>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    22aa:	f44f 4400 	mov.w	r4, #32768	; 0x8000
    22ae:	2100      	movs	r1, #0
    22b0:	f8d2 c008 	ldr.w	ip, [r2, #8]
    22b4:	481f      	ldr	r0, [pc, #124]	; (2334 <pm_system_suspend+0xd8>)
    22b6:	2300      	movs	r3, #0
    22b8:	fbec 0104 	umlal	r0, r1, ip, r4
    22bc:	4a1e      	ldr	r2, [pc, #120]	; (2338 <pm_system_suspend+0xdc>)
    22be:	f7fe f857 	bl	370 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    22c2:	2101      	movs	r1, #1
    22c4:	1a38      	subs	r0, r7, r0
    22c6:	f006 f8e5 	bl	8494 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    22ca:	f003 ff7f 	bl	61cc <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    22ce:	2001      	movs	r0, #1
    22d0:	f7ff ff5c 	bl	218c <pm_state_notify>
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    22d4:	2101      	movs	r1, #1
    22d6:	f005 021f 	and.w	r2, r5, #31
    22da:	4091      	lsls	r1, r2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    22dc:	4a17      	ldr	r2, [pc, #92]	; (233c <pm_system_suspend+0xe0>)

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    22de:	096b      	lsrs	r3, r5, #5
    22e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    22e4:	e8d3 2fef 	ldaex	r2, [r3]
    22e8:	430a      	orrs	r2, r1
    22ea:	e8c3 2fe0 	stlex	r0, r2, [r3]
    22ee:	2800      	cmp	r0, #0
    22f0:	d1f8      	bne.n	22e4 <pm_system_suspend+0x88>
	if (pm_state_set != NULL) {
    22f2:	4b13      	ldr	r3, [pc, #76]	; (2340 <pm_system_suspend+0xe4>)
    22f4:	b133      	cbz	r3, 2304 <pm_system_suspend+0xa8>
		pm_state_set(info->state, info->substate_id);
    22f6:	200c      	movs	r0, #12
    22f8:	4368      	muls	r0, r5
    22fa:	1833      	adds	r3, r6, r0
    22fc:	7859      	ldrb	r1, [r3, #1]
    22fe:	5c30      	ldrb	r0, [r6, r0]
    2300:	f7ff f992 	bl	1628 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    2304:	f7ff ff70 	bl	21e8 <pm_system_resume>
	k_sched_unlock();
    2308:	f004 f930 	bl	656c <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    230c:	2001      	movs	r0, #1
}
    230e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
    2312:	4601      	mov	r1, r0
    2314:	4628      	mov	r0, r5
    2316:	f000 f815 	bl	2344 <pm_policy_next_state>
		if (info != NULL) {
    231a:	2800      	cmp	r0, #0
    231c:	d0ba      	beq.n	2294 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
    231e:	c807      	ldmia	r0, {r0, r1, r2}
    2320:	4434      	add	r4, r6
    2322:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    2326:	e7b5      	b.n	2294 <pm_system_suspend+0x38>
    2328:	2002037c 	.word	0x2002037c
    232c:	2001fc40 	.word	0x2001fc40
    2330:	2001fc4c 	.word	0x2001fc4c
    2334:	000f423f 	.word	0x000f423f
    2338:	000f4240 	.word	0x000f4240
    233c:	2001fc58 	.word	0x2001fc58
    2340:	00001629 	.word	0x00001629

00002344 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    2344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2348:	b085      	sub	sp, #20
    234a:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    234c:	a903      	add	r1, sp, #12
    234e:	f000 f841 	bl	23d4 <pm_state_cpu_get_all>
    2352:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    2356:	f04f 0b00 	mov.w	fp, #0

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
		const struct pm_state_info *state = &cpu_states[i];
    235a:	9b03      	ldr	r3, [sp, #12]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    235c:	1e44      	subs	r4, r0, #1
		const struct pm_state_info *state = &cpu_states[i];
    235e:	9301      	str	r3, [sp, #4]

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    2360:	4b19      	ldr	r3, [pc, #100]	; (23c8 <pm_policy_next_state+0x84>)
    2362:	f8df 8068 	ldr.w	r8, [pc, #104]	; 23cc <pm_policy_next_state+0x88>
    2366:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    236a:	b224      	sxth	r4, r4
    236c:	1c63      	adds	r3, r4, #1
    236e:	d104      	bne.n	237a <pm_policy_next_state+0x36>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    2370:	2500      	movs	r5, #0
}
    2372:	4628      	mov	r0, r5
    2374:	b005      	add	sp, #20
    2376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    237a:	46c4      	mov	ip, r8
    237c:	4659      	mov	r1, fp
		const struct pm_state_info *state = &cpu_states[i];
    237e:	9b01      	ldr	r3, [sp, #4]
    2380:	eb04 0544 	add.w	r5, r4, r4, lsl #1
    2384:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    2388:	6868      	ldr	r0, [r5, #4]
    238a:	2300      	movs	r3, #0
    238c:	fbe0 c107 	umlal	ip, r1, r0, r7
    2390:	4a0f      	ldr	r2, [pc, #60]	; (23d0 <pm_policy_next_state+0x8c>)
    2392:	4660      	mov	r0, ip
    2394:	f7fd ffec 	bl	370 <__aeabi_uldivmod>
    2398:	46c4      	mov	ip, r8
    239a:	4659      	mov	r1, fp
    239c:	4681      	mov	r9, r0
    239e:	68a8      	ldr	r0, [r5, #8]
    23a0:	2300      	movs	r3, #0
    23a2:	fbe0 c107 	umlal	ip, r1, r0, r7
    23a6:	4a0a      	ldr	r2, [pc, #40]	; (23d0 <pm_policy_next_state+0x8c>)
    23a8:	4660      	mov	r0, ip
    23aa:	f7fd ffe1 	bl	370 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    23ae:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
    23b2:	d001      	beq.n	23b8 <pm_policy_next_state+0x74>
    23b4:	4582      	cmp	sl, r0
    23b6:	d904      	bls.n	23c2 <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    23b8:	1c72      	adds	r2, r6, #1
    23ba:	d0da      	beq.n	2372 <pm_policy_next_state+0x2e>
		    (ticks >= (min_residency + exit_latency))) {
    23bc:	4448      	add	r0, r9
		if ((ticks == K_TICKS_FOREVER) ||
    23be:	42b0      	cmp	r0, r6
    23c0:	d9d7      	bls.n	2372 <pm_policy_next_state+0x2e>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    23c2:	3c01      	subs	r4, #1
    23c4:	b224      	sxth	r4, r4
    23c6:	e7d1      	b.n	236c <pm_policy_next_state+0x28>
    23c8:	20000008 	.word	0x20000008
    23cc:	000f423f 	.word	0x000f423f
    23d0:	000f4240 	.word	0x000f4240

000023d4 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    23d4:	b908      	cbnz	r0, 23da <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    23d6:	4b02      	ldr	r3, [pc, #8]	; (23e0 <pm_state_cpu_get_all+0xc>)
    23d8:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    23da:	2000      	movs	r0, #0
    23dc:	4770      	bx	lr
    23de:	bf00      	nop
    23e0:	0000899c 	.word	0x0000899c

000023e4 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    23e4:	4801      	ldr	r0, [pc, #4]	; (23ec <nrf_cc3xx_platform_abort_init+0x8>)
    23e6:	f004 bc6f 	b.w	6cc8 <nrf_cc3xx_platform_set_abort>
    23ea:	bf00      	nop
    23ec:	0000899c 	.word	0x0000899c

000023f0 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    23f0:	b510      	push	{r4, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    23f2:	4604      	mov	r4, r0
    23f4:	b918      	cbnz	r0, 23fe <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    23f6:	4b0d      	ldr	r3, [pc, #52]	; (242c <mutex_free_platform+0x3c>)
    23f8:	480d      	ldr	r0, [pc, #52]	; (2430 <mutex_free_platform+0x40>)
    23fa:	685b      	ldr	r3, [r3, #4]
    23fc:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    23fe:	6861      	ldr	r1, [r4, #4]
    2400:	2908      	cmp	r1, #8
    2402:	d00d      	beq.n	2420 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2404:	f031 0304 	bics.w	r3, r1, #4
    2408:	d00a      	beq.n	2420 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    240a:	f011 0102 	ands.w	r1, r1, #2
    240e:	d008      	beq.n	2422 <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    2410:	4621      	mov	r1, r4
    2412:	4808      	ldr	r0, [pc, #32]	; (2434 <mutex_free_platform+0x44>)
    2414:	f005 feec 	bl	81f0 <k_mem_slab_free>
        mutex->mutex = NULL;
    2418:	2300      	movs	r3, #0
    241a:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    241c:	2300      	movs	r3, #0
    241e:	6063      	str	r3, [r4, #4]
}
    2420:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    2422:	2214      	movs	r2, #20
    2424:	6820      	ldr	r0, [r4, #0]
    2426:	f005 faf4 	bl	7a12 <memset>
    242a:	e7f7      	b.n	241c <mutex_free_platform+0x2c>
    242c:	200000e0 	.word	0x200000e0
    2430:	00008e66 	.word	0x00008e66
    2434:	2001fc5c 	.word	0x2001fc5c

00002438 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2438:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    243a:	b340      	cbz	r0, 248e <mutex_lock_platform+0x56>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    243c:	6843      	ldr	r3, [r0, #4]
    243e:	2b04      	cmp	r3, #4
    2440:	d00b      	beq.n	245a <mutex_lock_platform+0x22>
    2442:	2b08      	cmp	r3, #8
    2444:	d016      	beq.n	2474 <mutex_lock_platform+0x3c>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2446:	b303      	cbz	r3, 248a <mutex_lock_platform+0x52>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    2448:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    244a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    244e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2452:	f003 fd67 	bl	5f24 <z_impl_k_mutex_lock>

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
    2456:	b158      	cbz	r0, 2470 <mutex_lock_platform+0x38>
    2458:	e015      	b.n	2486 <mutex_lock_platform+0x4e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    245a:	2201      	movs	r2, #1
    245c:	6803      	ldr	r3, [r0, #0]
    245e:	e8d3 1fef 	ldaex	r1, [r3]
    2462:	2900      	cmp	r1, #0
    2464:	d103      	bne.n	246e <mutex_lock_platform+0x36>
    2466:	e8c3 2fe0 	stlex	r0, r2, [r3]
    246a:	2800      	cmp	r0, #0
    246c:	d1f7      	bne.n	245e <mutex_lock_platform+0x26>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    246e:	d10a      	bne.n	2486 <mutex_lock_platform+0x4e>
    2470:	2000      	movs	r0, #0
            return NRF_CC3XX_PLATFORM_SUCCESS;
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    2472:	bd08      	pop	{r3, pc}
        return nrf_mutex_lock(NRF_MUTEX, *((uint8_t *)mutex->mutex)) ?
    2474:	6803      	ldr	r3, [r0, #0]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_mutex_lock(NRF_MUTEX_Type * p_reg, uint8_t mutex)
{
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
    2476:	4a07      	ldr	r2, [pc, #28]	; (2494 <mutex_lock_platform+0x5c>)
    2478:	781b      	ldrb	r3, [r3, #0]
    247a:	f503 7380 	add.w	r3, r3, #256	; 0x100
    247e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2482:	2b00      	cmp	r3, #0
    2484:	d0f4      	beq.n	2470 <mutex_lock_platform+0x38>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2486:	4804      	ldr	r0, [pc, #16]	; (2498 <mutex_lock_platform+0x60>)
    2488:	e7f3      	b.n	2472 <mutex_lock_platform+0x3a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    248a:	4804      	ldr	r0, [pc, #16]	; (249c <mutex_lock_platform+0x64>)
    248c:	e7f1      	b.n	2472 <mutex_lock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    248e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    2492:	e7ee      	b.n	2472 <mutex_lock_platform+0x3a>
    2494:	50030000 	.word	0x50030000
    2498:	ffff8fe9 	.word	0xffff8fe9
    249c:	ffff8fea 	.word	0xffff8fea

000024a0 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    24a0:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    24a2:	b308      	cbz	r0, 24e8 <mutex_unlock_platform+0x48>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    24a4:	6843      	ldr	r3, [r0, #4]
    24a6:	2b04      	cmp	r3, #4
    24a8:	d007      	beq.n	24ba <mutex_unlock_platform+0x1a>
    24aa:	2b08      	cmp	r3, #8
    24ac:	d013      	beq.n	24d6 <mutex_unlock_platform+0x36>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    24ae:	b1f3      	cbz	r3, 24ee <mutex_unlock_platform+0x4e>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    24b0:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    24b2:	f003 fdaf 	bl	6014 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    24b6:	2000      	movs	r0, #0
    24b8:	e00c      	b.n	24d4 <mutex_unlock_platform+0x34>
    24ba:	2200      	movs	r2, #0
    24bc:	6803      	ldr	r3, [r0, #0]
    24be:	e8d3 1fef 	ldaex	r1, [r3]
    24c2:	2901      	cmp	r1, #1
    24c4:	d103      	bne.n	24ce <mutex_unlock_platform+0x2e>
    24c6:	e8c3 2fe0 	stlex	r0, r2, [r3]
    24ca:	2800      	cmp	r0, #0
    24cc:	d1f7      	bne.n	24be <mutex_unlock_platform+0x1e>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    24ce:	4809      	ldr	r0, [pc, #36]	; (24f4 <mutex_unlock_platform+0x54>)
    24d0:	bf08      	it	eq
    24d2:	4610      	moveq	r0, r2
    }
}
    24d4:	bd08      	pop	{r3, pc}
        nrf_mutex_unlock(NRF_MUTEX, *((uint8_t *)mutex->mutex));
    24d6:	6803      	ldr	r3, [r0, #0]
}

NRF_STATIC_INLINE void nrf_mutex_unlock(NRF_MUTEX_Type * p_reg, uint8_t mutex)
{
    p_reg->MUTEX[mutex] = MUTEX_MUTEX_MUTEX_Unlocked;
    24d8:	2000      	movs	r0, #0
    24da:	781b      	ldrb	r3, [r3, #0]
    24dc:	4a06      	ldr	r2, [pc, #24]	; (24f8 <mutex_unlock_platform+0x58>)
    24de:	f503 7380 	add.w	r3, r3, #256	; 0x100
    24e2:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
        return NRF_CC3XX_PLATFORM_SUCCESS;
    24e6:	e7f5      	b.n	24d4 <mutex_unlock_platform+0x34>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    24e8:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    24ec:	e7f2      	b.n	24d4 <mutex_unlock_platform+0x34>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    24ee:	4803      	ldr	r0, [pc, #12]	; (24fc <mutex_unlock_platform+0x5c>)
    24f0:	e7f0      	b.n	24d4 <mutex_unlock_platform+0x34>
    24f2:	bf00      	nop
    24f4:	ffff8fe9 	.word	0xffff8fe9
    24f8:	50030000 	.word	0x50030000
    24fc:	ffff8fea 	.word	0xffff8fea

00002500 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2500:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    2502:	4604      	mov	r4, r0
    2504:	b918      	cbnz	r0, 250e <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    2506:	4b16      	ldr	r3, [pc, #88]	; (2560 <mutex_init_platform+0x60>)
    2508:	4816      	ldr	r0, [pc, #88]	; (2564 <mutex_init_platform+0x64>)
    250a:	685b      	ldr	r3, [r3, #4]
    250c:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    250e:	6863      	ldr	r3, [r4, #4]
    2510:	2b04      	cmp	r3, #4
    2512:	d023      	beq.n	255c <mutex_init_platform+0x5c>
    2514:	2b08      	cmp	r3, #8
    2516:	d021      	beq.n	255c <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    2518:	b9cb      	cbnz	r3, 254e <mutex_init_platform+0x4e>
    251a:	6823      	ldr	r3, [r4, #0]
    251c:	b9bb      	cbnz	r3, 254e <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    251e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2522:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2526:	4621      	mov	r1, r4
    2528:	480f      	ldr	r0, [pc, #60]	; (2568 <mutex_init_platform+0x68>)
    252a:	f003 fb4f 	bl	5bcc <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    252e:	b908      	cbnz	r0, 2534 <mutex_init_platform+0x34>
    2530:	6823      	ldr	r3, [r4, #0]
    2532:	b91b      	cbnz	r3, 253c <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    2534:	4b0a      	ldr	r3, [pc, #40]	; (2560 <mutex_init_platform+0x60>)
    2536:	480d      	ldr	r0, [pc, #52]	; (256c <mutex_init_platform+0x6c>)
    2538:	685b      	ldr	r3, [r3, #4]
    253a:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    253c:	2214      	movs	r2, #20
    253e:	2100      	movs	r1, #0
    2540:	6820      	ldr	r0, [r4, #0]
    2542:	f005 fa66 	bl	7a12 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    2546:	6863      	ldr	r3, [r4, #4]
    2548:	f043 0302 	orr.w	r3, r3, #2
    254c:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    254e:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    2550:	f005 fea0 	bl	8294 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    2554:	6863      	ldr	r3, [r4, #4]
    2556:	f043 0301 	orr.w	r3, r3, #1
    255a:	6063      	str	r3, [r4, #4]
}
    255c:	bd10      	pop	{r4, pc}
    255e:	bf00      	nop
    2560:	200000e0 	.word	0x200000e0
    2564:	00008e66 	.word	0x00008e66
    2568:	2001fc5c 	.word	0x2001fc5c
    256c:	00008e8c 	.word	0x00008e8c

00002570 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    2570:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    2572:	4906      	ldr	r1, [pc, #24]	; (258c <nrf_cc3xx_platform_mutex_init+0x1c>)
    2574:	2340      	movs	r3, #64	; 0x40
    2576:	2214      	movs	r2, #20
    2578:	4805      	ldr	r0, [pc, #20]	; (2590 <nrf_cc3xx_platform_mutex_init+0x20>)
    257a:	f005 fe1e 	bl	81ba <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    257e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    2582:	4904      	ldr	r1, [pc, #16]	; (2594 <nrf_cc3xx_platform_mutex_init+0x24>)
    2584:	4804      	ldr	r0, [pc, #16]	; (2598 <nrf_cc3xx_platform_mutex_init+0x28>)
    2586:	f004 bc01 	b.w	6d8c <nrf_cc3xx_platform_set_mutexes>
    258a:	bf00      	nop
    258c:	2001fc78 	.word	0x2001fc78
    2590:	2001fc5c 	.word	0x2001fc5c
    2594:	000089b4 	.word	0x000089b4
    2598:	000089a4 	.word	0x000089a4

0000259c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    259c:	4901      	ldr	r1, [pc, #4]	; (25a4 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    259e:	2210      	movs	r2, #16
	str	r2, [r1]
    25a0:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    25a2:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    25a4:	e000ed10 	.word	0xe000ed10

000025a8 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    25a8:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    25aa:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    25ac:	f380 8811 	msr	BASEPRI, r0
	isb
    25b0:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    25b4:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    25b8:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    25ba:	b662      	cpsie	i
	isb
    25bc:	f3bf 8f6f 	isb	sy

	bx	lr
    25c0:	4770      	bx	lr
    25c2:	bf00      	nop

000025c4 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    25c4:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    25c6:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    25c8:	f381 8811 	msr	BASEPRI, r1

	wfe
    25cc:	bf20      	wfe

	msr	BASEPRI, r0
    25ce:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    25d2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    25d4:	4770      	bx	lr
    25d6:	bf00      	nop

000025d8 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    25d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    25dc:	4681      	mov	r9, r0

	if (esf != NULL) {
    25de:	460c      	mov	r4, r1
{
    25e0:	af00      	add	r7, sp, #0
	if (esf != NULL) {
    25e2:	2900      	cmp	r1, #0
    25e4:	d04c      	beq.n	2680 <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    25e6:	e9d1 1200 	ldrd	r1, r2, [r1]
    25ea:	466e      	mov	r6, sp
    25ec:	b08a      	sub	sp, #40	; 0x28
    25ee:	68a3      	ldr	r3, [r4, #8]
    25f0:	466d      	mov	r5, sp
    25f2:	f04f 0a05 	mov.w	sl, #5
    25f6:	46a8      	mov	r8, r5
    25f8:	4825      	ldr	r0, [pc, #148]	; (2690 <z_arm_fatal_error+0xb8>)
    25fa:	e9c5 2307 	strd	r2, r3, [r5, #28]
    25fe:	e9c5 0105 	strd	r0, r1, [r5, #20]
    2602:	f848 af10 	str.w	sl, [r8, #16]!
    2606:	2300      	movs	r3, #0
    2608:	4642      	mov	r2, r8
    260a:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    260e:	4821      	ldr	r0, [pc, #132]	; (2694 <z_arm_fatal_error+0xbc>)
    2610:	f7ff fb3a 	bl	1c88 <z_impl_z_log_msg_static_create>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    2614:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
    2618:	46b5      	mov	sp, r6
    261a:	6963      	ldr	r3, [r4, #20]
    261c:	46ad      	mov	sp, r5
    261e:	481e      	ldr	r0, [pc, #120]	; (2698 <z_arm_fatal_error+0xc0>)
    2620:	e9c5 2307 	strd	r2, r3, [r5, #28]
    2624:	e9c5 0105 	strd	r0, r1, [r5, #20]
    2628:	f8c5 a010 	str.w	sl, [r5, #16]
    262c:	2300      	movs	r3, #0
    262e:	4642      	mov	r2, r8
    2630:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    2634:	4817      	ldr	r0, [pc, #92]	; (2694 <z_arm_fatal_error+0xbc>)
    2636:	f7ff fb27 	bl	1c88 <z_impl_z_log_msg_static_create>
    263a:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    263c:	b088      	sub	sp, #32
    263e:	69e3      	ldr	r3, [r4, #28]
    2640:	466d      	mov	r5, sp
    2642:	f04f 0a03 	mov.w	sl, #3
    2646:	46a8      	mov	r8, r5
    2648:	4a14      	ldr	r2, [pc, #80]	; (269c <z_arm_fatal_error+0xc4>)
    264a:	e9c5 2305 	strd	r2, r3, [r5, #20]
    264e:	f848 af10 	str.w	sl, [r8, #16]!
    2652:	2300      	movs	r3, #0
    2654:	4642      	mov	r2, r8
    2656:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    265a:	480e      	ldr	r0, [pc, #56]	; (2694 <z_arm_fatal_error+0xbc>)
    265c:	f7ff fb14 	bl	1c88 <z_impl_z_log_msg_static_create>
    2660:	46b5      	mov	sp, r6
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    2662:	69a3      	ldr	r3, [r4, #24]
    2664:	46ad      	mov	sp, r5
    2666:	4a0e      	ldr	r2, [pc, #56]	; (26a0 <z_arm_fatal_error+0xc8>)
    2668:	f8c5 a010 	str.w	sl, [r5, #16]
    266c:	e9c5 2305 	strd	r2, r3, [r5, #20]
    2670:	2300      	movs	r3, #0
    2672:	4642      	mov	r2, r8
    2674:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2678:	4806      	ldr	r0, [pc, #24]	; (2694 <z_arm_fatal_error+0xbc>)
    267a:	f7ff fb05 	bl	1c88 <z_impl_z_log_msg_static_create>
    267e:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    2680:	4621      	mov	r1, r4
    2682:	4648      	mov	r0, r9
    2684:	f003 f93c 	bl	5900 <z_fatal_error>
}
    2688:	46bd      	mov	sp, r7
    268a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    268e:	bf00      	nop
    2690:	00008eb9 	.word	0x00008eb9
    2694:	000088dc 	.word	0x000088dc
    2698:	00008ee8 	.word	0x00008ee8
    269c:	00008f17 	.word	0x00008f17
    26a0:	00008f26 	.word	0x00008f26

000026a4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    26a4:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    26a6:	2b00      	cmp	r3, #0
    26a8:	db08      	blt.n	26bc <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    26aa:	2201      	movs	r2, #1
    26ac:	f000 001f 	and.w	r0, r0, #31
    26b0:	fa02 f000 	lsl.w	r0, r2, r0
    26b4:	4a02      	ldr	r2, [pc, #8]	; (26c0 <arch_irq_enable+0x1c>)
    26b6:	095b      	lsrs	r3, r3, #5
    26b8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    26bc:	4770      	bx	lr
    26be:	bf00      	nop
    26c0:	e000e100 	.word	0xe000e100

000026c4 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    26c4:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    26c6:	2b00      	cmp	r3, #0
    26c8:	db0d      	blt.n	26e6 <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    26ca:	2201      	movs	r2, #1
    26cc:	f000 001f 	and.w	r0, r0, #31
    26d0:	fa02 f000 	lsl.w	r0, r2, r0
    26d4:	095b      	lsrs	r3, r3, #5
    26d6:	4a04      	ldr	r2, [pc, #16]	; (26e8 <arch_irq_disable+0x24>)
    26d8:	3320      	adds	r3, #32
    26da:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    26de:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    26e2:	f3bf 8f6f 	isb	sy
}
    26e6:	4770      	bx	lr
    26e8:	e000e100 	.word	0xe000e100

000026ec <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    26ec:	4b05      	ldr	r3, [pc, #20]	; (2704 <arch_irq_is_enabled+0x18>)
    26ee:	0942      	lsrs	r2, r0, #5
    26f0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    26f4:	2301      	movs	r3, #1
    26f6:	f000 001f 	and.w	r0, r0, #31
    26fa:	fa03 f000 	lsl.w	r0, r3, r0
}
    26fe:	4010      	ands	r0, r2
    2700:	4770      	bx	lr
    2702:	bf00      	nop
    2704:	e000e100 	.word	0xe000e100

00002708 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    2708:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    270a:	2b00      	cmp	r3, #0
		prio += _IRQ_PRIO_OFFSET;
    270c:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2710:	bfac      	ite	ge
    2712:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2716:	4b06      	ldrlt	r3, [pc, #24]	; (2730 <z_arm_irq_priority_set+0x28>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2718:	ea4f 1141 	mov.w	r1, r1, lsl #5
    271c:	b2c9      	uxtb	r1, r1
    271e:	bfab      	itete	ge
    2720:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2724:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2728:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    272c:	5419      	strblt	r1, [r3, r0]
}
    272e:	4770      	bx	lr
    2730:	e000ed14 	.word	0xe000ed14

00002734 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    2734:	bf30      	wfi
    b z_SysNmiOnReset
    2736:	f7ff bffd 	b.w	2734 <z_SysNmiOnReset>
    273a:	bf00      	nop

0000273c <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    273c:	4a0b      	ldr	r2, [pc, #44]	; (276c <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    273e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2740:	4b0b      	ldr	r3, [pc, #44]	; (2770 <z_arm_prep_c+0x34>)
    2742:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    2746:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    2748:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    274c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    2750:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2754:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    2758:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    275c:	f003 f968 	bl	5a30 <z_bss_zero>
	z_data_copy();
    2760:	f004 f834 	bl	67cc <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    2764:	f000 fb9e 	bl	2ea4 <z_arm_interrupt_init>
	z_cstart();
    2768:	f003 f9a2 	bl	5ab0 <z_cstart>
    276c:	00000000 	.word	0x00000000
    2770:	e000ed00 	.word	0xe000ed00

00002774 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    2774:	4a09      	ldr	r2, [pc, #36]	; (279c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    2776:	490a      	ldr	r1, [pc, #40]	; (27a0 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    2778:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    277a:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    277c:	6758      	str	r0, [r3, #116]	; 0x74
	_current->arch.swap_return_value = _k_neg_eagain;
    277e:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2780:	4908      	ldr	r1, [pc, #32]	; (27a4 <arch_swap+0x30>)
    2782:	684b      	ldr	r3, [r1, #4]
    2784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2788:	604b      	str	r3, [r1, #4]
    278a:	2300      	movs	r3, #0
    278c:	f383 8811 	msr	BASEPRI, r3
    2790:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    2794:	6893      	ldr	r3, [r2, #8]
}
    2796:	6f98      	ldr	r0, [r3, #120]	; 0x78
    2798:	4770      	bx	lr
    279a:	bf00      	nop
    279c:	2002037c 	.word	0x2002037c
    27a0:	00008b4c 	.word	0x00008b4c
    27a4:	e000ed00 	.word	0xe000ed00

000027a8 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    27a8:	4913      	ldr	r1, [pc, #76]	; (27f8 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    27aa:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    27ac:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    27b0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    27b2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    27b6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    27ba:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    27bc:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    27c0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    27c4:	4f0d      	ldr	r7, [pc, #52]	; (27fc <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    27c6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    27ca:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    27cc:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    27ce:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    27d0:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    27d2:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    27d4:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    27d6:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    27da:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    27de:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    27e2:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    27e6:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    27ea:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    27ec:	f005 f8c9 	bl	7982 <configure_builtin_stack_guard>
    pop {r2, lr}
    27f0:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    27f4:	4770      	bx	lr
    27f6:	0000      	.short	0x0000
    ldr r1, =_kernel
    27f8:	2002037c 	.word	0x2002037c
    ldr v4, =_SCS_ICSR
    27fc:	e000ed04 	.word	0xe000ed04

00002800 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    2800:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    2804:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    2806:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    280a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    280e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    2810:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    2814:	2902      	cmp	r1, #2
    beq _oops
    2816:	d0ff      	beq.n	2818 <_oops>

00002818 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    2818:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    281a:	f005 f8a3 	bl	7964 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    281e:	bd01      	pop	{r0, pc}

00002820 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    2820:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    2824:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    2826:	490b      	ldr	r1, [pc, #44]	; (2854 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
    2828:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    282c:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    282e:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    2832:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    2836:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    2838:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    283c:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    2840:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    2844:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    2848:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    284a:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    284c:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    284e:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    2850:	4770      	bx	lr
    2852:	bf00      	nop
    2854:	000071b7 	.word	0x000071b7

00002858 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    2858:	4b08      	ldr	r3, [pc, #32]	; (287c <arch_switch_to_main_thread+0x24>)
    285a:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    285c:	6e43      	ldr	r3, [r0, #100]	; 0x64
    285e:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    2862:	4610      	mov	r0, r2
    2864:	f381 8809 	msr	PSP, r1
    2868:	2100      	movs	r1, #0
    286a:	b663      	cpsie	if
    286c:	f381 8811 	msr	BASEPRI, r1
    2870:	f3bf 8f6f 	isb	sy
    2874:	2200      	movs	r2, #0
    2876:	2300      	movs	r3, #0
    2878:	f004 fc9d 	bl	71b6 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    287c:	2002037c 	.word	0x2002037c

00002880 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    2880:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    2882:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    2884:	4a0b      	ldr	r2, [pc, #44]	; (28b4 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    2886:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    2888:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    288a:	bf1e      	ittt	ne
	movne	r1, #0
    288c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    288e:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    2890:	f005 fce2 	blne	8258 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    2894:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    2896:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    289a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    289e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    28a2:	4905      	ldr	r1, [pc, #20]	; (28b8 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    28a4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    28a6:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    28a8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    28aa:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    28ae:	4903      	ldr	r1, [pc, #12]	; (28bc <_isr_wrapper+0x3c>)
	bx r1
    28b0:	4708      	bx	r1
    28b2:	0000      	.short	0x0000
	ldr r2, =_kernel
    28b4:	2002037c 	.word	0x2002037c
	ldr r1, =_sw_isr_table
    28b8:	00008650 	.word	0x00008650
	ldr r1, =z_arm_int_exit
    28bc:	000028c1 	.word	0x000028c1

000028c0 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    28c0:	4b04      	ldr	r3, [pc, #16]	; (28d4 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    28c2:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    28c4:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    28c6:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    28c8:	d003      	beq.n	28d2 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    28ca:	4903      	ldr	r1, [pc, #12]	; (28d8 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    28cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    28d0:	600a      	str	r2, [r1, #0]

000028d2 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    28d2:	4770      	bx	lr
	ldr r3, =_kernel
    28d4:	2002037c 	.word	0x2002037c
	ldr r1, =_SCS_ICSR
    28d8:	e000ed04 	.word	0xe000ed04

000028dc <mem_manage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    28dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    28e0:	b086      	sub	sp, #24
    28e2:	4606      	mov	r6, r0
    28e4:	460d      	mov	r5, r1
    28e6:	af00      	add	r7, sp, #0
			      bool *recoverable)
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
    28e8:	2402      	movs	r4, #2
    28ea:	4b41      	ldr	r3, [pc, #260]	; (29f0 <mem_manage_fault.constprop.0+0x114>)
    28ec:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    28f0:	4840      	ldr	r0, [pc, #256]	; (29f4 <mem_manage_fault.constprop.0+0x118>)
    28f2:	f107 0210 	add.w	r2, r7, #16
    28f6:	617b      	str	r3, [r7, #20]
    28f8:	613c      	str	r4, [r7, #16]
    28fa:	f005 f846 	bl	798a <z_log_msg_static_create.constprop.0>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    28fe:	4b3e      	ldr	r3, [pc, #248]	; (29f8 <mem_manage_fault.constprop.0+0x11c>)
    2900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2902:	06db      	lsls	r3, r3, #27
    2904:	d509      	bpl.n	291a <mem_manage_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    2906:	4b3d      	ldr	r3, [pc, #244]	; (29fc <mem_manage_fault.constprop.0+0x120>)
    2908:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    290c:	4839      	ldr	r0, [pc, #228]	; (29f4 <mem_manage_fault.constprop.0+0x118>)
    290e:	f107 0210 	add.w	r2, r7, #16
    2912:	e9c7 4304 	strd	r4, r3, [r7, #16]
    2916:	f005 f838 	bl	798a <z_log_msg_static_create.constprop.0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    291a:	4b37      	ldr	r3, [pc, #220]	; (29f8 <mem_manage_fault.constprop.0+0x11c>)
    291c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    291e:	0718      	lsls	r0, r3, #28
    2920:	d50a      	bpl.n	2938 <mem_manage_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    2922:	4b37      	ldr	r3, [pc, #220]	; (2a00 <mem_manage_fault.constprop.0+0x124>)
    2924:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2928:	617b      	str	r3, [r7, #20]
    292a:	2302      	movs	r3, #2
    292c:	4831      	ldr	r0, [pc, #196]	; (29f4 <mem_manage_fault.constprop.0+0x118>)
    292e:	f107 0210 	add.w	r2, r7, #16
    2932:	613b      	str	r3, [r7, #16]
    2934:	f005 f829 	bl	798a <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    2938:	4c2f      	ldr	r4, [pc, #188]	; (29f8 <mem_manage_fault.constprop.0+0x11c>)
    293a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    293c:	0799      	lsls	r1, r3, #30
    293e:	d522      	bpl.n	2986 <mem_manage_fault.constprop.0+0xaa>
		PR_FAULT_INFO("  Data Access Violation");
    2940:	46e8      	mov	r8, sp
    2942:	4b30      	ldr	r3, [pc, #192]	; (2a04 <mem_manage_fault.constprop.0+0x128>)
    2944:	f107 0210 	add.w	r2, r7, #16
    2948:	617b      	str	r3, [r7, #20]
    294a:	2302      	movs	r3, #2
    294c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2950:	4828      	ldr	r0, [pc, #160]	; (29f4 <mem_manage_fault.constprop.0+0x118>)
    2952:	613b      	str	r3, [r7, #16]
    2954:	f005 f819 	bl	798a <z_log_msg_static_create.constprop.0>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    2958:	6b63      	ldr	r3, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    295a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    295c:	0612      	lsls	r2, r2, #24
    295e:	d512      	bpl.n	2986 <mem_manage_fault.constprop.0+0xaa>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    2960:	b088      	sub	sp, #32
    2962:	466a      	mov	r2, sp
    2964:	4928      	ldr	r1, [pc, #160]	; (2a08 <mem_manage_fault.constprop.0+0x12c>)
    2966:	4823      	ldr	r0, [pc, #140]	; (29f4 <mem_manage_fault.constprop.0+0x118>)
    2968:	e9c2 1305 	strd	r1, r3, [r2, #20]
    296c:	2303      	movs	r3, #3
    296e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2972:	f842 3f10 	str.w	r3, [r2, #16]!
    2976:	f005 f808 	bl	798a <z_log_msg_static_create.constprop.0>
    297a:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    297c:	b11e      	cbz	r6, 2986 <mem_manage_fault.constprop.0+0xaa>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    297e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2980:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    2984:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    2986:	4b1c      	ldr	r3, [pc, #112]	; (29f8 <mem_manage_fault.constprop.0+0x11c>)
    2988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    298a:	07dc      	lsls	r4, r3, #31
    298c:	d50a      	bpl.n	29a4 <mem_manage_fault.constprop.0+0xc8>
		PR_FAULT_INFO("  Instruction Access Violation");
    298e:	4b1f      	ldr	r3, [pc, #124]	; (2a0c <mem_manage_fault.constprop.0+0x130>)
    2990:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2994:	617b      	str	r3, [r7, #20]
    2996:	2302      	movs	r3, #2
    2998:	4816      	ldr	r0, [pc, #88]	; (29f4 <mem_manage_fault.constprop.0+0x118>)
    299a:	f107 0210 	add.w	r2, r7, #16
    299e:	613b      	str	r3, [r7, #16]
    29a0:	f004 fff3 	bl	798a <z_log_msg_static_create.constprop.0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    29a4:	4b14      	ldr	r3, [pc, #80]	; (29f8 <mem_manage_fault.constprop.0+0x11c>)
    29a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    29a8:	0698      	lsls	r0, r3, #26
    29aa:	d50a      	bpl.n	29c2 <mem_manage_fault.constprop.0+0xe6>
		PR_FAULT_INFO(
    29ac:	4b18      	ldr	r3, [pc, #96]	; (2a10 <mem_manage_fault.constprop.0+0x134>)
    29ae:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    29b2:	617b      	str	r3, [r7, #20]
    29b4:	2302      	movs	r3, #2
    29b6:	480f      	ldr	r0, [pc, #60]	; (29f4 <mem_manage_fault.constprop.0+0x118>)
    29b8:	f107 0210 	add.w	r2, r7, #16
    29bc:	613b      	str	r3, [r7, #16]
    29be:	f004 ffe4 	bl	798a <z_log_msg_static_create.constprop.0>

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    29c2:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    29c4:	4b0c      	ldr	r3, [pc, #48]	; (29f8 <mem_manage_fault.constprop.0+0x11c>)

	return reason;
}
    29c6:	3718      	adds	r7, #24
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    29c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    29ca:	06d1      	lsls	r1, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    29cc:	bf58      	it	pl
    29ce:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    29d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    29d2:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    29d4:	bf42      	ittt	mi
    29d6:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    29d8:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    29dc:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    29de:	4a06      	ldr	r2, [pc, #24]	; (29f8 <mem_manage_fault.constprop.0+0x11c>)
    29e0:	6a93      	ldr	r3, [r2, #40]	; 0x28
    29e2:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    29e6:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    29e8:	7028      	strb	r0, [r5, #0]
}
    29ea:	46bd      	mov	sp, r7
    29ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    29f0:	00008f54 	.word	0x00008f54
    29f4:	000088dc 	.word	0x000088dc
    29f8:	e000ed00 	.word	0xe000ed00
    29fc:	00008f6a 	.word	0x00008f6a
    2a00:	00008f9d 	.word	0x00008f9d
    2a04:	00008fb0 	.word	0x00008fb0
    2a08:	00008fc8 	.word	0x00008fc8
    2a0c:	00008fde 	.word	0x00008fde
    2a10:	00008ffd 	.word	0x00008ffd

00002a14 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    2a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2a18:	b086      	sub	sp, #24
    2a1a:	4606      	mov	r6, r0
    2a1c:	460d      	mov	r5, r1
    2a1e:	af00      	add	r7, sp, #0
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    2a20:	2402      	movs	r4, #2
    2a22:	4b3e      	ldr	r3, [pc, #248]	; (2b1c <bus_fault.constprop.0+0x108>)
    2a24:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2a28:	483d      	ldr	r0, [pc, #244]	; (2b20 <bus_fault.constprop.0+0x10c>)
    2a2a:	f107 0210 	add.w	r2, r7, #16
    2a2e:	617b      	str	r3, [r7, #20]
    2a30:	613c      	str	r4, [r7, #16]
    2a32:	f004 ffaa 	bl	798a <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2a36:	4b3b      	ldr	r3, [pc, #236]	; (2b24 <bus_fault.constprop.0+0x110>)
    2a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2a3a:	04d9      	lsls	r1, r3, #19
    2a3c:	d509      	bpl.n	2a52 <bus_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Stacking error");
    2a3e:	4b3a      	ldr	r3, [pc, #232]	; (2b28 <bus_fault.constprop.0+0x114>)
    2a40:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2a44:	4836      	ldr	r0, [pc, #216]	; (2b20 <bus_fault.constprop.0+0x10c>)
    2a46:	f107 0210 	add.w	r2, r7, #16
    2a4a:	e9c7 4304 	strd	r4, r3, [r7, #16]
    2a4e:	f004 ff9c 	bl	798a <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    2a52:	4b34      	ldr	r3, [pc, #208]	; (2b24 <bus_fault.constprop.0+0x110>)
    2a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2a56:	051a      	lsls	r2, r3, #20
    2a58:	d50a      	bpl.n	2a70 <bus_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    2a5a:	4b34      	ldr	r3, [pc, #208]	; (2b2c <bus_fault.constprop.0+0x118>)
    2a5c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2a60:	617b      	str	r3, [r7, #20]
    2a62:	2302      	movs	r3, #2
    2a64:	482e      	ldr	r0, [pc, #184]	; (2b20 <bus_fault.constprop.0+0x10c>)
    2a66:	f107 0210 	add.w	r2, r7, #16
    2a6a:	613b      	str	r3, [r7, #16]
    2a6c:	f004 ff8d 	bl	798a <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    2a70:	4c2c      	ldr	r4, [pc, #176]	; (2b24 <bus_fault.constprop.0+0x110>)
    2a72:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2a74:	059b      	lsls	r3, r3, #22
    2a76:	d522      	bpl.n	2abe <bus_fault.constprop.0+0xaa>
		PR_FAULT_INFO("  Precise data bus error");
    2a78:	46e8      	mov	r8, sp
    2a7a:	4b2d      	ldr	r3, [pc, #180]	; (2b30 <bus_fault.constprop.0+0x11c>)
    2a7c:	4828      	ldr	r0, [pc, #160]	; (2b20 <bus_fault.constprop.0+0x10c>)
    2a7e:	617b      	str	r3, [r7, #20]
    2a80:	2302      	movs	r3, #2
    2a82:	f107 0210 	add.w	r2, r7, #16
    2a86:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2a8a:	613b      	str	r3, [r7, #16]
    2a8c:	f004 ff7d 	bl	798a <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    2a90:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    2a92:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2a94:	0410      	lsls	r0, r2, #16
    2a96:	d512      	bpl.n	2abe <bus_fault.constprop.0+0xaa>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    2a98:	b088      	sub	sp, #32
    2a9a:	466a      	mov	r2, sp
    2a9c:	4925      	ldr	r1, [pc, #148]	; (2b34 <bus_fault.constprop.0+0x120>)
    2a9e:	4820      	ldr	r0, [pc, #128]	; (2b20 <bus_fault.constprop.0+0x10c>)
    2aa0:	e9c2 1305 	strd	r1, r3, [r2, #20]
    2aa4:	2303      	movs	r3, #3
    2aa6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2aaa:	f842 3f10 	str.w	r3, [r2, #16]!
    2aae:	f004 ff6c 	bl	798a <z_log_msg_static_create.constprop.0>
    2ab2:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    2ab4:	b11e      	cbz	r6, 2abe <bus_fault.constprop.0+0xaa>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    2ab6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2ab8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    2abc:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    2abe:	4b19      	ldr	r3, [pc, #100]	; (2b24 <bus_fault.constprop.0+0x110>)
    2ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2ac2:	0559      	lsls	r1, r3, #21
    2ac4:	d50a      	bpl.n	2adc <bus_fault.constprop.0+0xc8>
		PR_FAULT_INFO("  Imprecise data bus error");
    2ac6:	4b1c      	ldr	r3, [pc, #112]	; (2b38 <bus_fault.constprop.0+0x124>)
    2ac8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2acc:	617b      	str	r3, [r7, #20]
    2ace:	2302      	movs	r3, #2
    2ad0:	4813      	ldr	r0, [pc, #76]	; (2b20 <bus_fault.constprop.0+0x10c>)
    2ad2:	f107 0210 	add.w	r2, r7, #16
    2ad6:	613b      	str	r3, [r7, #16]
    2ad8:	f004 ff57 	bl	798a <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    2adc:	4b11      	ldr	r3, [pc, #68]	; (2b24 <bus_fault.constprop.0+0x110>)
    2ade:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2ae0:	05d2      	lsls	r2, r2, #23
    2ae2:	d515      	bpl.n	2b10 <bus_fault.constprop.0+0xfc>
		PR_FAULT_INFO("  Instruction bus error");
    2ae4:	4b15      	ldr	r3, [pc, #84]	; (2b3c <bus_fault.constprop.0+0x128>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    2ae6:	617b      	str	r3, [r7, #20]
    2ae8:	2302      	movs	r3, #2
    2aea:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2aee:	480c      	ldr	r0, [pc, #48]	; (2b20 <bus_fault.constprop.0+0x10c>)
    2af0:	f107 0210 	add.w	r2, r7, #16
    2af4:	613b      	str	r3, [r7, #16]
    2af6:	f004 ff48 	bl	798a <z_log_msg_static_create.constprop.0>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf, true);
    2afa:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2afc:	4a09      	ldr	r2, [pc, #36]	; (2b24 <bus_fault.constprop.0+0x110>)

	return reason;
}
    2afe:	3718      	adds	r7, #24
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2b00:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2b02:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    2b06:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    2b08:	7028      	strb	r0, [r5, #0]
}
    2b0a:	46bd      	mov	sp, r7
    2b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    2b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2b12:	049b      	lsls	r3, r3, #18
    2b14:	d5f1      	bpl.n	2afa <bus_fault.constprop.0+0xe6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    2b16:	4b0a      	ldr	r3, [pc, #40]	; (2b40 <bus_fault.constprop.0+0x12c>)
    2b18:	e7e5      	b.n	2ae6 <bus_fault.constprop.0+0xd2>
    2b1a:	bf00      	nop
    2b1c:	0000902c 	.word	0x0000902c
    2b20:	000088dc 	.word	0x000088dc
    2b24:	e000ed00 	.word	0xe000ed00
    2b28:	00009042 	.word	0x00009042
    2b2c:	00008f9d 	.word	0x00008f9d
    2b30:	00009053 	.word	0x00009053
    2b34:	0000906c 	.word	0x0000906c
    2b38:	00009081 	.word	0x00009081
    2b3c:	0000909c 	.word	0x0000909c
    2b40:	00008ffd 	.word	0x00008ffd

00002b44 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    2b44:	b510      	push	{r4, lr}
    2b46:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    2b48:	2402      	movs	r4, #2
    2b4a:	4b3a      	ldr	r3, [pc, #232]	; (2c34 <usage_fault.constprop.0+0xf0>)
    2b4c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2b50:	4839      	ldr	r0, [pc, #228]	; (2c38 <usage_fault.constprop.0+0xf4>)
    2b52:	aa04      	add	r2, sp, #16
    2b54:	9305      	str	r3, [sp, #20]
    2b56:	9404      	str	r4, [sp, #16]
    2b58:	f004 ff17 	bl	798a <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    2b5c:	4b37      	ldr	r3, [pc, #220]	; (2c3c <usage_fault.constprop.0+0xf8>)
    2b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2b60:	019b      	lsls	r3, r3, #6
    2b62:	d508      	bpl.n	2b76 <usage_fault.constprop.0+0x32>
		PR_FAULT_INFO("  Division by zero");
    2b64:	4b36      	ldr	r3, [pc, #216]	; (2c40 <usage_fault.constprop.0+0xfc>)
    2b66:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2b6a:	4833      	ldr	r0, [pc, #204]	; (2c38 <usage_fault.constprop.0+0xf4>)
    2b6c:	aa04      	add	r2, sp, #16
    2b6e:	e9cd 4304 	strd	r4, r3, [sp, #16]
    2b72:	f004 ff0a 	bl	798a <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    2b76:	4b31      	ldr	r3, [pc, #196]	; (2c3c <usage_fault.constprop.0+0xf8>)
    2b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2b7a:	01dc      	lsls	r4, r3, #7
    2b7c:	d509      	bpl.n	2b92 <usage_fault.constprop.0+0x4e>
		PR_FAULT_INFO("  Unaligned memory access");
    2b7e:	4b31      	ldr	r3, [pc, #196]	; (2c44 <usage_fault.constprop.0+0x100>)
    2b80:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2b84:	9305      	str	r3, [sp, #20]
    2b86:	2302      	movs	r3, #2
    2b88:	482b      	ldr	r0, [pc, #172]	; (2c38 <usage_fault.constprop.0+0xf4>)
    2b8a:	aa04      	add	r2, sp, #16
    2b8c:	9304      	str	r3, [sp, #16]
    2b8e:	f004 fefc 	bl	798a <z_log_msg_static_create.constprop.0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    2b92:	4b2a      	ldr	r3, [pc, #168]	; (2c3c <usage_fault.constprop.0+0xf8>)
    2b94:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    2b96:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
    2b9a:	d009      	beq.n	2bb0 <usage_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    2b9c:	2402      	movs	r4, #2
    2b9e:	4b2a      	ldr	r3, [pc, #168]	; (2c48 <usage_fault.constprop.0+0x104>)
    2ba0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2ba4:	4824      	ldr	r0, [pc, #144]	; (2c38 <usage_fault.constprop.0+0xf4>)
    2ba6:	aa04      	add	r2, sp, #16
    2ba8:	9305      	str	r3, [sp, #20]
    2baa:	9404      	str	r4, [sp, #16]
    2bac:	f004 feed 	bl	798a <z_log_msg_static_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    2bb0:	4b22      	ldr	r3, [pc, #136]	; (2c3c <usage_fault.constprop.0+0xf8>)
    2bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2bb4:	0318      	lsls	r0, r3, #12
    2bb6:	d509      	bpl.n	2bcc <usage_fault.constprop.0+0x88>
		PR_FAULT_INFO("  No coprocessor instructions");
    2bb8:	4b24      	ldr	r3, [pc, #144]	; (2c4c <usage_fault.constprop.0+0x108>)
    2bba:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2bbe:	9305      	str	r3, [sp, #20]
    2bc0:	2302      	movs	r3, #2
    2bc2:	481d      	ldr	r0, [pc, #116]	; (2c38 <usage_fault.constprop.0+0xf4>)
    2bc4:	aa04      	add	r2, sp, #16
    2bc6:	9304      	str	r3, [sp, #16]
    2bc8:	f004 fedf 	bl	798a <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    2bcc:	4b1b      	ldr	r3, [pc, #108]	; (2c3c <usage_fault.constprop.0+0xf8>)
    2bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2bd0:	0359      	lsls	r1, r3, #13
    2bd2:	d509      	bpl.n	2be8 <usage_fault.constprop.0+0xa4>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    2bd4:	4b1e      	ldr	r3, [pc, #120]	; (2c50 <usage_fault.constprop.0+0x10c>)
    2bd6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2bda:	9305      	str	r3, [sp, #20]
    2bdc:	2302      	movs	r3, #2
    2bde:	4816      	ldr	r0, [pc, #88]	; (2c38 <usage_fault.constprop.0+0xf4>)
    2be0:	aa04      	add	r2, sp, #16
    2be2:	9304      	str	r3, [sp, #16]
    2be4:	f004 fed1 	bl	798a <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    2be8:	4b14      	ldr	r3, [pc, #80]	; (2c3c <usage_fault.constprop.0+0xf8>)
    2bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2bec:	039a      	lsls	r2, r3, #14
    2bee:	d509      	bpl.n	2c04 <usage_fault.constprop.0+0xc0>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    2bf0:	4b18      	ldr	r3, [pc, #96]	; (2c54 <usage_fault.constprop.0+0x110>)
    2bf2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2bf6:	9305      	str	r3, [sp, #20]
    2bf8:	2302      	movs	r3, #2
    2bfa:	480f      	ldr	r0, [pc, #60]	; (2c38 <usage_fault.constprop.0+0xf4>)
    2bfc:	aa04      	add	r2, sp, #16
    2bfe:	9304      	str	r3, [sp, #16]
    2c00:	f004 fec3 	bl	798a <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    2c04:	4b0d      	ldr	r3, [pc, #52]	; (2c3c <usage_fault.constprop.0+0xf8>)
    2c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2c08:	03db      	lsls	r3, r3, #15
    2c0a:	d509      	bpl.n	2c20 <usage_fault.constprop.0+0xdc>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    2c0c:	4b12      	ldr	r3, [pc, #72]	; (2c58 <usage_fault.constprop.0+0x114>)
    2c0e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2c12:	9305      	str	r3, [sp, #20]
    2c14:	2302      	movs	r3, #2
    2c16:	4808      	ldr	r0, [pc, #32]	; (2c38 <usage_fault.constprop.0+0xf4>)
    2c18:	aa04      	add	r2, sp, #16
    2c1a:	9304      	str	r3, [sp, #16]
    2c1c:	f004 feb5 	bl	798a <z_log_msg_static_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2c20:	4a06      	ldr	r2, [pc, #24]	; (2c3c <usage_fault.constprop.0+0xf8>)

	return reason;
}
    2c22:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2c24:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2c26:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    2c2a:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    2c2e:	6293      	str	r3, [r2, #40]	; 0x28
}
    2c30:	b006      	add	sp, #24
    2c32:	bd10      	pop	{r4, pc}
    2c34:	000090b4 	.word	0x000090b4
    2c38:	000088dc 	.word	0x000088dc
    2c3c:	e000ed00 	.word	0xe000ed00
    2c40:	000090cc 	.word	0x000090cc
    2c44:	000090df 	.word	0x000090df
    2c48:	000090f9 	.word	0x000090f9
    2c4c:	00009123 	.word	0x00009123
    2c50:	00009141 	.word	0x00009141
    2c54:	00009166 	.word	0x00009166
    2c58:	00009180 	.word	0x00009180

00002c5c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    2c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2c60:	b08b      	sub	sp, #44	; 0x2c
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2c62:	4b78      	ldr	r3, [pc, #480]	; (2e44 <z_arm_fault+0x1e8>)
{
    2c64:	460e      	mov	r6, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2c66:	f8d3 8004 	ldr.w	r8, [r3, #4]
    2c6a:	2500      	movs	r5, #0
{
    2c6c:	af00      	add	r7, sp, #0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2c6e:	f3c8 0408 	ubfx	r4, r8, #0, #9
    2c72:	f385 8811 	msr	BASEPRI, r5
    2c76:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    2c7a:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    2c7e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    2c82:	d10e      	bne.n	2ca2 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    2c84:	f002 030c 	and.w	r3, r2, #12
    2c88:	2b08      	cmp	r3, #8
    2c8a:	d10c      	bne.n	2ca6 <z_arm_fault+0x4a>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    2c8c:	4b6e      	ldr	r3, [pc, #440]	; (2e48 <z_arm_fault+0x1ec>)
    2c8e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2c92:	61fb      	str	r3, [r7, #28]
    2c94:	2302      	movs	r3, #2
    2c96:	486d      	ldr	r0, [pc, #436]	; (2e4c <z_arm_fault+0x1f0>)
    2c98:	f107 0218 	add.w	r2, r7, #24
    2c9c:	61bb      	str	r3, [r7, #24]
    2c9e:	f004 fe74 	bl	798a <z_log_msg_static_create.constprop.0>
		return NULL;
    2ca2:	462e      	mov	r6, r5
    2ca4:	e003      	b.n	2cae <z_arm_fault+0x52>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    2ca6:	0712      	lsls	r2, r2, #28
    2ca8:	d401      	bmi.n	2cae <z_arm_fault+0x52>
			ptr_esf = (z_arch_esf_t *)msp;
    2caa:	4606      	mov	r6, r0
			*nested_exc = true;
    2cac:	2501      	movs	r5, #1
	*recoverable = false;
    2cae:	2300      	movs	r3, #0
    2cb0:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
    2cb2:	1ee3      	subs	r3, r4, #3
    2cb4:	2b09      	cmp	r3, #9
    2cb6:	f200 80a4 	bhi.w	2e02 <z_arm_fault+0x1a6>
    2cba:	e8df f003 	tbb	[pc, r3]
    2cbe:	9705      	.short	0x9705
    2cc0:	a2a2949a 	.word	0xa2a2949a
    2cc4:	9da2a2a2 	.word	0x9da2a2a2
	PR_FAULT_INFO("***** HARD FAULT *****");
    2cc8:	46e9      	mov	r9, sp
    2cca:	f04f 0a02 	mov.w	sl, #2
	*recoverable = false;
    2cce:	f04f 0b00 	mov.w	fp, #0
	PR_FAULT_INFO("***** HARD FAULT *****");
    2cd2:	4b5f      	ldr	r3, [pc, #380]	; (2e50 <z_arm_fault+0x1f4>)
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2cd4:	f8df 816c 	ldr.w	r8, [pc, #364]	; 2e44 <z_arm_fault+0x1e8>
	PR_FAULT_INFO("***** HARD FAULT *****");
    2cd8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2cdc:	485b      	ldr	r0, [pc, #364]	; (2e4c <z_arm_fault+0x1f0>)
    2cde:	f107 0218 	add.w	r2, r7, #24
    2ce2:	61fb      	str	r3, [r7, #28]
    2ce4:	f8c7 a018 	str.w	sl, [r7, #24]
    2ce8:	f004 fe4f 	bl	798a <z_log_msg_static_create.constprop.0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2cec:	f8d8 402c 	ldr.w	r4, [r8, #44]	; 0x2c
	*recoverable = false;
    2cf0:	f887 b007 	strb.w	fp, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2cf4:	ea14 040a 	ands.w	r4, r4, sl
    2cf8:	d00b      	beq.n	2d12 <z_arm_fault+0xb6>
		PR_EXC("  Bus fault on vector table read");
    2cfa:	4b56      	ldr	r3, [pc, #344]	; (2e54 <z_arm_fault+0x1f8>)
    2cfc:	e9c7 a306 	strd	sl, r3, [r7, #24]
	PR_FAULT_INFO(
    2d00:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2d04:	4851      	ldr	r0, [pc, #324]	; (2e4c <z_arm_fault+0x1f0>)
    2d06:	f107 0218 	add.w	r2, r7, #24
    2d0a:	f004 fe3e 	bl	798a <z_log_msg_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    2d0e:	2400      	movs	r4, #0
}
    2d10:	e00d      	b.n	2d2e <z_arm_fault+0xd2>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    2d12:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
    2d16:	2b00      	cmp	r3, #0
    2d18:	da25      	bge.n	2d66 <z_arm_fault+0x10a>
		PR_EXC("  Debug event");
    2d1a:	4b4f      	ldr	r3, [pc, #316]	; (2e58 <z_arm_fault+0x1fc>)
    2d1c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2d20:	484a      	ldr	r0, [pc, #296]	; (2e4c <z_arm_fault+0x1f0>)
    2d22:	f107 0218 	add.w	r2, r7, #24
    2d26:	e9c7 a306 	strd	sl, r3, [r7, #24]
    2d2a:	f004 fe2e 	bl	798a <z_log_msg_static_create.constprop.0>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    2d2e:	79fb      	ldrb	r3, [r7, #7]
    2d30:	b9ab      	cbnz	r3, 2d5e <z_arm_fault+0x102>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    2d32:	2220      	movs	r2, #32
    2d34:	4631      	mov	r1, r6
    2d36:	f107 0008 	add.w	r0, r7, #8
    2d3a:	f004 fe5f 	bl	79fc <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    2d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2d40:	2d00      	cmp	r5, #0
    2d42:	d079      	beq.n	2e38 <z_arm_fault+0x1dc>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    2d44:	f3c3 0208 	ubfx	r2, r3, #0, #9
    2d48:	b922      	cbnz	r2, 2d54 <z_arm_fault+0xf8>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    2d4a:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    2d4e:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2d52:	627b      	str	r3, [r7, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    2d54:	4620      	mov	r0, r4
    2d56:	f107 0108 	add.w	r1, r7, #8
    2d5a:	f7ff fc3d 	bl	25d8 <z_arm_fatal_error>
}
    2d5e:	372c      	adds	r7, #44	; 0x2c
    2d60:	46bd      	mov	sp, r7
    2d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    2d66:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
    2d6a:	005b      	lsls	r3, r3, #1
    2d6c:	d5df      	bpl.n	2d2e <z_arm_fault+0xd2>
		PR_EXC("  Fault escalation (see below)");
    2d6e:	4b3b      	ldr	r3, [pc, #236]	; (2e5c <z_arm_fault+0x200>)
    2d70:	f107 0218 	add.w	r2, r7, #24
    2d74:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2d78:	4834      	ldr	r0, [pc, #208]	; (2e4c <z_arm_fault+0x1f0>)
    2d7a:	e9c7 a306 	strd	sl, r3, [r7, #24]
    2d7e:	f004 fe04 	bl	798a <z_log_msg_static_create.constprop.0>
	uint16_t fault_insn = *(ret_addr - 1);
    2d82:	69b3      	ldr	r3, [r6, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    2d84:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    2d88:	f64d 7302 	movw	r3, #57090	; 0xdf02
    2d8c:	429a      	cmp	r2, r3
    2d8e:	d009      	beq.n	2da4 <z_arm_fault+0x148>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    2d90:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
    2d94:	b2db      	uxtb	r3, r3
    2d96:	b1b3      	cbz	r3, 2dc6 <z_arm_fault+0x16a>
			reason = mem_manage_fault(esf, 1, recoverable);
    2d98:	2001      	movs	r0, #1
    2d9a:	1df9      	adds	r1, r7, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    2d9c:	f7ff fd9e 	bl	28dc <mem_manage_fault.constprop.0>
    2da0:	4604      	mov	r4, r0
		break;
    2da2:	e7c4      	b.n	2d2e <z_arm_fault+0xd2>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    2da4:	b088      	sub	sp, #32
    2da6:	466a      	mov	r2, sp
    2da8:	6833      	ldr	r3, [r6, #0]
    2daa:	492d      	ldr	r1, [pc, #180]	; (2e60 <z_arm_fault+0x204>)
    2dac:	4827      	ldr	r0, [pc, #156]	; (2e4c <z_arm_fault+0x1f0>)
    2dae:	e9c2 1305 	strd	r1, r3, [r2, #20]
    2db2:	2303      	movs	r3, #3
    2db4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2db8:	f842 3f10 	str.w	r3, [r2, #16]!
    2dbc:	f004 fde5 	bl	798a <z_log_msg_static_create.constprop.0>
    2dc0:	46cd      	mov	sp, r9
			reason = esf->basic.r0;
    2dc2:	6834      	ldr	r4, [r6, #0]
    2dc4:	e7b3      	b.n	2d2e <z_arm_fault+0xd2>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    2dc6:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
    2dca:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
    2dce:	d004      	beq.n	2dda <z_arm_fault+0x17e>
			reason = bus_fault(esf, 1, recoverable);
    2dd0:	2001      	movs	r0, #1
    2dd2:	1df9      	adds	r1, r7, #7
		reason = bus_fault(esf, 0, recoverable);
    2dd4:	f7ff fe1e 	bl	2a14 <bus_fault.constprop.0>
    2dd8:	e7e2      	b.n	2da0 <z_arm_fault+0x144>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    2dda:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
    2dde:	0c1b      	lsrs	r3, r3, #16
    2de0:	041b      	lsls	r3, r3, #16
    2de2:	2b00      	cmp	r3, #0
    2de4:	d0a3      	beq.n	2d2e <z_arm_fault+0xd2>
		reason = usage_fault(esf);
    2de6:	f7ff fead 	bl	2b44 <usage_fault.constprop.0>
    2dea:	e7d9      	b.n	2da0 <z_arm_fault+0x144>
		reason = mem_manage_fault(esf, 0, recoverable);
    2dec:	2000      	movs	r0, #0
    2dee:	1df9      	adds	r1, r7, #7
    2df0:	e7d4      	b.n	2d9c <z_arm_fault+0x140>
		reason = bus_fault(esf, 0, recoverable);
    2df2:	2000      	movs	r0, #0
    2df4:	1df9      	adds	r1, r7, #7
    2df6:	e7ed      	b.n	2dd4 <z_arm_fault+0x178>
	PR_FAULT_INFO(
    2df8:	4b1a      	ldr	r3, [pc, #104]	; (2e64 <z_arm_fault+0x208>)
    2dfa:	61fb      	str	r3, [r7, #28]
    2dfc:	2302      	movs	r3, #2
    2dfe:	61bb      	str	r3, [r7, #24]
    2e00:	e77e      	b.n	2d00 <z_arm_fault+0xa4>
	PR_FAULT_INFO("***** %s %d) *****",
    2e02:	4a19      	ldr	r2, [pc, #100]	; (2e68 <z_arm_fault+0x20c>)
    2e04:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    2e08:	46e8      	mov	r8, sp
    2e0a:	b08a      	sub	sp, #40	; 0x28
    2e0c:	4b17      	ldr	r3, [pc, #92]	; (2e6c <z_arm_fault+0x210>)
    2e0e:	bf18      	it	ne
    2e10:	4613      	movne	r3, r2
    2e12:	466a      	mov	r2, sp
    2e14:	4916      	ldr	r1, [pc, #88]	; (2e70 <z_arm_fault+0x214>)
    2e16:	3c10      	subs	r4, #16
    2e18:	e9c2 1305 	strd	r1, r3, [r2, #20]
    2e1c:	2302      	movs	r3, #2
    2e1e:	f882 3020 	strb.w	r3, [r2, #32]
    2e22:	4b14      	ldr	r3, [pc, #80]	; (2e74 <z_arm_fault+0x218>)
    2e24:	61d4      	str	r4, [r2, #28]
    2e26:	f44f 5109 	mov.w	r1, #8768	; 0x2240
    2e2a:	4808      	ldr	r0, [pc, #32]	; (2e4c <z_arm_fault+0x1f0>)
    2e2c:	f842 3f10 	str.w	r3, [r2, #16]!
    2e30:	f004 fdab 	bl	798a <z_log_msg_static_create.constprop.0>
    2e34:	46c5      	mov	sp, r8
    2e36:	e76a      	b.n	2d0e <z_arm_fault+0xb2>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2e38:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    2e3c:	f023 0301 	bic.w	r3, r3, #1
    2e40:	e787      	b.n	2d52 <z_arm_fault+0xf6>
    2e42:	bf00      	nop
    2e44:	e000ed00 	.word	0xe000ed00
    2e48:	000091d9 	.word	0x000091d9
    2e4c:	000088dc 	.word	0x000088dc
    2e50:	00009204 	.word	0x00009204
    2e54:	0000921b 	.word	0x0000921b
    2e58:	0000923c 	.word	0x0000923c
    2e5c:	0000924a 	.word	0x0000924a
    2e60:	00009269 	.word	0x00009269
    2e64:	00009285 	.word	0x00009285
    2e68:	000091c0 	.word	0x000091c0
    2e6c:	000091ab 	.word	0x000091ab
    2e70:	000092a9 	.word	0x000092a9
    2e74:	01000004 	.word	0x01000004

00002e78 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    2e78:	4b04      	ldr	r3, [pc, #16]	; (2e8c <z_arm_fault_init+0x14>)
    2e7a:	695a      	ldr	r2, [r3, #20]
    2e7c:	f042 0210 	orr.w	r2, r2, #16
    2e80:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    2e82:	695a      	ldr	r2, [r3, #20]
    2e84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    2e88:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    2e8a:	4770      	bx	lr
    2e8c:	e000ed00 	.word	0xe000ed00

00002e90 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    2e90:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    2e94:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    2e98:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    2e9a:	4672      	mov	r2, lr
	bl z_arm_fault
    2e9c:	f7ff fede 	bl	2c5c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    2ea0:	bd01      	pop	{r0, pc}
    2ea2:	bf00      	nop

00002ea4 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    2ea4:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2ea6:	2120      	movs	r1, #32
    2ea8:	4803      	ldr	r0, [pc, #12]	; (2eb8 <z_arm_interrupt_init+0x14>)
    2eaa:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    2eac:	3301      	adds	r3, #1
    2eae:	2b45      	cmp	r3, #69	; 0x45
    2eb0:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    2eb4:	d1f9      	bne.n	2eaa <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    2eb6:	4770      	bx	lr
    2eb8:	e000e100 	.word	0xe000e100

00002ebc <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    2ebc:	2000      	movs	r0, #0
    msr CONTROL, r0
    2ebe:	f380 8814 	msr	CONTROL, r0
    isb
    2ec2:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    2ec6:	2000      	movs	r0, #0
    msr MSPLIM, r0
    2ec8:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    2ecc:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    2ed0:	f7fe fc76 	bl	17c0 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    2ed4:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    2ed6:	490e      	ldr	r1, [pc, #56]	; (2f10 <__start+0x54>)
    str r0, [r1]
    2ed8:	6008      	str	r0, [r1, #0]
    dsb
    2eda:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2ede:	480d      	ldr	r0, [pc, #52]	; (2f14 <__start+0x58>)
    msr msp, r0
    2ee0:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    2ee4:	f000 f83e 	bl	2f64 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2ee8:	2020      	movs	r0, #32
    msr BASEPRI, r0
    2eea:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    2eee:	480a      	ldr	r0, [pc, #40]	; (2f18 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    2ef0:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    2ef4:	1840      	adds	r0, r0, r1
    msr PSP, r0
    2ef6:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    2efa:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    2efe:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    2f00:	4308      	orrs	r0, r1
    msr CONTROL, r0
    2f02:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    2f06:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    2f0a:	f7ff fc17 	bl	273c <z_arm_prep_c>
    2f0e:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    2f10:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2f14:	20020c98 	.word	0x20020c98
    ldr r0, =z_interrupt_stacks
    2f18:	20020dd8 	.word	0x20020dd8

00002f1c <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    2f1c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2f20:	4905      	ldr	r1, [pc, #20]	; (2f38 <sys_arch_reboot+0x1c>)
    2f22:	4b06      	ldr	r3, [pc, #24]	; (2f3c <sys_arch_reboot+0x20>)
    2f24:	68ca      	ldr	r2, [r1, #12]
    2f26:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2f2a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2f2c:	60cb      	str	r3, [r1, #12]
    2f2e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    2f32:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2f34:	e7fd      	b.n	2f32 <sys_arch_reboot+0x16>
    2f36:	bf00      	nop
    2f38:	e000ed00 	.word	0xe000ed00
    2f3c:	05fa0004 	.word	0x05fa0004

00002f40 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    2f40:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    2f42:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    2f44:	4906      	ldr	r1, [pc, #24]	; (2f60 <z_arm_clear_arm_mpu_config+0x20>)
    2f46:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
    2f4a:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
    2f4e:	4293      	cmp	r3, r2
    2f50:	d100      	bne.n	2f54 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    2f52:	4770      	bx	lr
  mpu->RNR = rnr;
    2f54:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
    2f58:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    2f5c:	3301      	adds	r3, #1
    2f5e:	e7f6      	b.n	2f4e <z_arm_clear_arm_mpu_config+0xe>
    2f60:	e000ed00 	.word	0xe000ed00

00002f64 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    2f64:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    2f66:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    2f68:	2400      	movs	r4, #0
    2f6a:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    2f6e:	f7ff ffe7 	bl	2f40 <z_arm_clear_arm_mpu_config>
    2f72:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    2f74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2f78:	4a0b      	ldr	r2, [pc, #44]	; (2fa8 <z_arm_init_arch_hw_at_boot+0x44>)
    2f7a:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    2f7e:	3301      	adds	r3, #1
    2f80:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    2f82:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    2f86:	d1f8      	bne.n	2f7a <z_arm_init_arch_hw_at_boot+0x16>
    2f88:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    2f8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2f8e:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    2f92:	3301      	adds	r3, #1
    2f94:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    2f96:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    2f9a:	d1f8      	bne.n	2f8e <z_arm_init_arch_hw_at_boot+0x2a>
  __ASM volatile ("cpsie i" : : : "memory");
    2f9c:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    2f9e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2fa2:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    2fa6:	bd10      	pop	{r4, pc}
    2fa8:	e000e100 	.word	0xe000e100

00002fac <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    2fac:	4b08      	ldr	r3, [pc, #32]	; (2fd0 <z_impl_k_thread_abort+0x24>)
    2fae:	689b      	ldr	r3, [r3, #8]
    2fb0:	4283      	cmp	r3, r0
    2fb2:	d10b      	bne.n	2fcc <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    2fb4:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    2fb8:	b143      	cbz	r3, 2fcc <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2fba:	4b06      	ldr	r3, [pc, #24]	; (2fd4 <z_impl_k_thread_abort+0x28>)
    2fbc:	685a      	ldr	r2, [r3, #4]
    2fbe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    2fc2:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    2fc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    2fc6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    2fca:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    2fcc:	f003 bb9e 	b.w	670c <z_thread_abort>
    2fd0:	2002037c 	.word	0x2002037c
    2fd4:	e000ed00 	.word	0xe000ed00

00002fd8 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    2fd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    2fda:	4c09      	ldr	r4, [pc, #36]	; (3000 <z_arm_configure_static_mpu_regions+0x28>)
    2fdc:	4a09      	ldr	r2, [pc, #36]	; (3004 <z_arm_configure_static_mpu_regions+0x2c>)
    2fde:	4623      	mov	r3, r4
    2fe0:	2101      	movs	r1, #1
    2fe2:	4809      	ldr	r0, [pc, #36]	; (3008 <z_arm_configure_static_mpu_regions+0x30>)
    2fe4:	f000 f92a 	bl	323c <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    2fe8:	2300      	movs	r3, #0
    2fea:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    2fec:	4b07      	ldr	r3, [pc, #28]	; (300c <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    2fee:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    2ff0:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    2ff2:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    2ff4:	9301      	str	r3, [sp, #4]
    2ff6:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    2ff8:	f000 f92a 	bl	3250 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    2ffc:	b004      	add	sp, #16
    2ffe:	bd10      	pop	{r4, pc}
    3000:	20070000 	.word	0x20070000
    3004:	20000000 	.word	0x20000000
    3008:	000089c8 	.word	0x000089c8
    300c:	200001d8 	.word	0x200001d8

00003010 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    3010:	b510      	push	{r4, lr}
	mpu_set_region(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    3012:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    3014:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    3016:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    301a:	f004 031f 	and.w	r3, r4, #31
    301e:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    3020:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    3022:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    3024:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = rnr;
    3028:	4905      	ldr	r1, [pc, #20]	; (3040 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    302a:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    302e:	f043 0301 	orr.w	r3, r3, #1
	MPU->RNR = rnr;
    3032:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	MPU->RBAR = rbar;
    3036:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
	MPU->RLAR = rlar;
    303a:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    303e:	bd10      	pop	{r4, pc}
    3040:	e000ed00 	.word	0xe000ed00

00003044 <region_allocate_and_init.part.0>:
#include "arm_mpu_v8_internal.h"
#else
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
    3044:	b580      	push	{r7, lr}
    3046:	af00      	add	r7, sp, #0
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    3048:	b088      	sub	sp, #32
    304a:	466a      	mov	r2, sp
    304c:	4b07      	ldr	r3, [pc, #28]	; (306c <region_allocate_and_init.part.0+0x28>)
    304e:	e9c2 3005 	strd	r3, r0, [r2, #20]
    3052:	2303      	movs	r3, #3
    3054:	f842 3f10 	str.w	r3, [r2, #16]!
    3058:	2300      	movs	r3, #0
    305a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    305e:	4804      	ldr	r0, [pc, #16]	; (3070 <region_allocate_and_init.part.0+0x2c>)
    3060:	f7fe fe12 	bl	1c88 <z_impl_z_log_msg_static_create>

	/* Program region */
	region_init(index, region_conf);

	return index;
}
    3064:	f06f 0015 	mvn.w	r0, #21
    3068:	46bd      	mov	sp, r7
    306a:	bd80      	pop	{r7, pc}
    306c:	000092c0 	.word	0x000092c0
    3070:	000088d4 	.word	0x000088d4

00003074 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    3074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3078:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    307a:	4606      	mov	r6, r0
    307c:	f04f 0900 	mov.w	r9, #0
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    3080:	b087      	sub	sp, #28
	MPU->RNR = rnr;
    3082:	4d5f      	ldr	r5, [pc, #380]	; (3200 <mpu_configure_regions_and_partition.constprop.0+0x18c>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    3084:	af00      	add	r7, sp, #0
    3086:	6079      	str	r1, [r7, #4]
	for (i = 0; i < regions_num; i++) {
    3088:	687b      	ldr	r3, [r7, #4]
    308a:	4599      	cmp	r9, r3
    308c:	da35      	bge.n	30fa <mpu_configure_regions_and_partition.constprop.0+0x86>
		if (regions[i].size == 0U) {
    308e:	f8d6 8004 	ldr.w	r8, [r6, #4]
    3092:	f1b8 0f00 	cmp.w	r8, #0
    3096:	d054      	beq.n	3142 <mpu_configure_regions_and_partition.constprop.0+0xce>
		&&
    3098:	f1b8 0f1f 	cmp.w	r8, #31
    309c:	d91b      	bls.n	30d6 <mpu_configure_regions_and_partition.constprop.0+0x62>
		&&
    309e:	f018 0f1f 	tst.w	r8, #31
    30a2:	d118      	bne.n	30d6 <mpu_configure_regions_and_partition.constprop.0+0x62>
		((part->start &
    30a4:	f8d6 b000 	ldr.w	fp, [r6]
		&&
    30a8:	f01b 0f1f 	tst.w	fp, #31
    30ac:	d113      	bne.n	30d6 <mpu_configure_regions_and_partition.constprop.0+0x62>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    30ae:	4658      	mov	r0, fp
    30b0:	f004 fc6e 	bl	7990 <arm_cmse_mpu_region_get>
    30b4:	4682      	mov	sl, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    30b6:	eb08 000b 	add.w	r0, r8, fp
    30ba:	3801      	subs	r0, #1
    30bc:	f004 fc68 	bl	7990 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    30c0:	4582      	cmp	sl, r0
    30c2:	d01f      	beq.n	3104 <mpu_configure_regions_and_partition.constprop.0+0x90>
	return -EINVAL;
    30c4:	f06f 0a15 	mvn.w	sl, #21
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    30c8:	466c      	mov	r4, sp
    30ca:	b088      	sub	sp, #32
    30cc:	466a      	mov	r2, sp
    30ce:	494d      	ldr	r1, [pc, #308]	; (3204 <mpu_configure_regions_and_partition.constprop.0+0x190>)
    30d0:	e9c2 1a05 	strd	r1, sl, [r2, #20]
    30d4:	e005      	b.n	30e2 <mpu_configure_regions_and_partition.constprop.0+0x6e>
			LOG_ERR("Partition %u: sanity check failed.", i);
    30d6:	466c      	mov	r4, sp
    30d8:	b088      	sub	sp, #32
    30da:	466a      	mov	r2, sp
    30dc:	4b4a      	ldr	r3, [pc, #296]	; (3208 <mpu_configure_regions_and_partition.constprop.0+0x194>)
    30de:	e9c2 3905 	strd	r3, r9, [r2, #20]
			LOG_ERR("Invalid underlying region index %u",
    30e2:	2303      	movs	r3, #3
    30e4:	f842 3f10 	str.w	r3, [r2, #16]!
    30e8:	2300      	movs	r3, #0
    30ea:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    30ee:	4847      	ldr	r0, [pc, #284]	; (320c <mpu_configure_regions_and_partition.constprop.0+0x198>)
    30f0:	f7fe fdca 	bl	1c88 <z_impl_z_log_msg_static_create>
    30f4:	46a5      	mov	sp, r4

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    30f6:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    30fa:	4620      	mov	r0, r4
    30fc:	371c      	adds	r7, #28
    30fe:	46bd      	mov	sp, r7
    3100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    3104:	f11a 0f16 	cmn.w	sl, #22
    3108:	d0de      	beq.n	30c8 <mpu_configure_regions_and_partition.constprop.0+0x54>
    310a:	4554      	cmp	r4, sl
    310c:	dddc      	ble.n	30c8 <mpu_configure_regions_and_partition.constprop.0+0x54>
	MPU->RNR = rnr;
    310e:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
    3112:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
	MPU->RNR = rnr;
    3116:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RLAR;
    311a:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    311e:	f020 001f 	bic.w	r0, r0, #31
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    3122:	f042 081f 	orr.w	r8, r2, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    3126:	e9d6 1200 	ldrd	r1, r2, [r6]
    312a:	440a      	add	r2, r1
		if ((regions[i].start == u_reg_base) &&
    312c:	4288      	cmp	r0, r1
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    312e:	f102 3bff 	add.w	fp, r2, #4294967295	; 0xffffffff
		if ((regions[i].start == u_reg_base) &&
    3132:	d11e      	bne.n	3172 <mpu_configure_regions_and_partition.constprop.0+0xfe>
    3134:	45d8      	cmp	r8, fp
    3136:	d108      	bne.n	314a <mpu_configure_regions_and_partition.constprop.0+0xd6>
			mpu_configure_region(u_reg_index, &regions[i]);
    3138:	4631      	mov	r1, r6
    313a:	fa5f f08a 	uxtb.w	r0, sl
    313e:	f004 fc30 	bl	79a2 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    3142:	f109 0901 	add.w	r9, r9, #1
    3146:	360c      	adds	r6, #12
    3148:	e79e      	b.n	3088 <mpu_configure_regions_and_partition.constprop.0+0x14>
				mpu_configure_region(reg_index, &regions[i]);
    314a:	4631      	mov	r1, r6
	MPU->RNR = rnr;
    314c:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
    3150:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		     | (base & MPU_RBAR_BASE_Msk));
    3154:	f022 021f 	bic.w	r2, r2, #31
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
    3158:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
    315c:	4313      	orrs	r3, r2
	MPU->RBAR = rbar;
    315e:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
    3162:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    3164:	f004 fc1d 	bl	79a2 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    3168:	f110 0f16 	cmn.w	r0, #22
    316c:	d0c3      	beq.n	30f6 <mpu_configure_regions_and_partition.constprop.0+0x82>
			reg_index++;
    316e:	1c44      	adds	r4, r0, #1
    3170:	e7e7      	b.n	3142 <mpu_configure_regions_and_partition.constprop.0+0xce>
				regions[i].start - 1);
    3172:	3901      	subs	r1, #1
		} else if (reg_last == u_reg_last) {
    3174:	45d8      	cmp	r8, fp
				mpu_configure_region(reg_index, &regions[i]);
    3176:	b2e0      	uxtb	r0, r4
		     | (limit & MPU_RLAR_LIMIT_Msk));
    3178:	f021 011f 	bic.w	r1, r1, #31
	MPU->RNR = rnr;
    317c:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
		} else if (reg_last == u_reg_last) {
    3180:	d108      	bne.n	3194 <mpu_configure_regions_and_partition.constprop.0+0x120>
	return MPU->RLAR;
    3182:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    3186:	f003 031f 	and.w	r3, r3, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    318a:	4319      	orrs	r1, r3
	MPU->RLAR = rlar;
    318c:	f8c5 10a0 	str.w	r1, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    3190:	4631      	mov	r1, r6
    3192:	e7e7      	b.n	3164 <mpu_configure_regions_and_partition.constprop.0+0xf0>
	return MPU->RLAR;
    3194:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    3198:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    319c:	4311      	orrs	r1, r2
	MPU->RLAR = rlar;
    319e:	f8c5 10a0 	str.w	r1, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    31a2:	4631      	mov	r1, r6
    31a4:	f004 fbfd 	bl	79a2 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    31a8:	f110 0f16 	cmn.w	r0, #22
    31ac:	d0a3      	beq.n	30f6 <mpu_configure_regions_and_partition.constprop.0+0x82>
	MPU->RNR = rnr;
    31ae:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
    31b2:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    31b6:	7c3b      	ldrb	r3, [r7, #16]
			REGION_LIMIT_ADDR((regions[i].start +
    31b8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
	attr->rbar = mpu_get_rbar() &
    31bc:	f362 0304 	bfi	r3, r2, #0, #5
    31c0:	743b      	strb	r3, [r7, #16]
	return MPU->RLAR;
    31c2:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    31c6:	7c3a      	ldrb	r2, [r7, #16]
    31c8:	085b      	lsrs	r3, r3, #1
    31ca:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i].start +
    31ce:	e9d6 3100 	ldrd	r3, r1, [r6]
    31d2:	440b      	add	r3, r1
    31d4:	60bb      	str	r3, [r7, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    31d6:	f023 031f 	bic.w	r3, r3, #31
    31da:	4443      	add	r3, r8
			reg_index++;
    31dc:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    31de:	eba3 0b0b 	sub.w	fp, r3, fp
				region_allocate_and_init(reg_index,
    31e2:	b2e0      	uxtb	r0, r4
			REGION_LIMIT_ADDR((regions[i].start +
    31e4:	f02b 031f 	bic.w	r3, fp, #31
	if (index > (get_num_regions() - 1U)) {
    31e8:	2807      	cmp	r0, #7
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    31ea:	743a      	strb	r2, [r7, #16]
			fill_region.attr.r_limit =
    31ec:	617b      	str	r3, [r7, #20]
    31ee:	d902      	bls.n	31f6 <mpu_configure_regions_and_partition.constprop.0+0x182>
    31f0:	f7ff ff28 	bl	3044 <region_allocate_and_init.part.0>
    31f4:	e7b8      	b.n	3168 <mpu_configure_regions_and_partition.constprop.0+0xf4>
	region_init(index, region_conf);
    31f6:	f107 0108 	add.w	r1, r7, #8
    31fa:	f7ff ff09 	bl	3010 <region_init>
			if (reg_index == -EINVAL) {
    31fe:	e7b6      	b.n	316e <mpu_configure_regions_and_partition.constprop.0+0xfa>
    3200:	e000ed00 	.word	0xe000ed00
    3204:	00009309 	.word	0x00009309
    3208:	000092e6 	.word	0x000092e6
    320c:	000088d4 	.word	0x000088d4

00003210 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    3210:	2205      	movs	r2, #5
    3212:	4b04      	ldr	r3, [pc, #16]	; (3224 <arm_core_mpu_enable+0x14>)
    3214:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    3218:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    321c:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    3220:	4770      	bx	lr
    3222:	bf00      	nop
    3224:	e000ed00 	.word	0xe000ed00

00003228 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    3228:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    322c:	2200      	movs	r2, #0
    322e:	4b02      	ldr	r3, [pc, #8]	; (3238 <arm_core_mpu_disable+0x10>)
    3230:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    3234:	4770      	bx	lr
    3236:	bf00      	nop
    3238:	e000ed00 	.word	0xe000ed00

0000323c <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    323c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    323e:	4c03      	ldr	r4, [pc, #12]	; (324c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    3240:	7822      	ldrb	r2, [r4, #0]
    3242:	f7ff ff17 	bl	3074 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    3246:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    3248:	bd10      	pop	{r4, pc}
    324a:	bf00      	nop
    324c:	20020590 	.word	0x20020590

00003250 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
    3250:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3254:	4d29      	ldr	r5, [pc, #164]	; (32fc <arm_core_mpu_mark_areas_for_dynamic_regions+0xac>)
    3256:	468a      	mov	sl, r1

/* This internal function marks and stores the configuration of memory areas
 * where dynamic region programming is allowed. Return zero on success, or
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
    3258:	4606      	mov	r6, r0
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    325a:	f04f 0800 	mov.w	r8, #0
    325e:	46ab      	mov	fp, r5
	MPU->RNR = rnr;
    3260:	4f27      	ldr	r7, [pc, #156]	; (3300 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    3262:	45d0      	cmp	r8, sl
    3264:	da1b      	bge.n	329e <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    3266:	f8d6 9004 	ldr.w	r9, [r6, #4]
    326a:	f1b9 0f00 	cmp.w	r9, #0
    326e:	d03f      	beq.n	32f0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    3270:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    3272:	4608      	mov	r0, r1
    3274:	9101      	str	r1, [sp, #4]
    3276:	f004 fb8b 	bl	7990 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    327a:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    327c:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    327e:	eb09 0001 	add.w	r0, r9, r1
    3282:	3801      	subs	r0, #1
    3284:	f004 fb84 	bl	7990 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    3288:	4284      	cmp	r4, r0
    328a:	f04f 0214 	mov.w	r2, #20
    328e:	4b1d      	ldr	r3, [pc, #116]	; (3304 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb4>)
    3290:	d008      	beq.n	32a4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
    3292:	f06f 0315 	mvn.w	r3, #21
    3296:	fb02 f808 	mul.w	r8, r2, r8
    329a:	f84b 3008 	str.w	r3, [fp, r8]
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
    329e:	b003      	add	sp, #12
    32a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    32a4:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    32a8:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    32aa:	d0f8      	beq.n	329e <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    32ac:	7819      	ldrb	r1, [r3, #0]
    32ae:	42a1      	cmp	r1, r4
    32b0:	ddf5      	ble.n	329e <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = mpu_get_rbar() &
    32b2:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = rnr;
    32b6:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
    32ba:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	return MPU->RBAR;
    32be:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    32c2:	f100 0108 	add.w	r1, r0, #8
    32c6:	7b00      	ldrb	r0, [r0, #12]
    32c8:	f364 0004 	bfi	r0, r4, #0, #5
    32cc:	7108      	strb	r0, [r1, #4]
	return MPU->RLAR;
    32ce:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    32d2:	790c      	ldrb	r4, [r1, #4]
    32d4:	0840      	lsrs	r0, r0, #1
    32d6:	f360 1447 	bfi	r4, r0, #5, #3
    32da:	710c      	strb	r4, [r1, #4]
	return MPU->RBAR;
    32dc:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    32e0:	f021 011f 	bic.w	r1, r1, #31
    32e4:	6069      	str	r1, [r5, #4]
	return MPU->RLAR;
    32e6:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
    32ea:	f021 011f 	bic.w	r1, r1, #31
    32ee:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    32f0:	f108 0801 	add.w	r8, r8, #1
    32f4:	3514      	adds	r5, #20
    32f6:	360c      	adds	r6, #12
    32f8:	e7b3      	b.n	3262 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    32fa:	bf00      	nop
    32fc:	20020178 	.word	0x20020178
    3300:	e000ed00 	.word	0xe000ed00
    3304:	20020590 	.word	0x20020590

00003308 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    3308:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    330a:	4d0e      	ldr	r5, [pc, #56]	; (3344 <z_arm_mpu_init+0x3c>)
    330c:	682c      	ldr	r4, [r5, #0]
    330e:	2c08      	cmp	r4, #8
    3310:	d815      	bhi.n	333e <z_arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3312:	2000      	movs	r0, #0
	arm_core_mpu_disable();
    3314:	f7ff ff88 	bl	3228 <arm_core_mpu_disable>
	MPU->MAIR0 = mair0;
    3318:	4b0b      	ldr	r3, [pc, #44]	; (3348 <z_arm_mpu_init+0x40>)
    331a:	4a0c      	ldr	r2, [pc, #48]	; (334c <z_arm_mpu_init+0x44>)
    331c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3320:	4284      	cmp	r4, r0
    3322:	d105      	bne.n	3330 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    3324:	4b0a      	ldr	r3, [pc, #40]	; (3350 <z_arm_mpu_init+0x48>)
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    3326:	2000      	movs	r0, #0
	static_regions_num = mpu_config.num_regions;
    3328:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    332a:	f7ff ff71 	bl	3210 <arm_core_mpu_enable>
}
    332e:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    3330:	6869      	ldr	r1, [r5, #4]
    3332:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    3336:	f7ff fe6b 	bl	3010 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    333a:	3001      	adds	r0, #1
    333c:	e7f0      	b.n	3320 <z_arm_mpu_init+0x18>
		return -1;
    333e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3342:	e7f4      	b.n	332e <z_arm_mpu_init+0x26>
    3344:	000089d4 	.word	0x000089d4
    3348:	e000ed00 	.word	0xe000ed00
    334c:	0044ffaa 	.word	0x0044ffaa
    3350:	20020590 	.word	0x20020590

00003354 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    3354:	4b01      	ldr	r3, [pc, #4]	; (335c <__stdout_hook_install+0x8>)
    3356:	6018      	str	r0, [r3, #0]
}
    3358:	4770      	bx	lr
    335a:	bf00      	nop
    335c:	2000002c 	.word	0x2000002c

00003360 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    3360:	4b08      	ldr	r3, [pc, #32]	; (3384 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    3362:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    3364:	1ac3      	subs	r3, r0, r3
{
    3366:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    3368:	4907      	ldr	r1, [pc, #28]	; (3388 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    336a:	109b      	asrs	r3, r3, #2
{
    336c:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    336e:	4359      	muls	r1, r3
    3370:	2240      	movs	r2, #64	; 0x40
    3372:	4806      	ldr	r0, [pc, #24]	; (338c <onoff_stop+0x2c>)
    3374:	f004 fb75 	bl	7a62 <stop>
	notify(mgr, res);
    3378:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    337a:	4601      	mov	r1, r0
	notify(mgr, res);
    337c:	4620      	mov	r0, r4
}
    337e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    3382:	4718      	bx	r3
    3384:	2002019c 	.word	0x2002019c
    3388:	b6db6db7 	.word	0xb6db6db7
    338c:	000085c0 	.word	0x000085c0

00003390 <onoff_start>:
static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    3390:	2340      	movs	r3, #64	; 0x40
{
    3392:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    3394:	4c0b      	ldr	r4, [pc, #44]	; (33c4 <onoff_start+0x34>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    3396:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
    3398:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    339a:	460b      	mov	r3, r1
{
    339c:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    339e:	490a      	ldr	r1, [pc, #40]	; (33c8 <onoff_start+0x38>)
	size_t offset = (size_t)(mgr - data->mgr);
    33a0:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    33a2:	4361      	muls	r1, r4
{
    33a4:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    33a6:	4a09      	ldr	r2, [pc, #36]	; (33cc <onoff_start+0x3c>)
    33a8:	4809      	ldr	r0, [pc, #36]	; (33d0 <onoff_start+0x40>)
    33aa:	f004 fb87 	bl	7abc <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    33ae:	1e01      	subs	r1, r0, #0
    33b0:	da05      	bge.n	33be <onoff_start+0x2e>
		notify(mgr, err);
    33b2:	4630      	mov	r0, r6
    33b4:	462b      	mov	r3, r5
	}
}
    33b6:	b002      	add	sp, #8
    33b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    33bc:	4718      	bx	r3
}
    33be:	b002      	add	sp, #8
    33c0:	bd70      	pop	{r4, r5, r6, pc}
    33c2:	bf00      	nop
    33c4:	2002019c 	.word	0x2002019c
    33c8:	b6db6db7 	.word	0xb6db6db7
    33cc:	00007b2b 	.word	0x00007b2b
    33d0:	000085c0 	.word	0x000085c0

000033d4 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    33d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    33d8:	2200      	movs	r2, #0
    33da:	2101      	movs	r1, #1
{
    33dc:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    33de:	2005      	movs	r0, #5
    33e0:	f7ff f992 	bl	2708 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    33e4:	4814      	ldr	r0, [pc, #80]	; (3438 <clk_init+0x64>)
    33e6:	f001 fc67 	bl	4cb8 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    33ea:	4b14      	ldr	r3, [pc, #80]	; (343c <clk_init+0x68>)
    33ec:	4298      	cmp	r0, r3
    33ee:	d11f      	bne.n	3430 <clk_init+0x5c>

#if NRF_CLOCK_HAS_HFCLKAUDIO
NRF_STATIC_INLINE
void nrf_clock_hfclkaudio_config_set(NRF_CLOCK_Type * p_reg, uint16_t freq_value)
{
    p_reg->HFCLKAUDIO.FREQUENCY = freq_value;
    33f0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    33f4:	f649 32a5 	movw	r2, #39845	; 0x9ba5
    33f8:	f8c3 255c 	str.w	r2, [r3, #1372]	; 0x55c
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    33fc:	f004 fe04 	bl	8008 <nrfx_clock_enable>
    3400:	2400      	movs	r4, #0
	return &data->mgr[type];
    3402:	f04f 081c 	mov.w	r8, #28
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    3406:	270c      	movs	r7, #12
		err = onoff_manager_init(get_onoff_manager(dev, i),
    3408:	f8df 9034 	ldr.w	r9, [pc, #52]	; 3440 <clk_init+0x6c>
	struct nrf_clock_control_data *data = dev->data;
    340c:	6935      	ldr	r5, [r6, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    340e:	4649      	mov	r1, r9
    3410:	fb08 5004 	mla	r0, r8, r4, r5
    3414:	f003 fe4e 	bl	70b4 <onoff_manager_init>
		if (err < 0) {
    3418:	2800      	cmp	r0, #0
    341a:	db07      	blt.n	342c <clk_init+0x58>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    341c:	2301      	movs	r3, #1
    341e:	fb07 5504 	mla	r5, r7, r4, r5
	for (enum clock_control_nrf_type i = 0;
    3422:	441c      	add	r4, r3
    3424:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    3426:	67ab      	str	r3, [r5, #120]	; 0x78
	for (enum clock_control_nrf_type i = 0;
    3428:	d1f0      	bne.n	340c <clk_init+0x38>
	}

	return 0;
    342a:	2000      	movs	r0, #0
}
    342c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    3430:	f06f 0004 	mvn.w	r0, #4
    3434:	e7fa      	b.n	342c <clk_init+0x58>
    3436:	bf00      	nop
    3438:	00003479 	.word	0x00003479
    343c:	0bad0000 	.word	0x0bad0000
    3440:	00008a48 	.word	0x00008a48

00003444 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    3444:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    3446:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    3448:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
    344a:	434b      	muls	r3, r1
    344c:	4808      	ldr	r0, [pc, #32]	; (3470 <clkstarted_handle.constprop.0+0x2c>)
static void clkstarted_handle(const struct device *dev,
    344e:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    3450:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    3452:	3378      	adds	r3, #120	; 0x78
	void *user_data = sub_data->user_data;
    3454:	e9d4 561c 	ldrd	r5, r6, [r4, #112]	; 0x70
	set_on_state(&sub_data->flags);
    3458:	4418      	add	r0, r3
	sub_data->cb = NULL;
    345a:	6722      	str	r2, [r4, #112]	; 0x70
	set_on_state(&sub_data->flags);
    345c:	f004 faee 	bl	7a3c <set_on_state>
	if (callback) {
    3460:	b12d      	cbz	r5, 346e <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    3462:	4632      	mov	r2, r6
    3464:	462b      	mov	r3, r5
}
    3466:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    346a:	4802      	ldr	r0, [pc, #8]	; (3474 <clkstarted_handle.constprop.0+0x30>)
    346c:	4718      	bx	r3
}
    346e:	bd70      	pop	{r4, r5, r6, pc}
    3470:	2002019c 	.word	0x2002019c
    3474:	000085c0 	.word	0x000085c0

00003478 <clock_event_handler>:
	switch (event) {
    3478:	2805      	cmp	r0, #5
    347a:	d811      	bhi.n	34a0 <clock_event_handler+0x28>
    347c:	e8df f000 	tbb	[pc, r0]
    3480:	10100e03 	.word	0x10100e03
    3484:	0a0c      	.short	0x0a0c
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    3486:	4b07      	ldr	r3, [pc, #28]	; (34a4 <clock_event_handler+0x2c>)
    3488:	6f98      	ldr	r0, [r3, #120]	; 0x78
    348a:	f010 0007 	ands.w	r0, r0, #7
    348e:	d107      	bne.n	34a0 <clock_event_handler+0x28>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    3490:	f7ff bfd8 	b.w	3444 <clkstarted_handle.constprop.0>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
    3494:	2002      	movs	r0, #2
    3496:	e7fb      	b.n	3490 <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
    3498:	2003      	movs	r0, #3
    349a:	e7f9      	b.n	3490 <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    349c:	2001      	movs	r0, #1
    349e:	e7f7      	b.n	3490 <clock_event_handler+0x18>
}
    34a0:	4770      	bx	lr
    34a2:	bf00      	nop
    34a4:	2002019c 	.word	0x2002019c

000034a8 <generic_hfclk_start>:
{
    34a8:	b508      	push	{r3, lr}
	__asm__ volatile(
    34aa:	f04f 0320 	mov.w	r3, #32
    34ae:	f3ef 8111 	mrs	r1, BASEPRI
    34b2:	f383 8812 	msr	BASEPRI_MAX, r3
    34b6:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    34ba:	4a12      	ldr	r2, [pc, #72]	; (3504 <generic_hfclk_start+0x5c>)
    34bc:	6813      	ldr	r3, [r2, #0]
    34be:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    34c2:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    34c6:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    34c8:	d00c      	beq.n	34e4 <generic_hfclk_start+0x3c>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    34ca:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    34ce:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    34d2:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    34d6:	f013 0301 	ands.w	r3, r3, #1
    34da:	d003      	beq.n	34e4 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    34dc:	480a      	ldr	r0, [pc, #40]	; (3508 <generic_hfclk_start+0x60>)
    34de:	f004 faad 	bl	7a3c <set_on_state>
			already_started = true;
    34e2:	2301      	movs	r3, #1
	__asm__ volatile(
    34e4:	f381 8811 	msr	BASEPRI, r1
    34e8:	f3bf 8f6f 	isb	sy
	if (already_started) {
    34ec:	b123      	cbz	r3, 34f8 <generic_hfclk_start+0x50>
}
    34ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    34f2:	2000      	movs	r0, #0
    34f4:	f7ff bfa6 	b.w	3444 <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    34f8:	2001      	movs	r0, #1
}
    34fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    34fe:	f004 bd95 	b.w	802c <nrfx_clock_start>
    3502:	bf00      	nop
    3504:	2002023c 	.word	0x2002023c
    3508:	20020214 	.word	0x20020214

0000350c <api_blocking_start>:
{
    350c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    350e:	2200      	movs	r2, #0
    3510:	2301      	movs	r3, #1
    3512:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3516:	466b      	mov	r3, sp
    3518:	4a08      	ldr	r2, [pc, #32]	; (353c <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    351a:	f8cd d000 	str.w	sp, [sp]
    351e:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3522:	f004 fafb 	bl	7b1c <api_start>
	if (err < 0) {
    3526:	2800      	cmp	r0, #0
    3528:	db05      	blt.n	3536 <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
    352a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    352e:	2300      	movs	r3, #0
    3530:	4668      	mov	r0, sp
    3532:	f002 fdcb 	bl	60cc <z_impl_k_sem_take>
}
    3536:	b005      	add	sp, #20
    3538:	f85d fb04 	ldr.w	pc, [sp], #4
    353c:	00007b61 	.word	0x00007b61

00003540 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3540:	4b07      	ldr	r3, [pc, #28]	; (3560 <generic_hfclk_stop+0x20>)
    3542:	e8d3 2fef 	ldaex	r2, [r3]
    3546:	f022 0102 	bic.w	r1, r2, #2
    354a:	e8c3 1fe0 	stlex	r0, r1, [r3]
    354e:	2800      	cmp	r0, #0
    3550:	d1f7      	bne.n	3542 <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    3552:	07d3      	lsls	r3, r2, #31
    3554:	d402      	bmi.n	355c <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    3556:	2001      	movs	r0, #1
    3558:	f004 bdc8 	b.w	80ec <nrfx_clock_stop>
}
    355c:	4770      	bx	lr
    355e:	bf00      	nop
    3560:	2002023c 	.word	0x2002023c

00003564 <z_nrf_clock_control_get_onoff>:
	return &data->mgr[type];
    3564:	b2c3      	uxtb	r3, r0
}
    3566:	201c      	movs	r0, #28
    3568:	4a01      	ldr	r2, [pc, #4]	; (3570 <z_nrf_clock_control_get_onoff+0xc>)
    356a:	fb03 2000 	mla	r0, r3, r0, r2
    356e:	4770      	bx	lr
    3570:	2002019c 	.word	0x2002019c

00003574 <z_nrf_clock_control_lf_on>:
{
    3574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    3578:	2201      	movs	r2, #1
    357a:	4607      	mov	r7, r0
    357c:	4937      	ldr	r1, [pc, #220]	; (365c <z_nrf_clock_control_lf_on+0xe8>)
    357e:	e8d1 3fef 	ldaex	r3, [r1]
    3582:	e8c1 2fe0 	stlex	r0, r2, [r1]
    3586:	2800      	cmp	r0, #0
    3588:	d1f9      	bne.n	357e <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    358a:	b933      	cbnz	r3, 359a <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    358c:	4934      	ldr	r1, [pc, #208]	; (3660 <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
    358e:	4835      	ldr	r0, [pc, #212]	; (3664 <z_nrf_clock_control_lf_on+0xf0>)
    3590:	604b      	str	r3, [r1, #4]
    3592:	60cb      	str	r3, [r1, #12]
    3594:	608a      	str	r2, [r1, #8]
    3596:	f003 fda0 	bl	70da <onoff_request>
	switch (start_mode) {
    359a:	1e7b      	subs	r3, r7, #1
    359c:	2b01      	cmp	r3, #1
    359e:	d82f      	bhi.n	3600 <z_nrf_clock_control_lf_on+0x8c>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    35a0:	2f01      	cmp	r7, #1
    35a2:	d107      	bne.n	35b4 <z_nrf_clock_control_lf_on+0x40>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    35a4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    35a8:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    35ac:	f003 0303 	and.w	r3, r3, #3
    35b0:	2b02      	cmp	r3, #2
    35b2:	d025      	beq.n	3600 <z_nrf_clock_control_lf_on+0x8c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    35b4:	f004 fe45 	bl	8242 <k_is_in_isr>
    35b8:	4604      	mov	r4, r0
    35ba:	b918      	cbnz	r0, 35c4 <z_nrf_clock_control_lf_on+0x50>
	return !z_sys_post_kernel;
    35bc:	4b2a      	ldr	r3, [pc, #168]	; (3668 <z_nrf_clock_control_lf_on+0xf4>)
	int key = isr_mode ? irq_lock() : 0;
    35be:	781b      	ldrb	r3, [r3, #0]
    35c0:	2b00      	cmp	r3, #0
    35c2:	d144      	bne.n	364e <z_nrf_clock_control_lf_on+0xda>
	__asm__ volatile(
    35c4:	f04f 0320 	mov.w	r3, #32
    35c8:	f3ef 8611 	mrs	r6, BASEPRI
    35cc:	f383 8812 	msr	BASEPRI_MAX, r3
    35d0:	f3bf 8f6f 	isb	sy
    35d4:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    35d6:	f04f 2550 	mov.w	r5, #1342197760	; 0x50005000
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    35da:	f8df 8090 	ldr.w	r8, [pc, #144]	; 366c <z_nrf_clock_control_lf_on+0xf8>
    35de:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    35e2:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    35e6:	03d2      	lsls	r2, r2, #15
    35e8:	d50c      	bpl.n	3604 <z_nrf_clock_control_lf_on+0x90>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    35ea:	f003 0303 	and.w	r3, r3, #3
    35ee:	2b02      	cmp	r3, #2
    35f0:	d001      	beq.n	35f6 <z_nrf_clock_control_lf_on+0x82>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    35f2:	2f01      	cmp	r7, #1
    35f4:	d106      	bne.n	3604 <z_nrf_clock_control_lf_on+0x90>
	if (isr_mode) {
    35f6:	b324      	cbz	r4, 3642 <z_nrf_clock_control_lf_on+0xce>
	__asm__ volatile(
    35f8:	f386 8811 	msr	BASEPRI, r6
    35fc:	f3bf 8f6f 	isb	sy
}
    3600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    3604:	b1c4      	cbz	r4, 3638 <z_nrf_clock_control_lf_on+0xc4>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    3606:	4630      	mov	r0, r6
    3608:	f7fe ffdc 	bl	25c4 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    360c:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    3610:	b2db      	uxtb	r3, r3
    3612:	2b01      	cmp	r3, #1
    3614:	d1e3      	bne.n	35de <z_nrf_clock_control_lf_on+0x6a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3616:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    361a:	2a00      	cmp	r2, #0
    361c:	d0df      	beq.n	35de <z_nrf_clock_control_lf_on+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    361e:	2200      	movs	r2, #0
    3620:	f8c5 2104 	str.w	r2, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    3624:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    3628:	2202      	movs	r2, #2
    362a:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
    362e:	2220      	movs	r2, #32
    3630:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3634:	60ab      	str	r3, [r5, #8]
}
    3636:	e7d2      	b.n	35de <z_nrf_clock_control_lf_on+0x6a>
	return z_impl_k_sleep(timeout);
    3638:	2100      	movs	r1, #0
    363a:	2021      	movs	r0, #33	; 0x21
    363c:	f003 f846 	bl	66cc <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    3640:	e7e4      	b.n	360c <z_nrf_clock_control_lf_on+0x98>
    p_reg->INTENSET = mask;
    3642:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3646:	2202      	movs	r2, #2
    3648:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    364c:	e7d8      	b.n	3600 <z_nrf_clock_control_lf_on+0x8c>
    p_reg->INTENCLR = mask;
    364e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3652:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
    3654:	4606      	mov	r6, r0
    3656:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    365a:	e7bc      	b.n	35d6 <z_nrf_clock_control_lf_on+0x62>
    365c:	20020240 	.word	0x20020240
    3660:	2002018c 	.word	0x2002018c
    3664:	200201b8 	.word	0x200201b8
    3668:	20020593 	.word	0x20020593
    366c:	e000e100 	.word	0xe000e100

00003670 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    3670:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    3672:	4808      	ldr	r0, [pc, #32]	; (3694 <uart_console_init+0x24>)
    3674:	4b08      	ldr	r3, [pc, #32]	; (3698 <uart_console_init+0x28>)
    3676:	6018      	str	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    3678:	f004 fd91 	bl	819e <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    367c:	b138      	cbz	r0, 368e <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    367e:	4807      	ldr	r0, [pc, #28]	; (369c <uart_console_init+0x2c>)
    3680:	f7ff fe68 	bl	3354 <__stdout_hook_install>
	__printk_hook_install(console_out);
    3684:	4805      	ldr	r0, [pc, #20]	; (369c <uart_console_init+0x2c>)
    3686:	f7fd faa3 	bl	bd0 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    368a:	2000      	movs	r0, #0
}
    368c:	bd08      	pop	{r3, pc}
		return -ENODEV;
    368e:	f06f 0012 	mvn.w	r0, #18
    3692:	e7fb      	b.n	368c <uart_console_init+0x1c>
    3694:	00008608 	.word	0x00008608
    3698:	20020244 	.word	0x20020244
    369c:	000036a1 	.word	0x000036a1

000036a0 <console_out>:
	if ('\n' == c) {
    36a0:	280a      	cmp	r0, #10
{
    36a2:	b538      	push	{r3, r4, r5, lr}
    36a4:	4604      	mov	r4, r0
    36a6:	4d07      	ldr	r5, [pc, #28]	; (36c4 <console_out+0x24>)
	if ('\n' == c) {
    36a8:	d104      	bne.n	36b4 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    36aa:	6828      	ldr	r0, [r5, #0]
    36ac:	6883      	ldr	r3, [r0, #8]
    36ae:	210d      	movs	r1, #13
    36b0:	685b      	ldr	r3, [r3, #4]
    36b2:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    36b4:	6828      	ldr	r0, [r5, #0]
    36b6:	6883      	ldr	r3, [r0, #8]
    36b8:	b2e1      	uxtb	r1, r4
    36ba:	685b      	ldr	r3, [r3, #4]
    36bc:	4798      	blx	r3
}
    36be:	4620      	mov	r0, r4
    36c0:	bd38      	pop	{r3, r4, r5, pc}
    36c2:	bf00      	nop
    36c4:	20020244 	.word	0x20020244

000036c8 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    36c8:	b530      	push	{r4, r5, lr}
	return port->config;
    36ca:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    36cc:	f001 051f 	and.w	r5, r1, #31
    36d0:	7b04      	ldrb	r4, [r0, #12]
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    36d2:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    36d6:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
    36da:	b085      	sub	sp, #20
    36dc:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
    36e0:	d105      	bne.n	36ee <gpio_nrfx_pin_interrupt_configure+0x26>
		nrfx_gpiote_trigger_disable(abs_pin);
    36e2:	4628      	mov	r0, r5
    36e4:	f001 fda4 	bl	5230 <nrfx_gpiote_trigger_disable>
		return -EINVAL;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
    36e8:	2000      	movs	r0, #0
}
    36ea:	b005      	add	sp, #20
    36ec:	bd30      	pop	{r4, r5, pc}
	if (mode == GPIO_INT_MODE_LEVEL) {
    36ee:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    36f2:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    36f6:	d133      	bne.n	3760 <gpio_nrfx_pin_interrupt_configure+0x98>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    36f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    36fc:	bf0c      	ite	eq
    36fe:	2304      	moveq	r3, #4
    3700:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    3702:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    3706:	6883      	ldr	r3, [r0, #8]
    3708:	fa23 f101 	lsr.w	r1, r3, r1
    370c:	07c9      	lsls	r1, r1, #31
    370e:	d419      	bmi.n	3744 <gpio_nrfx_pin_interrupt_configure+0x7c>
    3710:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    3714:	d116      	bne.n	3744 <gpio_nrfx_pin_interrupt_configure+0x7c>
        case 1: return NRF_P1;
    3716:	4a1e      	ldr	r2, [pc, #120]	; (3790 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    3718:	481e      	ldr	r0, [pc, #120]	; (3794 <gpio_nrfx_pin_interrupt_configure+0xcc>)
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    371a:	0969      	lsrs	r1, r5, #5
        case 1: return NRF_P1;
    371c:	2901      	cmp	r1, #1
    371e:	bf08      	it	eq
    3720:	4602      	moveq	r2, r0
    *p_pin = pin_number & 0x1F;
    3722:	f005 031f 	and.w	r3, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    3726:	3380      	adds	r3, #128	; 0x80
    3728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    372c:	07db      	lsls	r3, r3, #31
    372e:	d409      	bmi.n	3744 <gpio_nrfx_pin_interrupt_configure+0x7c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    3730:	f10d 0407 	add.w	r4, sp, #7
    3734:	4621      	mov	r1, r4
    3736:	4628      	mov	r0, r5
    3738:	f001 fce0 	bl	50fc <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    373c:	4b16      	ldr	r3, [pc, #88]	; (3798 <gpio_nrfx_pin_interrupt_configure+0xd0>)
    373e:	4298      	cmp	r0, r3
    3740:	d019      	beq.n	3776 <gpio_nrfx_pin_interrupt_configure+0xae>
		trigger_config.p_in_channel = &ch;
    3742:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    3744:	2300      	movs	r3, #0
    3746:	4628      	mov	r0, r5
    3748:	4619      	mov	r1, r3
    374a:	aa02      	add	r2, sp, #8
    374c:	f001 fbb0 	bl	4eb0 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    3750:	4b12      	ldr	r3, [pc, #72]	; (379c <gpio_nrfx_pin_interrupt_configure+0xd4>)
    3752:	4298      	cmp	r0, r3
    3754:	d118      	bne.n	3788 <gpio_nrfx_pin_interrupt_configure+0xc0>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    3756:	2101      	movs	r1, #1
    3758:	4628      	mov	r0, r5
    375a:	f001 fd23 	bl	51a4 <nrfx_gpiote_trigger_enable>
    375e:	e7c3      	b.n	36e8 <gpio_nrfx_pin_interrupt_configure+0x20>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    3760:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    3764:	d005      	beq.n	3772 <gpio_nrfx_pin_interrupt_configure+0xaa>
    3766:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    376a:	bf0c      	ite	eq
    376c:	2302      	moveq	r3, #2
    376e:	2301      	movne	r3, #1
    3770:	e7c7      	b.n	3702 <gpio_nrfx_pin_interrupt_configure+0x3a>
    3772:	2303      	movs	r3, #3
    3774:	e7c5      	b.n	3702 <gpio_nrfx_pin_interrupt_configure+0x3a>
			err = nrfx_gpiote_channel_alloc(&ch);
    3776:	4620      	mov	r0, r4
    3778:	f001 fd0e 	bl	5198 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    377c:	4b07      	ldr	r3, [pc, #28]	; (379c <gpio_nrfx_pin_interrupt_configure+0xd4>)
    377e:	4298      	cmp	r0, r3
    3780:	d0df      	beq.n	3742 <gpio_nrfx_pin_interrupt_configure+0x7a>
				return -ENOMEM;
    3782:	f06f 000b 	mvn.w	r0, #11
    3786:	e7b0      	b.n	36ea <gpio_nrfx_pin_interrupt_configure+0x22>
		return -EINVAL;
    3788:	f06f 0015 	mvn.w	r0, #21
    378c:	e7ad      	b.n	36ea <gpio_nrfx_pin_interrupt_configure+0x22>
    378e:	bf00      	nop
    3790:	50842500 	.word	0x50842500
    3794:	50842800 	.word	0x50842800
    3798:	0bad0004 	.word	0x0bad0004
    379c:	0bad0000 	.word	0x0bad0000

000037a0 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    37a0:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    37a2:	f001 fce9 	bl	5178 <nrfx_gpiote_is_init>
    37a6:	4604      	mov	r4, r0
    37a8:	b968      	cbnz	r0, 37c6 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    37aa:	f001 fcbd 	bl	5128 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    37ae:	4b08      	ldr	r3, [pc, #32]	; (37d0 <gpio_nrfx_init+0x30>)
    37b0:	4298      	cmp	r0, r3
    37b2:	d10a      	bne.n	37ca <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    37b4:	4621      	mov	r1, r4
    37b6:	4807      	ldr	r0, [pc, #28]	; (37d4 <gpio_nrfx_init+0x34>)
    37b8:	f001 fc9a 	bl	50f0 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    37bc:	4622      	mov	r2, r4
    37be:	2105      	movs	r1, #5
    37c0:	200d      	movs	r0, #13
    37c2:	f7fe ffa1 	bl	2708 <z_arm_irq_priority_set>
		return 0;
    37c6:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    37c8:	bd10      	pop	{r4, pc}
		return -EIO;
    37ca:	f06f 0004 	mvn.w	r0, #4
    37ce:	e7fb      	b.n	37c8 <gpio_nrfx_init+0x28>
    37d0:	0bad0000 	.word	0x0bad0000
    37d4:	000037d9 	.word	0x000037d9

000037d8 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    37d8:	0942      	lsrs	r2, r0, #5
{
    37da:	4603      	mov	r3, r0
    37dc:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    37de:	d002      	beq.n	37e6 <nrfx_gpio_handler+0xe>
    37e0:	2a01      	cmp	r2, #1
    37e2:	d015      	beq.n	3810 <nrfx_gpio_handler+0x38>
}
    37e4:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    37e6:	4e0b      	ldr	r6, [pc, #44]	; (3814 <nrfx_gpio_handler+0x3c>)
	gpio_fire_callbacks(list, port, BIT(pin));
    37e8:	6932      	ldr	r2, [r6, #16]
    37ea:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    37ec:	2900      	cmp	r1, #0
    37ee:	d0f9      	beq.n	37e4 <nrfx_gpio_handler+0xc>
    37f0:	2501      	movs	r5, #1
    *p_pin = pin_number & 0x1F;
    37f2:	f003 031f 	and.w	r3, r3, #31
    37f6:	680c      	ldr	r4, [r1, #0]
    37f8:	409d      	lsls	r5, r3
		if (cb->pin_mask & pins) {
    37fa:	688a      	ldr	r2, [r1, #8]
    37fc:	402a      	ands	r2, r5
    37fe:	d002      	beq.n	3806 <nrfx_gpio_handler+0x2e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    3800:	4630      	mov	r0, r6
    3802:	684b      	ldr	r3, [r1, #4]
    3804:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    3806:	2c00      	cmp	r4, #0
    3808:	d0ec      	beq.n	37e4 <nrfx_gpio_handler+0xc>
    380a:	4621      	mov	r1, r4
    380c:	6824      	ldr	r4, [r4, #0]
    380e:	e7f4      	b.n	37fa <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3810:	4e01      	ldr	r6, [pc, #4]	; (3818 <nrfx_gpio_handler+0x40>)
    3812:	e7e9      	b.n	37e8 <nrfx_gpio_handler+0x10>
    3814:	000085d8 	.word	0x000085d8
    3818:	000085f0 	.word	0x000085f0

0000381c <gpio_nrfx_pin_configure>:
{
    381c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
    3820:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    3824:	f001 061f 	and.w	r6, r1, #31
    3828:	f898 300c 	ldrb.w	r3, [r8, #12]
{
    382c:	b085      	sub	sp, #20
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    382e:	ea46 1643 	orr.w	r6, r6, r3, lsl #5
{
    3832:	4614      	mov	r4, r2
    3834:	460f      	mov	r7, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    3836:	4630      	mov	r0, r6
    3838:	f10d 0103 	add.w	r1, sp, #3
    383c:	f001 fc5e 	bl	50fc <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    3840:	f414 3540 	ands.w	r5, r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    3844:	4681      	mov	r9, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    3846:	d10b      	bne.n	3860 <gpio_nrfx_pin_configure+0x44>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    3848:	4630      	mov	r0, r6
    384a:	f001 fd19 	bl	5280 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    384e:	4b42      	ldr	r3, [pc, #264]	; (3958 <gpio_nrfx_pin_configure+0x13c>)
    3850:	4599      	cmp	r9, r3
    3852:	d103      	bne.n	385c <gpio_nrfx_pin_configure+0x40>
			err = nrfx_gpiote_channel_free(ch);
    3854:	f89d 0003 	ldrb.w	r0, [sp, #3]
    3858:	f001 fc98 	bl	518c <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    385c:	2000      	movs	r0, #0
    385e:	e056      	b.n	390e <gpio_nrfx_pin_configure+0xf2>
	nrfx_gpiote_trigger_config_t trigger_config = {
    3860:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    3862:	4630      	mov	r0, r6
    3864:	4619      	mov	r1, r3
    3866:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
    3868:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    386c:	f001 fb20 	bl	4eb0 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    3870:	4b39      	ldr	r3, [pc, #228]	; (3958 <gpio_nrfx_pin_configure+0x13c>)
    3872:	4298      	cmp	r0, r3
    3874:	d002      	beq.n	387c <gpio_nrfx_pin_configure+0x60>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    3876:	f06f 0015 	mvn.w	r0, #21
    387a:	e048      	b.n	390e <gpio_nrfx_pin_configure+0xf2>
	if (free_ch) {
    387c:	4581      	cmp	r9, r0
    387e:	d103      	bne.n	3888 <gpio_nrfx_pin_configure+0x6c>
		err = nrfx_gpiote_channel_free(ch);
    3880:	f89d 0003 	ldrb.w	r0, [sp, #3]
    3884:	f001 fc82 	bl	518c <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    3888:	03a5      	lsls	r5, r4, #14
    388a:	d552      	bpl.n	3932 <gpio_nrfx_pin_configure+0x116>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    388c:	f240 3306 	movw	r3, #774	; 0x306
    3890:	4023      	ands	r3, r4
    3892:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    3896:	d03d      	beq.n	3914 <gpio_nrfx_pin_configure+0xf8>
    3898:	d80c      	bhi.n	38b4 <gpio_nrfx_pin_configure+0x98>
    389a:	2b06      	cmp	r3, #6
    389c:	d015      	beq.n	38ca <gpio_nrfx_pin_configure+0xae>
    389e:	d804      	bhi.n	38aa <gpio_nrfx_pin_configure+0x8e>
    38a0:	b19b      	cbz	r3, 38ca <gpio_nrfx_pin_configure+0xae>
    38a2:	2b02      	cmp	r3, #2
    38a4:	d1e7      	bne.n	3876 <gpio_nrfx_pin_configure+0x5a>
    38a6:	2304      	movs	r3, #4
    38a8:	e00f      	b.n	38ca <gpio_nrfx_pin_configure+0xae>
    38aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    38ae:	d1e2      	bne.n	3876 <gpio_nrfx_pin_configure+0x5a>
		*drive = NRF_GPIO_PIN_H0S1;
    38b0:	2301      	movs	r3, #1
    38b2:	e00a      	b.n	38ca <gpio_nrfx_pin_configure+0xae>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    38b4:	f240 2202 	movw	r2, #514	; 0x202
    38b8:	4293      	cmp	r3, r2
    38ba:	d02d      	beq.n	3918 <gpio_nrfx_pin_configure+0xfc>
    38bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    38c0:	d02c      	beq.n	391c <gpio_nrfx_pin_configure+0x100>
    38c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    38c6:	d1d6      	bne.n	3876 <gpio_nrfx_pin_configure+0x5a>
		*drive = NRF_GPIO_PIN_S0H1;
    38c8:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    38ca:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    38ce:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    38d2:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    38d6:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    38d8:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
    38dc:	bf4c      	ite	mi
    38de:	2303      	movmi	r3, #3
		return NRF_GPIO_PIN_PULLDOWN;
    38e0:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    38e4:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    38e6:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    38ea:	d519      	bpl.n	3920 <gpio_nrfx_pin_configure+0x104>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    38ec:	2101      	movs	r1, #1
    38ee:	f8d8 3004 	ldr.w	r3, [r8, #4]
    38f2:	fa01 f707 	lsl.w	r7, r1, r7
    p_reg->OUTSET = set_mask;
    38f6:	609f      	str	r7, [r3, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    38f8:	2200      	movs	r2, #0
    38fa:	4630      	mov	r0, r6
    38fc:	a901      	add	r1, sp, #4
    38fe:	f001 fb83 	bl	5008 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    3902:	4b15      	ldr	r3, [pc, #84]	; (3958 <gpio_nrfx_pin_configure+0x13c>)
    3904:	4298      	cmp	r0, r3
    3906:	bf14      	ite	ne
    3908:	f06f 0015 	mvnne.w	r0, #21
    390c:	2000      	moveq	r0, #0
}
    390e:	b005      	add	sp, #20
    3910:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*drive = NRF_GPIO_PIN_H0D1;
    3914:	2307      	movs	r3, #7
    3916:	e7d8      	b.n	38ca <gpio_nrfx_pin_configure+0xae>
		*drive = NRF_GPIO_PIN_D0H1;
    3918:	2305      	movs	r3, #5
    391a:	e7d6      	b.n	38ca <gpio_nrfx_pin_configure+0xae>
		*drive = NRF_GPIO_PIN_H0H1;
    391c:	2303      	movs	r3, #3
    391e:	e7d4      	b.n	38ca <gpio_nrfx_pin_configure+0xae>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    3920:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    3922:	bf41      	itttt	mi
    3924:	2101      	movmi	r1, #1
    3926:	f8d8 3004 	ldrmi.w	r3, [r8, #4]
    392a:	fa01 f707 	lslmi.w	r7, r1, r7
    p_reg->OUTCLR = clr_mask;
    392e:	60df      	strmi	r7, [r3, #12]
}
    3930:	e7e2      	b.n	38f8 <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
    3932:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3934:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    3938:	bf4c      	ite	mi
    393a:	2403      	movmi	r4, #3
    393c:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3940:	461a      	mov	r2, r3
    3942:	4630      	mov	r0, r6
    3944:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
    3946:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    394a:	f001 fab1 	bl	4eb0 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    394e:	4b02      	ldr	r3, [pc, #8]	; (3958 <gpio_nrfx_pin_configure+0x13c>)
    3950:	4298      	cmp	r0, r3
    3952:	d083      	beq.n	385c <gpio_nrfx_pin_configure+0x40>
    3954:	e78f      	b.n	3876 <gpio_nrfx_pin_configure+0x5a>
    3956:	bf00      	nop
    3958:	0bad0000 	.word	0x0bad0000

0000395c <dmic_nrfx_pdm_read>:
}

static int dmic_nrfx_pdm_read(const struct device *dev,
			      uint8_t stream,
			      void **buffer, size_t *size, int32_t timeout)
{
    395c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct dmic_nrfx_pdm_drv_data *drv_data = dev->data;
    3960:	6906      	ldr	r6, [r0, #16]
{
    3962:	461d      	mov	r5, r3
	int ret;

	ARG_UNUSED(stream);

	if (!drv_data->configured) {
    3964:	f896 3044 	ldrb.w	r3, [r6, #68]	; 0x44
{
    3968:	4617      	mov	r7, r2
    396a:	b086      	sub	sp, #24
	if (!drv_data->configured) {
    396c:	079a      	lsls	r2, r3, #30
{
    396e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	if (!drv_data->configured) {
    3970:	d40f      	bmi.n	3992 <dmic_nrfx_pdm_read+0x36>
		LOG_ERR("Device is not configured");
    3972:	4b1e      	ldr	r3, [pc, #120]	; (39ec <dmic_nrfx_pdm_read+0x90>)
		return -EIO;
    3974:	f06f 0404 	mvn.w	r4, #4
		LOG_ERR("Device is not configured");
    3978:	9305      	str	r3, [sp, #20]
    397a:	2302      	movs	r3, #2
    397c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3980:	481b      	ldr	r0, [pc, #108]	; (39f0 <dmic_nrfx_pdm_read+0x94>)
    3982:	aa04      	add	r2, sp, #16
    3984:	9304      	str	r3, [sp, #16]
    3986:	f004 f93c 	bl	7c02 <z_log_msg_static_create.constprop.0>

		*size = drv_data->block_size;
	}

	return ret;
}
    398a:	4620      	mov	r0, r4
    398c:	b006      	add	sp, #24
    398e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ret = k_msgq_get(&drv_data->rx_queue, buffer, SYS_TIMEOUT_MS(timeout));
    3992:	1c63      	adds	r3, r4, #1
    3994:	f106 081c 	add.w	r8, r6, #28
    3998:	d020      	beq.n	39dc <dmic_nrfx_pdm_read+0x80>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    399a:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    399e:	f240 30e7 	movw	r0, #999	; 0x3e7
    39a2:	2100      	movs	r1, #0
    39a4:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    39a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    39ac:	2300      	movs	r3, #0
    39ae:	fbc4 010c 	smlal	r0, r1, r4, ip
    39b2:	f7fc fcdd 	bl	370 <__aeabi_uldivmod>
    39b6:	4602      	mov	r2, r0
    39b8:	460b      	mov	r3, r1
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(msgq, data, timeout);
    39ba:	4639      	mov	r1, r7
    39bc:	4640      	mov	r0, r8
    39be:	f002 fa57 	bl	5e70 <z_impl_k_msgq_get>
	if (ret != 0) {
    39c2:	4604      	mov	r4, r0
    39c4:	b170      	cbz	r0, 39e4 <dmic_nrfx_pdm_read+0x88>
		LOG_ERR("No audio data to be read");
    39c6:	4b0b      	ldr	r3, [pc, #44]	; (39f4 <dmic_nrfx_pdm_read+0x98>)
    39c8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    39cc:	9305      	str	r3, [sp, #20]
    39ce:	2302      	movs	r3, #2
    39d0:	4807      	ldr	r0, [pc, #28]	; (39f0 <dmic_nrfx_pdm_read+0x94>)
    39d2:	aa04      	add	r2, sp, #16
    39d4:	9304      	str	r3, [sp, #16]
    39d6:	f004 f914 	bl	7c02 <z_log_msg_static_create.constprop.0>
    39da:	e7d6      	b.n	398a <dmic_nrfx_pdm_read+0x2e>
	ret = k_msgq_get(&drv_data->rx_queue, buffer, SYS_TIMEOUT_MS(timeout));
    39dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    39e0:	4613      	mov	r3, r2
    39e2:	e7ea      	b.n	39ba <dmic_nrfx_pdm_read+0x5e>
		*size = drv_data->block_size;
    39e4:	69b3      	ldr	r3, [r6, #24]
    39e6:	602b      	str	r3, [r5, #0]
    39e8:	e7cf      	b.n	398a <dmic_nrfx_pdm_read+0x2e>
    39ea:	bf00      	nop
    39ec:	0000938d 	.word	0x0000938d
    39f0:	000088a4 	.word	0x000088a4
    39f4:	000093a6 	.word	0x000093a6

000039f8 <start_transfer>:
{
    39f8:	b5b0      	push	{r4, r5, r7, lr}
    39fa:	af00      	add	r7, sp, #0
    39fc:	4604      	mov	r4, r0
	err = nrfx_pdm_start();
    39fe:	f001 fed3 	bl	57a8 <nrfx_pdm_start>
	if (err == NRFX_SUCCESS) {
    3a02:	4b11      	ldr	r3, [pc, #68]	; (3a48 <start_transfer+0x50>)
    3a04:	4298      	cmp	r0, r3
    3a06:	d01c      	beq.n	3a42 <start_transfer+0x4a>
	LOG_ERR("Failed to start PDM: 0x%08x", err);
    3a08:	466d      	mov	r5, sp
    3a0a:	b088      	sub	sp, #32
    3a0c:	466a      	mov	r2, sp
    3a0e:	4b0f      	ldr	r3, [pc, #60]	; (3a4c <start_transfer+0x54>)
    3a10:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    3a14:	e9c2 3005 	strd	r3, r0, [r2, #20]
    3a18:	2303      	movs	r3, #3
    3a1a:	480d      	ldr	r0, [pc, #52]	; (3a50 <start_transfer+0x58>)
    3a1c:	f842 3f10 	str.w	r3, [r2, #16]!
    3a20:	f004 f8ef 	bl	7c02 <z_log_msg_static_create.constprop.0>
	if (drv_data->request_clock) {
    3a24:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    3a28:	46ad      	mov	sp, r5
    3a2a:	07db      	lsls	r3, r3, #31
    3a2c:	d502      	bpl.n	3a34 <start_transfer+0x3c>
		(void)onoff_release(drv_data->clk_mgr);
    3a2e:	6820      	ldr	r0, [r4, #0]
    3a30:	f003 fb9c 	bl	716c <onoff_release>
	drv_data->active = false;
    3a34:	2300      	movs	r3, #0
	return ret;
    3a36:	f06f 0004 	mvn.w	r0, #4
	drv_data->active = false;
    3a3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
    3a3e:	46bd      	mov	sp, r7
    3a40:	bdb0      	pop	{r4, r5, r7, pc}
		return 0;
    3a42:	2000      	movs	r0, #0
    3a44:	e7fb      	b.n	3a3e <start_transfer+0x46>
    3a46:	bf00      	nop
    3a48:	0bad0000 	.word	0x0bad0000
    3a4c:	000093bf 	.word	0x000093bf
    3a50:	000088a4 	.word	0x000088a4

00003a54 <dmic_nrfx_pdm_trigger>:
{
    3a54:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a56:	b087      	sub	sp, #28
    3a58:	af00      	add	r7, sp, #0
	struct dmic_nrfx_pdm_drv_data *drv_data = dev->data;
    3a5a:	6904      	ldr	r4, [r0, #16]
	switch (cmd) {
    3a5c:	2903      	cmp	r1, #3
    3a5e:	d851      	bhi.n	3b04 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6c>
    3a60:	e8df f001 	tbb	[pc, r1]
    3a64:	0f020f02 	.word	0x0f020f02
		if (drv_data->active) {
    3a68:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    3a6c:	b91b      	cbnz	r3, 3a76 <dmic_nrfx_pdm_trigger+0x22>
	return 0;
    3a6e:	2000      	movs	r0, #0
}
    3a70:	371c      	adds	r7, #28
    3a72:	46bd      	mov	sp, r7
    3a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
			nrfx_pdm_stop();
    3a76:	f001 ff01 	bl	587c <nrfx_pdm_stop>
			drv_data->stopping = true;
    3a7a:	2301      	movs	r3, #1
    3a7c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
    3a80:	e7f5      	b.n	3a6e <dmic_nrfx_pdm_trigger+0x1a>
		if (!drv_data->configured) {
    3a82:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    3a86:	079a      	lsls	r2, r3, #30
    3a88:	d40d      	bmi.n	3aa6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xe>
			LOG_ERR("Device is not configured");
    3a8a:	4b27      	ldr	r3, [pc, #156]	; (3b28 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x90>)
    3a8c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3a90:	617b      	str	r3, [r7, #20]
    3a92:	2302      	movs	r3, #2
    3a94:	4825      	ldr	r0, [pc, #148]	; (3b2c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x94>)
    3a96:	f107 0210 	add.w	r2, r7, #16
    3a9a:	613b      	str	r3, [r7, #16]
    3a9c:	f004 f8b1 	bl	7c02 <z_log_msg_static_create.constprop.0>
			return -EIO;
    3aa0:	f06f 0004 	mvn.w	r0, #4
    3aa4:	e7e4      	b.n	3a70 <dmic_nrfx_pdm_trigger+0x1c>
		} else if (!drv_data->active) {
    3aa6:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
    3aaa:	f002 05ff 	and.w	r5, r2, #255	; 0xff
    3aae:	2a00      	cmp	r2, #0
    3ab0:	d1dd      	bne.n	3a6e <dmic_nrfx_pdm_trigger+0x1a>
	drv_data->active = true;
    3ab2:	2201      	movs	r2, #1
	if (drv_data->request_clock) {
    3ab4:	07db      	lsls	r3, r3, #31
			drv_data->stopping = false;
    3ab6:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
	drv_data->active = true;
    3aba:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
	if (drv_data->request_clock) {
    3abe:	d51b      	bpl.n	3af8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x60>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
    3ac0:	2603      	movs	r6, #3
    3ac2:	4b1b      	ldr	r3, [pc, #108]	; (3b30 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x98>)
		ret = onoff_request(drv_data->clk_mgr, &drv_data->clk_cli);
    3ac4:	6820      	ldr	r0, [r4, #0]
    3ac6:	6125      	str	r5, [r4, #16]
    3ac8:	60a3      	str	r3, [r4, #8]
    3aca:	60e6      	str	r6, [r4, #12]
    3acc:	1d21      	adds	r1, r4, #4
    3ace:	f003 fb04 	bl	70da <onoff_request>
		if (ret < 0) {
    3ad2:	2800      	cmp	r0, #0
    3ad4:	dacb      	bge.n	3a6e <dmic_nrfx_pdm_trigger+0x1a>
			drv_data->active = false;
    3ad6:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
			LOG_ERR("Failed to request clock: %d", ret);
    3ada:	466c      	mov	r4, sp
    3adc:	b088      	sub	sp, #32
    3ade:	466a      	mov	r2, sp
    3ae0:	4b14      	ldr	r3, [pc, #80]	; (3b34 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x9c>)
    3ae2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    3ae6:	e9c2 3005 	strd	r3, r0, [r2, #20]
    3aea:	4810      	ldr	r0, [pc, #64]	; (3b2c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x94>)
    3aec:	f842 6f10 	str.w	r6, [r2, #16]!
    3af0:	f004 f887 	bl	7c02 <z_log_msg_static_create.constprop.0>
    3af4:	46a5      	mov	sp, r4
    3af6:	e7d3      	b.n	3aa0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8>
		ret = start_transfer(drv_data);
    3af8:	4620      	mov	r0, r4
    3afa:	f7ff ff7d 	bl	39f8 <start_transfer>
		if (ret < 0) {
    3afe:	ea00 70e0 	and.w	r0, r0, r0, asr #31
    3b02:	e7b5      	b.n	3a70 <dmic_nrfx_pdm_trigger+0x1c>
		LOG_ERR("Invalid command: %d", cmd);
    3b04:	466c      	mov	r4, sp
    3b06:	b088      	sub	sp, #32
    3b08:	466a      	mov	r2, sp
    3b0a:	4b0b      	ldr	r3, [pc, #44]	; (3b38 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa0>)
    3b0c:	4807      	ldr	r0, [pc, #28]	; (3b2c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x94>)
	switch (cmd) {
    3b0e:	e9c2 3105 	strd	r3, r1, [r2, #20]
		LOG_ERR("Invalid command: %d", cmd);
    3b12:	2303      	movs	r3, #3
    3b14:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    3b18:	f842 3f10 	str.w	r3, [r2, #16]!
    3b1c:	f004 f871 	bl	7c02 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
    3b20:	f06f 0015 	mvn.w	r0, #21
    3b24:	46a5      	mov	sp, r4
    3b26:	e7a3      	b.n	3a70 <dmic_nrfx_pdm_trigger+0x1c>
    3b28:	0000938d 	.word	0x0000938d
    3b2c:	000088a4 	.word	0x000088a4
    3b30:	00007c09 	.word	0x00007c09
    3b34:	000093db 	.word	0x000093db
    3b38:	000093f7 	.word	0x000093f7

00003b3c <dmic_nrfx_pdm_configure>:
{
    3b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3b40:	b093      	sub	sp, #76	; 0x4c
	struct dmic_nrfx_pdm_drv_data *drv_data = dev->data;
    3b42:	6905      	ldr	r5, [r0, #16]
{
    3b44:	af00      	add	r7, sp, #0
	if (drv_data->active) {
    3b46:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
{
    3b4a:	460c      	mov	r4, r1
	if (drv_data->active) {
    3b4c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
	const struct dmic_nrfx_pdm_drv_cfg *drv_cfg = dev->config;
    3b50:	f8d0 b004 	ldr.w	fp, [r0, #4]
	struct pcm_stream_cfg *stream = &config->streams[0];
    3b54:	f8d1 a010 	ldr.w	sl, [r1, #16]
	if (drv_data->active) {
    3b58:	617a      	str	r2, [r7, #20]
    3b5a:	b183      	cbz	r3, 3b7e <dmic_nrfx_pdm_configure+0x42>
		LOG_ERR("Cannot configure device while it is active");
    3b5c:	4b90      	ldr	r3, [pc, #576]	; (3da0 <dmic_nrfx_pdm_configure+0x264>)
    3b5e:	4891      	ldr	r0, [pc, #580]	; (3da4 <dmic_nrfx_pdm_configure+0x268>)
    3b60:	647b      	str	r3, [r7, #68]	; 0x44
    3b62:	2302      	movs	r3, #2
    3b64:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3b68:	f107 0240 	add.w	r2, r7, #64	; 0x40
    3b6c:	643b      	str	r3, [r7, #64]	; 0x40
    3b6e:	f004 f848 	bl	7c02 <z_log_msg_static_create.constprop.0>
		return -EBUSY;
    3b72:	f06f 000f 	mvn.w	r0, #15
}
    3b76:	374c      	adds	r7, #76	; 0x4c
    3b78:	46bd      	mov	sp, r7
    3b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (channel->req_num_chan == 1) {
    3b7e:	f891 c024 	ldrb.w	ip, [r1, #36]	; 0x24
		channel->act_num_chan = 1;
    3b82:	f1bc 0f01 	cmp.w	ip, #1
    3b86:	bf14      	ite	ne
    3b88:	2302      	movne	r3, #2
    3b8a:	2301      	moveq	r3, #1
    3b8c:	f881 3025 	strb.w	r3, [r1, #37]	; 0x25
	channel->act_num_streams = 1;
    3b90:	f04f 0301 	mov.w	r3, #1
		channel->act_num_chan = 1;
    3b94:	bf14      	ite	ne
    3b96:	f04f 0810 	movne.w	r8, #16
    3b9a:	f04f 0800 	moveq.w	r8, #0
	channel->act_num_streams = 1;
    3b9e:	f881 3027 	strb.w	r3, [r1, #39]	; 0x27
	channel->act_chan_map_hi = 0;
    3ba2:	697b      	ldr	r3, [r7, #20]
	channel->act_chan_map_lo = def_map;
    3ba4:	e9c1 8307 	strd	r8, r3, [r1, #28]
	if (channel->req_num_streams != 1 ||
    3ba8:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
    3bac:	2b01      	cmp	r3, #1
    3bae:	d10a      	bne.n	3bc6 <dmic_nrfx_pdm_configure+0x8a>
	    channel->req_num_chan > 2 ||
    3bb0:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    3bb4:	2b01      	cmp	r3, #1
    3bb6:	d806      	bhi.n	3bc6 <dmic_nrfx_pdm_configure+0x8a>
	    (channel->req_chan_map_lo != def_map &&
    3bb8:	694e      	ldr	r6, [r1, #20]
	    channel->req_num_chan < 1 ||
    3bba:	4546      	cmp	r6, r8
    3bbc:	d001      	beq.n	3bc2 <dmic_nrfx_pdm_configure+0x86>
	    (channel->req_chan_map_lo != def_map &&
    3bbe:	2e01      	cmp	r6, #1
    3bc0:	d101      	bne.n	3bc6 <dmic_nrfx_pdm_configure+0x8a>
	     channel->req_chan_map_lo != alt_map) ||
    3bc2:	69a3      	ldr	r3, [r4, #24]
    3bc4:	b16b      	cbz	r3, 3be2 <dmic_nrfx_pdm_configure+0xa6>
		LOG_ERR("Requested configuration is not supported");
    3bc6:	4b78      	ldr	r3, [pc, #480]	; (3da8 <dmic_nrfx_pdm_configure+0x26c>)
		LOG_ERR("Only 16-bit samples are supported");
    3bc8:	647b      	str	r3, [r7, #68]	; 0x44
    3bca:	2302      	movs	r3, #2
    3bcc:	4875      	ldr	r0, [pc, #468]	; (3da4 <dmic_nrfx_pdm_configure+0x268>)
    3bce:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3bd2:	f107 0240 	add.w	r2, r7, #64	; 0x40
    3bd6:	643b      	str	r3, [r7, #64]	; 0x40
    3bd8:	f004 f813 	bl	7c02 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
    3bdc:	f06f 0015 	mvn.w	r0, #21
    3be0:	e7c9      	b.n	3b76 <dmic_nrfx_pdm_configure+0x3a>
	if (stream->pcm_rate == 0 || stream->pcm_width == 0) {
    3be2:	f8da 9000 	ldr.w	r9, [sl]
    3be6:	f1b9 0f00 	cmp.w	r9, #0
    3bea:	d002      	beq.n	3bf2 <dmic_nrfx_pdm_configure+0xb6>
    3bec:	f89a 3004 	ldrb.w	r3, [sl, #4]
    3bf0:	b973      	cbnz	r3, 3c10 <dmic_nrfx_pdm_configure+0xd4>
		if (drv_data->configured) {
    3bf2:	f895 0044 	ldrb.w	r0, [r5, #68]	; 0x44
    3bf6:	f010 0002 	ands.w	r0, r0, #2
    3bfa:	d0bc      	beq.n	3b76 <dmic_nrfx_pdm_configure+0x3a>
			nrfx_pdm_uninit();
    3bfc:	f001 fdbc 	bl	5778 <nrfx_pdm_uninit>
			drv_data->configured = false;
    3c00:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
    3c04:	f36f 0341 	bfc	r3, #1, #1
	return 0;
    3c08:	2000      	movs	r0, #0
	drv_data->request_clock = (drv_cfg->clk_src != PCLK32M);
    3c0a:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	return 0;
    3c0e:	e7b2      	b.n	3b76 <dmic_nrfx_pdm_configure+0x3a>
	if (stream->pcm_width != 16) {
    3c10:	2b10      	cmp	r3, #16
    3c12:	d001      	beq.n	3c18 <dmic_nrfx_pdm_configure+0xdc>
		LOG_ERR("Only 16-bit samples are supported");
    3c14:	4b65      	ldr	r3, [pc, #404]	; (3dac <dmic_nrfx_pdm_configure+0x270>)
    3c16:	e7d7      	b.n	3bc8 <dmic_nrfx_pdm_configure+0x8c>
	nrfx_cfg = drv_cfg->nrfx_def_cfg;
    3c18:	f107 0e20 	add.w	lr, r7, #32
    3c1c:	f10b 0304 	add.w	r3, fp, #4
    3c20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    3c22:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
		      : NRF_PDM_MODE_STEREO;
    3c26:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
			 : NRF_PDM_MCLKSRC_PCLK32M;
    3c2a:	f89b 3018 	ldrb.w	r3, [fp, #24]
		      : NRF_PDM_MODE_STEREO;
    3c2e:	f1d2 0c00 	rsbs	ip, r2, #0
    3c32:	eb4c 0c02 	adc.w	ip, ip, r2
		      : NRF_PDM_EDGE_LEFTRISING;
    3c36:	ebb6 0608 	subs.w	r6, r6, r8
    3c3a:	bf18      	it	ne
    3c3c:	2601      	movne	r6, #1
			 : NRF_PDM_MCLKSRC_PCLK32M;
    3c3e:	2b02      	cmp	r3, #2
    3c40:	bf0c      	ite	eq
    3c42:	2301      	moveq	r3, #1
    3c44:	2300      	movne	r3, #0
    3c46:	4a5a      	ldr	r2, [pc, #360]	; (3db0 <dmic_nrfx_pdm_configure+0x274>)
    3c48:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    3c4c:	4b59      	ldr	r3, [pc, #356]	; (3db4 <dmic_nrfx_pdm_configure+0x278>)
    3c4e:	bf08      	it	eq
    3c50:	4613      	moveq	r3, r2
    3c52:	60fb      	str	r3, [r7, #12]
		if (act_freq >= pdm_cfg->io.min_pdm_clk_freq &&
    3c54:	6823      	ldr	r3, [r4, #0]
    3c56:	f8df 8160 	ldr.w	r8, [pc, #352]	; 3db8 <dmic_nrfx_pdm_configure+0x27c>
    3c5a:	603b      	str	r3, [r7, #0]
    3c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		      : NRF_PDM_MODE_STEREO;
    3c5e:	f887 c020 	strb.w	ip, [r7, #32]
	nrfx_cfg.edge = channel->req_chan_map_lo == def_map
    3c62:	61bb      	str	r3, [r7, #24]
    3c64:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
		      : NRF_PDM_EDGE_LEFTRISING;
    3c68:	f887 6021 	strb.w	r6, [r7, #33]	; 0x21
	for (int r = 0; best_diff != 0 && r < ARRAY_SIZE(ratios); ++r) {
    3c6c:	61fb      	str	r3, [r7, #28]
	uint32_t best_diff = UINT32_MAX;
    3c6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3c72:	613b      	str	r3, [r7, #16]
		uint32_t req_freq = req_rate * ratio;
    3c74:	f898 6000 	ldrb.w	r6, [r8]
		uint32_t clk_factor = (uint32_t)((req_freq * 1048576ULL) /
    3c78:	68fb      	ldr	r3, [r7, #12]
		uint32_t req_freq = req_rate * ratio;
    3c7a:	fb06 f109 	mul.w	r1, r6, r9
		uint32_t clk_factor = (uint32_t)((req_freq * 1048576ULL) /
    3c7e:	eb03 0251 	add.w	r2, r3, r1, lsr #1
    3c82:	0508      	lsls	r0, r1, #20
    3c84:	2300      	movs	r3, #0
    3c86:	0b09      	lsrs	r1, r1, #12
    3c88:	f7fc fb72 	bl	370 <__aeabi_uldivmod>
		uint32_t act_freq = src_freq / (1048576 / clk_factor);
    3c8c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    3c90:	fbb3 f3f0 	udiv	r3, r3, r0
    3c94:	68fa      	ldr	r2, [r7, #12]
    3c96:	fbb2 f3f3 	udiv	r3, r2, r3
		if (act_freq >= pdm_cfg->io.min_pdm_clk_freq &&
    3c9a:	683a      	ldr	r2, [r7, #0]
    3c9c:	4293      	cmp	r3, r2
    3c9e:	d30d      	bcc.n	3cbc <dmic_nrfx_pdm_configure+0x180>
    3ca0:	6862      	ldr	r2, [r4, #4]
    3ca2:	4293      	cmp	r3, r2
    3ca4:	d80a      	bhi.n	3cbc <dmic_nrfx_pdm_configure+0x180>
	uint32_t act_rate = freq / ratio;
    3ca6:	fbb3 f6f6 	udiv	r6, r3, r6
	if (diff < *best_diff) {
    3caa:	6939      	ldr	r1, [r7, #16]
					     : (req_rate - act_rate);
    3cac:	45b1      	cmp	r9, r6
    3cae:	bf94      	ite	ls
    3cb0:	eba6 0209 	subls.w	r2, r6, r9
    3cb4:	eba9 0206 	subhi.w	r2, r9, r6
	if (diff < *best_diff) {
    3cb8:	428a      	cmp	r2, r1
    3cba:	d363      	bcc.n	3d84 <dmic_nrfx_pdm_configure+0x248>
	for (int r = 0; best_diff != 0 && r < ARRAY_SIZE(ratios); ++r) {
    3cbc:	4b3f      	ldr	r3, [pc, #252]	; (3dbc <dmic_nrfx_pdm_configure+0x280>)
    3cbe:	f108 0802 	add.w	r8, r8, #2
    3cc2:	4598      	cmp	r8, r3
    3cc4:	d1d6      	bne.n	3c74 <dmic_nrfx_pdm_configure+0x138>
    3cc6:	697b      	ldr	r3, [r7, #20]
    3cc8:	b123      	cbz	r3, 3cd4 <dmic_nrfx_pdm_configure+0x198>
    3cca:	69bb      	ldr	r3, [r7, #24]
    3ccc:	627b      	str	r3, [r7, #36]	; 0x24
    3cce:	69fb      	ldr	r3, [r7, #28]
    3cd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	if (best_diff == UINT32_MAX) {
    3cd4:	693b      	ldr	r3, [r7, #16]
    3cd6:	3301      	adds	r3, #1
    3cd8:	d108      	bne.n	3cec <dmic_nrfx_pdm_configure+0x1b0>
		LOG_ERR("Cannot find suitable PDM clock configuration.");
    3cda:	4b39      	ldr	r3, [pc, #228]	; (3dc0 <dmic_nrfx_pdm_configure+0x284>)
    3cdc:	e774      	b.n	3bc8 <dmic_nrfx_pdm_configure+0x8c>
    3cde:	69ba      	ldr	r2, [r7, #24]
	uint32_t act_rate = freq / ratio;
    3ce0:	e9c7 6301 	strd	r6, r3, [r7, #4]
    3ce4:	627a      	str	r2, [r7, #36]	; 0x24
    3ce6:	69fa      	ldr	r2, [r7, #28]
    3ce8:	f887 202b 	strb.w	r2, [r7, #43]	; 0x2b
	LOG_INF("PDM clock frequency: %u, actual PCM rate: %u",
    3cec:	466c      	mov	r4, sp
    3cee:	b088      	sub	sp, #32
    3cf0:	466a      	mov	r2, sp
    3cf2:	4b34      	ldr	r3, [pc, #208]	; (3dc4 <dmic_nrfx_pdm_configure+0x288>)
    3cf4:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
    3cf8:	6153      	str	r3, [r2, #20]
    3cfa:	68bb      	ldr	r3, [r7, #8]
    3cfc:	4829      	ldr	r0, [pc, #164]	; (3da4 <dmic_nrfx_pdm_configure+0x268>)
    3cfe:	6193      	str	r3, [r2, #24]
    3d00:	687b      	ldr	r3, [r7, #4]
    3d02:	61d3      	str	r3, [r2, #28]
    3d04:	2304      	movs	r3, #4
    3d06:	f842 3f10 	str.w	r3, [r2, #16]!
    3d0a:	f003 ff7a 	bl	7c02 <z_log_msg_static_create.constprop.0>
	if (drv_data->configured) {
    3d0e:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
    3d12:	46a5      	mov	sp, r4
    3d14:	079b      	lsls	r3, r3, #30
    3d16:	d507      	bpl.n	3d28 <dmic_nrfx_pdm_configure+0x1ec>
		nrfx_pdm_uninit();
    3d18:	f001 fd2e 	bl	5778 <nrfx_pdm_uninit>
		drv_data->configured = false;
    3d1c:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
    3d20:	f36f 0341 	bfc	r3, #1, #1
    3d24:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	err = nrfx_pdm_init(&nrfx_cfg, drv_cfg->event_handler);
    3d28:	f8db 1000 	ldr.w	r1, [fp]
    3d2c:	f107 0020 	add.w	r0, r7, #32
    3d30:	f001 fc9e 	bl	5670 <nrfx_pdm_init>
	if (err != NRFX_SUCCESS) {
    3d34:	4b24      	ldr	r3, [pc, #144]	; (3dc8 <dmic_nrfx_pdm_configure+0x28c>)
    3d36:	4298      	cmp	r0, r3
    3d38:	d011      	beq.n	3d5e <dmic_nrfx_pdm_configure+0x222>
		LOG_ERR("Failed to initialize PDM: 0x%08x", err);
    3d3a:	466c      	mov	r4, sp
    3d3c:	b088      	sub	sp, #32
    3d3e:	466a      	mov	r2, sp
    3d40:	4b22      	ldr	r3, [pc, #136]	; (3dcc <dmic_nrfx_pdm_configure+0x290>)
    3d42:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    3d46:	e9c2 3005 	strd	r3, r0, [r2, #20]
    3d4a:	2303      	movs	r3, #3
    3d4c:	4815      	ldr	r0, [pc, #84]	; (3da4 <dmic_nrfx_pdm_configure+0x268>)
    3d4e:	f842 3f10 	str.w	r3, [r2, #16]!
    3d52:	f003 ff56 	bl	7c02 <z_log_msg_static_create.constprop.0>
		return -EIO;
    3d56:	f06f 0004 	mvn.w	r0, #4
    3d5a:	46a5      	mov	sp, r4
    3d5c:	e70b      	b.n	3b76 <dmic_nrfx_pdm_configure+0x3a>
	drv_data->block_size = stream->block_size;
    3d5e:	f8ba 3006 	ldrh.w	r3, [sl, #6]
	drv_data->request_clock = (drv_cfg->clk_src != PCLK32M);
    3d62:	f895 2044 	ldrb.w	r2, [r5, #68]	; 0x44
	drv_data->block_size = stream->block_size;
    3d66:	61ab      	str	r3, [r5, #24]
	drv_data->mem_slab   = stream->mem_slab;
    3d68:	f8da 3008 	ldr.w	r3, [sl, #8]
	drv_data->request_clock = (drv_cfg->clk_src != PCLK32M);
    3d6c:	f022 0203 	bic.w	r2, r2, #3
	drv_data->mem_slab   = stream->mem_slab;
    3d70:	616b      	str	r3, [r5, #20]
	drv_data->request_clock = (drv_cfg->clk_src != PCLK32M);
    3d72:	f89b 3018 	ldrb.w	r3, [fp, #24]
    3d76:	3b00      	subs	r3, #0
    3d78:	bf18      	it	ne
    3d7a:	2301      	movne	r3, #1
    3d7c:	f043 0302 	orr.w	r3, r3, #2
    3d80:	4313      	orrs	r3, r2
    3d82:	e741      	b.n	3c08 <dmic_nrfx_pdm_configure+0xcc>
			config->clock_freq = clk_factor * 4096;
    3d84:	0301      	lsls	r1, r0, #12
    3d86:	61b9      	str	r1, [r7, #24]
			config->ratio = ratios[r].ratio_enum;
    3d88:	f898 1001 	ldrb.w	r1, [r8, #1]
    3d8c:	61f9      	str	r1, [r7, #28]
			if (best_diff == 0) {
    3d8e:	2a00      	cmp	r2, #0
    3d90:	d0a5      	beq.n	3cde <dmic_nrfx_pdm_configure+0x1a2>
	uint32_t act_rate = freq / ratio;
    3d92:	e9c7 6301 	strd	r6, r3, [r7, #4]
    3d96:	2301      	movs	r3, #1
    3d98:	613a      	str	r2, [r7, #16]
    3d9a:	617b      	str	r3, [r7, #20]
    3d9c:	e78e      	b.n	3cbc <dmic_nrfx_pdm_configure+0x180>
    3d9e:	bf00      	nop
    3da0:	0000940b 	.word	0x0000940b
    3da4:	000088a4 	.word	0x000088a4
    3da8:	00009436 	.word	0x00009436
    3dac:	0000945f 	.word	0x0000945f
    3db0:	00bb8000 	.word	0x00bb8000
    3db4:	01e84800 	.word	0x01e84800
    3db8:	00009564 	.word	0x00009564
    3dbc:	00009568 	.word	0x00009568
    3dc0:	00009481 	.word	0x00009481
    3dc4:	000094af 	.word	0x000094af
    3dc8:	0bad0000 	.word	0x0bad0000
    3dcc:	000094dc 	.word	0x000094dc

00003dd0 <pdm_nrfx_init0>:
			 &dmic_nrfx_pdm_data##idx, &dmic_nrfx_pdm_cfg##idx,  \
			 POST_KERNEL, CONFIG_AUDIO_DMIC_INIT_PRIORITY,	     \
			 &dmic_ops);

/* Existing SoCs only have one PDM instance. */
PDM_NRFX_DEVICE(0);
    3dd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    3dd2:	4604      	mov	r4, r0
    3dd4:	2200      	movs	r2, #0
    3dd6:	2101      	movs	r1, #1
    3dd8:	2026      	movs	r0, #38	; 0x26
    3dda:	f7fe fc95 	bl	2708 <z_arm_irq_priority_set>
    3dde:	6863      	ldr	r3, [r4, #4]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    3de0:	2100      	movs	r1, #0
    3de2:	695d      	ldr	r5, [r3, #20]
    3de4:	aa01      	add	r2, sp, #4
    3de6:	4628      	mov	r0, r5
    3de8:	f003 ffa0 	bl	7d2c <pinctrl_lookup_state>
	if (ret < 0) {
    3dec:	2800      	cmp	r0, #0
    3dee:	db18      	blt.n	3e22 <pdm_nrfx_init0+0x52>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    3df0:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    3df2:	682a      	ldr	r2, [r5, #0]
    3df4:	7919      	ldrb	r1, [r3, #4]
    3df6:	6818      	ldr	r0, [r3, #0]
    3df8:	f003 ffb5 	bl	7d66 <pinctrl_configure_pins>
    3dfc:	2800      	cmp	r0, #0
    3dfe:	db10      	blt.n	3e22 <pdm_nrfx_init0+0x52>
    3e00:	2304      	movs	r3, #4
    3e02:	4809      	ldr	r0, [pc, #36]	; (3e28 <pdm_nrfx_init0+0x58>)
    3e04:	461a      	mov	r2, r3
    3e06:	4909      	ldr	r1, [pc, #36]	; (3e2c <pdm_nrfx_init0+0x5c>)
    3e08:	f004 fa2d 	bl	8266 <k_msgq_init>
	if (drv_cfg->clk_src == ACLK) {
    3e0c:	6863      	ldr	r3, [r4, #4]
	struct dmic_nrfx_pdm_drv_data *drv_data = dev->data;
    3e0e:	6925      	ldr	r5, [r4, #16]
	if (drv_cfg->clk_src == ACLK) {
    3e10:	7e1b      	ldrb	r3, [r3, #24]
		subsys = CLOCK_CONTROL_NRF_SUBSYS_HF;
    3e12:	2b02      	cmp	r3, #2
	drv_data->clk_mgr = z_nrf_clock_control_get_onoff(subsys);
    3e14:	bf0c      	ite	eq
    3e16:	2003      	moveq	r0, #3
    3e18:	2000      	movne	r0, #0
    3e1a:	f7ff fba3 	bl	3564 <z_nrf_clock_control_get_onoff>
    3e1e:	6028      	str	r0, [r5, #0]
    3e20:	2000      	movs	r0, #0
PDM_NRFX_DEVICE(0);
    3e22:	b003      	add	sp, #12
    3e24:	bd30      	pop	{r4, r5, pc}
    3e26:	bf00      	nop
    3e28:	2002027c 	.word	0x2002027c
    3e2c:	200202a8 	.word	0x200202a8

00003e30 <event_handler0>:
    3e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3e34:	b086      	sub	sp, #24
	if (evt->buffer_requested) {
    3e36:	7806      	ldrb	r6, [r0, #0]
PDM_NRFX_DEVICE(0);
    3e38:	4605      	mov	r5, r0
    3e3a:	4c33      	ldr	r4, [pc, #204]	; (3f08 <event_handler0+0xd8>)
    3e3c:	af00      	add	r7, sp, #0
	if (evt->buffer_requested) {
    3e3e:	b1b6      	cbz	r6, 3e6e <event_handler0+0x3e>
		ret = k_mem_slab_alloc(drv_data->mem_slab, &buffer, K_NO_WAIT);
    3e40:	2200      	movs	r2, #0
    3e42:	2300      	movs	r3, #0
    3e44:	4639      	mov	r1, r7
    3e46:	6960      	ldr	r0, [r4, #20]
    3e48:	f001 fec0 	bl	5bcc <k_mem_slab_alloc>
		if (ret < 0) {
    3e4c:	2800      	cmp	r0, #0
    3e4e:	da2a      	bge.n	3ea6 <event_handler0+0x76>
			LOG_ERR("Failed to allocate buffer: %d", ret);
    3e50:	46e8      	mov	r8, sp
    3e52:	b088      	sub	sp, #32
    3e54:	466a      	mov	r2, sp
    3e56:	4b2d      	ldr	r3, [pc, #180]	; (3f0c <event_handler0+0xdc>)
				LOG_ERR("Failed to set buffer: 0x%08x", err);
    3e58:	e9c2 3005 	strd	r3, r0, [r2, #20]
    3e5c:	2303      	movs	r3, #3
    3e5e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    3e62:	482b      	ldr	r0, [pc, #172]	; (3f10 <event_handler0+0xe0>)
    3e64:	f842 3f10 	str.w	r3, [r2, #16]!
    3e68:	f003 fecb 	bl	7c02 <z_log_msg_static_create.constprop.0>
    3e6c:	46c5      	mov	sp, r8
	if (drv_data->stopping) {
    3e6e:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
		if (evt->buffer_released) {
    3e72:	686b      	ldr	r3, [r5, #4]
	if (drv_data->stopping) {
    3e74:	b33a      	cbz	r2, 3ec6 <event_handler0+0x96>
		if (evt->buffer_released) {
    3e76:	b123      	cbz	r3, 3e82 <event_handler0+0x52>
	k_mem_slab_free(drv_data->mem_slab, &buffer);
    3e78:	4639      	mov	r1, r7
    3e7a:	6960      	ldr	r0, [r4, #20]
    3e7c:	603b      	str	r3, [r7, #0]
    3e7e:	f004 f9b7 	bl	81f0 <k_mem_slab_free>
		if (drv_data->active) {
    3e82:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    3e86:	b14b      	cbz	r3, 3e9c <event_handler0+0x6c>
			drv_data->active = false;
    3e88:	2300      	movs	r3, #0
    3e8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			if (drv_data->request_clock) {
    3e8e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    3e92:	07db      	lsls	r3, r3, #31
    3e94:	d502      	bpl.n	3e9c <event_handler0+0x6c>
				(void)onoff_release(drv_data->clk_mgr);
    3e96:	6820      	ldr	r0, [r4, #0]
    3e98:	f003 f968 	bl	716c <onoff_release>
	if (stop) {
    3e9c:	bb76      	cbnz	r6, 3efc <event_handler0+0xcc>
PDM_NRFX_DEVICE(0);
    3e9e:	3718      	adds	r7, #24
    3ea0:	46bd      	mov	sp, r7
    3ea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						  drv_data->block_size / 2);
    3ea6:	69a1      	ldr	r1, [r4, #24]
			err = nrfx_pdm_buffer_set(buffer,
    3ea8:	6838      	ldr	r0, [r7, #0]
    3eaa:	f3c1 014f 	ubfx	r1, r1, #1, #16
    3eae:	f001 fc97 	bl	57e0 <nrfx_pdm_buffer_set>
			if (err != NRFX_SUCCESS) {
    3eb2:	4b18      	ldr	r3, [pc, #96]	; (3f14 <event_handler0+0xe4>)
    3eb4:	4298      	cmp	r0, r3
    3eb6:	d004      	beq.n	3ec2 <event_handler0+0x92>
				LOG_ERR("Failed to set buffer: 0x%08x", err);
    3eb8:	46e8      	mov	r8, sp
    3eba:	b088      	sub	sp, #32
    3ebc:	466a      	mov	r2, sp
    3ebe:	4b16      	ldr	r3, [pc, #88]	; (3f18 <event_handler0+0xe8>)
    3ec0:	e7ca      	b.n	3e58 <event_handler0+0x28>
	bool stop = false;
    3ec2:	2600      	movs	r6, #0
    3ec4:	e7d3      	b.n	3e6e <event_handler0+0x3e>
	} else if (evt->buffer_released) {
    3ec6:	2b00      	cmp	r3, #0
    3ec8:	d0e8      	beq.n	3e9c <event_handler0+0x6c>
	return z_impl_k_msgq_put(msgq, data, timeout);
    3eca:	2200      	movs	r2, #0
    3ecc:	2300      	movs	r3, #0
    3ece:	4813      	ldr	r0, [pc, #76]	; (3f1c <event_handler0+0xec>)
    3ed0:	1d29      	adds	r1, r5, #4
    3ed2:	f001 ff7d 	bl	5dd0 <z_impl_k_msgq_put>
		if (ret < 0) {
    3ed6:	2800      	cmp	r0, #0
    3ed8:	dae0      	bge.n	3e9c <event_handler0+0x6c>
			LOG_ERR("No room in RX queue");
    3eda:	4b11      	ldr	r3, [pc, #68]	; (3f20 <event_handler0+0xf0>)
    3edc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3ee0:	617b      	str	r3, [r7, #20]
    3ee2:	2302      	movs	r3, #2
    3ee4:	480a      	ldr	r0, [pc, #40]	; (3f10 <event_handler0+0xe0>)
    3ee6:	f107 0210 	add.w	r2, r7, #16
    3eea:	613b      	str	r3, [r7, #16]
    3eec:	f003 fe89 	bl	7c02 <z_log_msg_static_create.constprop.0>
			free_buffer(drv_data, evt->buffer_released);
    3ef0:	686b      	ldr	r3, [r5, #4]
	k_mem_slab_free(drv_data->mem_slab, &buffer);
    3ef2:	4639      	mov	r1, r7
    3ef4:	6960      	ldr	r0, [r4, #20]
    3ef6:	603b      	str	r3, [r7, #0]
    3ef8:	f004 f97a 	bl	81f0 <k_mem_slab_free>
		nrfx_pdm_stop();
    3efc:	f001 fcbe 	bl	587c <nrfx_pdm_stop>
		drv_data->stopping = true;
    3f00:	2301      	movs	r3, #1
    3f02:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
PDM_NRFX_DEVICE(0);
    3f06:	e7ca      	b.n	3e9e <event_handler0+0x6e>
    3f08:	20020260 	.word	0x20020260
    3f0c:	000094fd 	.word	0x000094fd
    3f10:	000088a4 	.word	0x000088a4
    3f14:	0bad0000 	.word	0x0bad0000
    3f18:	0000951b 	.word	0x0000951b
    3f1c:	2002027c 	.word	0x2002027c
    3f20:	00009538 	.word	0x00009538

00003f24 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    3f24:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    3f26:	794b      	ldrb	r3, [r1, #5]
    3f28:	2b01      	cmp	r3, #1
    3f2a:	d028      	beq.n	3f7e <uarte_nrfx_configure+0x5a>
    3f2c:	2b03      	cmp	r3, #3
    3f2e:	d123      	bne.n	3f78 <uarte_nrfx_configure+0x54>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    3f30:	2710      	movs	r7, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    3f32:	798b      	ldrb	r3, [r1, #6]
    3f34:	2b03      	cmp	r3, #3
    3f36:	d11f      	bne.n	3f78 <uarte_nrfx_configure+0x54>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    3f38:	79cd      	ldrb	r5, [r1, #7]
    3f3a:	b10d      	cbz	r5, 3f40 <uarte_nrfx_configure+0x1c>
    3f3c:	2d01      	cmp	r5, #1
    3f3e:	d11b      	bne.n	3f78 <uarte_nrfx_configure+0x54>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    3f40:	790a      	ldrb	r2, [r1, #4]
    3f42:	2a01      	cmp	r2, #1
    3f44:	d01d      	beq.n	3f82 <uarte_nrfx_configure+0x5e>
    3f46:	2a02      	cmp	r2, #2
    3f48:	d01f      	beq.n	3f8a <uarte_nrfx_configure+0x66>
    3f4a:	b9aa      	cbnz	r2, 3f78 <uarte_nrfx_configure+0x54>
    3f4c:	4614      	mov	r4, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    3f4e:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    3f50:	6846      	ldr	r6, [r0, #4]
	switch (baudrate) {
    3f52:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    3f56:	6836      	ldr	r6, [r6, #0]
	switch (baudrate) {
    3f58:	d06e      	beq.n	4038 <CONFIG_FPROTECT_BLOCK_SIZE+0x38>
    3f5a:	d833      	bhi.n	3fc4 <uarte_nrfx_configure+0xa0>
    3f5c:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    3f60:	d06d      	beq.n	403e <CONFIG_FPROTECT_BLOCK_SIZE+0x3e>
    3f62:	d81c      	bhi.n	3f9e <uarte_nrfx_configure+0x7a>
    3f64:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    3f68:	d06b      	beq.n	4042 <CONFIG_FPROTECT_BLOCK_SIZE+0x42>
    3f6a:	d810      	bhi.n	3f8e <uarte_nrfx_configure+0x6a>
    3f6c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    3f70:	d06a      	beq.n	4048 <CONFIG_FPROTECT_BLOCK_SIZE+0x48>
    3f72:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    3f76:	d06a      	beq.n	404e <CONFIG_FPROTECT_BLOCK_SIZE+0x4e>
    3f78:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3f7c:	e05b      	b.n	4036 <CONFIG_FPROTECT_BLOCK_SIZE+0x36>
	switch (cfg->stop_bits) {
    3f7e:	2700      	movs	r7, #0
    3f80:	e7d7      	b.n	3f32 <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
    3f82:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    3f86:	220e      	movs	r2, #14
    3f88:	e7e1      	b.n	3f4e <uarte_nrfx_configure+0x2a>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
    3f8a:	2400      	movs	r4, #0
    3f8c:	e7fb      	b.n	3f86 <uarte_nrfx_configure+0x62>
	switch (baudrate) {
    3f8e:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    3f92:	d05f      	beq.n	4054 <CONFIG_FPROTECT_BLOCK_SIZE+0x54>
    3f94:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    3f98:	d1ee      	bne.n	3f78 <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    3f9a:	4b39      	ldr	r3, [pc, #228]	; (4080 <CONFIG_FPROTECT_BLOCK_SIZE+0x80>)
    3f9c:	e03e      	b.n	401c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>
	switch (baudrate) {
    3f9e:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    3fa2:	d05a      	beq.n	405a <CONFIG_FPROTECT_BLOCK_SIZE+0x5a>
    3fa4:	d807      	bhi.n	3fb6 <uarte_nrfx_configure+0x92>
    3fa6:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    3faa:	d058      	beq.n	405e <CONFIG_FPROTECT_BLOCK_SIZE+0x5e>
    3fac:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    3fb0:	d1e2      	bne.n	3f78 <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    3fb2:	4b34      	ldr	r3, [pc, #208]	; (4084 <CONFIG_FPROTECT_BLOCK_SIZE+0x84>)
    3fb4:	e032      	b.n	401c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>
	switch (baudrate) {
    3fb6:	f647 2c12 	movw	ip, #31250	; 0x7a12
    3fba:	4563      	cmp	r3, ip
    3fbc:	d1dc      	bne.n	3f78 <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    3fbe:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    3fc2:	e02b      	b.n	401c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>
	switch (baudrate) {
    3fc4:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    3fc8:	d04b      	beq.n	4062 <CONFIG_FPROTECT_BLOCK_SIZE+0x62>
    3fca:	d813      	bhi.n	3ff4 <uarte_nrfx_configure+0xd0>
    3fcc:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    3fd0:	d04a      	beq.n	4068 <CONFIG_FPROTECT_BLOCK_SIZE+0x68>
    3fd2:	d809      	bhi.n	3fe8 <uarte_nrfx_configure+0xc4>
    3fd4:	f64d 2cc0 	movw	ip, #56000	; 0xdac0
    3fd8:	4563      	cmp	r3, ip
    3fda:	d047      	beq.n	406c <CONFIG_FPROTECT_BLOCK_SIZE+0x6c>
    3fdc:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    3fe0:	d1ca      	bne.n	3f78 <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    3fe2:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    3fe6:	e019      	b.n	401c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>
	switch (baudrate) {
    3fe8:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    3fec:	d1c4      	bne.n	3f78 <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    3fee:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    3ff2:	e013      	b.n	401c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>
	switch (baudrate) {
    3ff4:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    3ff8:	d03b      	beq.n	4072 <CONFIG_FPROTECT_BLOCK_SIZE+0x72>
    3ffa:	d809      	bhi.n	4010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>
    3ffc:	f8df c088 	ldr.w	ip, [pc, #136]	; 4088 <CONFIG_FPROTECT_BLOCK_SIZE+0x88>
    4000:	4563      	cmp	r3, ip
    4002:	d039      	beq.n	4078 <CONFIG_FPROTECT_BLOCK_SIZE+0x78>
    4004:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    4008:	d1b6      	bne.n	3f78 <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    400a:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    400e:	e005      	b.n	401c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>
	switch (baudrate) {
    4010:	f8df c078 	ldr.w	ip, [pc, #120]	; 408c <CONFIG_FPROTECT_BLOCK_SIZE+0x8c>
    4014:	4563      	cmp	r3, ip
    4016:	d1af      	bne.n	3f78 <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    4018:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    401c:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->stop
#endif
#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
                    | (uint32_t)p_cfg->paritytype
#endif
                    | (uint32_t)p_cfg->hwfc;
    401e:	432c      	orrs	r4, r5
                    | (uint32_t)p_cfg->stop
    4020:	433a      	orrs	r2, r7
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    4022:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
    4026:	4322      	orrs	r2, r4
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    4028:	1d03      	adds	r3, r0, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    402a:	f8c6 256c 	str.w	r2, [r6, #1388]	; 0x56c
    402e:	c903      	ldmia	r1, {r0, r1}
    4030:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    4034:	2000      	movs	r0, #0
}
    4036:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    4038:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    403c:	e7ee      	b.n	401c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    403e:	4b14      	ldr	r3, [pc, #80]	; (4090 <CONFIG_FPROTECT_BLOCK_SIZE+0x90>)
    4040:	e7ec      	b.n	401c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    4042:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    4046:	e7e9      	b.n	401c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>
		nrf_baudrate = 0x00014000;
    4048:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    404c:	e7e6      	b.n	401c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>
	switch (baudrate) {
    404e:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    4052:	e7e3      	b.n	401c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    4054:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    4058:	e7e0      	b.n	401c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    405a:	4b0e      	ldr	r3, [pc, #56]	; (4094 <CONFIG_FPROTECT_BLOCK_SIZE+0x94>)
    405c:	e7de      	b.n	401c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    405e:	4b0e      	ldr	r3, [pc, #56]	; (4098 <CONFIG_FPROTECT_BLOCK_SIZE+0x98>)
    4060:	e7dc      	b.n	401c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    4062:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    4066:	e7d9      	b.n	401c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    4068:	4b0c      	ldr	r3, [pc, #48]	; (409c <CONFIG_FPROTECT_BLOCK_SIZE+0x9c>)
    406a:	e7d7      	b.n	401c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    406c:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    4070:	e7d4      	b.n	401c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    4072:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    4076:	e7d1      	b.n	401c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    4078:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    407c:	e7ce      	b.n	401c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>
    407e:	bf00      	nop
    4080:	0013b000 	.word	0x0013b000
    4084:	004ea000 	.word	0x004ea000
    4088:	0003d090 	.word	0x0003d090
    408c:	000f4240 	.word	0x000f4240
    4090:	00275000 	.word	0x00275000
    4094:	0075c000 	.word	0x0075c000
    4098:	003af000 	.word	0x003af000
    409c:	013a9000 	.word	0x013a9000

000040a0 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    40a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    40a4:	4607      	mov	r7, r0
    40a6:	b087      	sub	sp, #28
    40a8:	2200      	movs	r2, #0
    40aa:	2101      	movs	r1, #1
    40ac:	2008      	movs	r0, #8
    40ae:	f7fe fb2b 	bl	2708 <z_arm_irq_priority_set>
    40b2:	2008      	movs	r0, #8
    40b4:	f7fe faf6 	bl	26a4 <arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    40b8:	2100      	movs	r1, #0
	const struct uarte_nrfx_config *config = dev->config;
    40ba:	f8d7 8004 	ldr.w	r8, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
    40be:	693e      	ldr	r6, [r7, #16]
	return config->uarte_regs;
    40c0:	f8d8 4000 	ldr.w	r4, [r8]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    40c4:	f8d8 900c 	ldr.w	r9, [r8, #12]
    40c8:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	ret = pinctrl_lookup_state(config, id, &state);
    40cc:	466a      	mov	r2, sp
    40ce:	4648      	mov	r0, r9
	data->dev = dev;
    40d0:	6037      	str	r7, [r6, #0]
    40d2:	f003 fe2b 	bl	7d2c <pinctrl_lookup_state>
	if (ret < 0) {
    40d6:	1e05      	subs	r5, r0, #0
    40d8:	db26      	blt.n	4128 <uarte_0_init+0x88>
	return pinctrl_apply_state_direct(config, state);
    40da:	9b00      	ldr	r3, [sp, #0]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    40dc:	f8d9 2000 	ldr.w	r2, [r9]
    40e0:	7919      	ldrb	r1, [r3, #4]
    40e2:	6818      	ldr	r0, [r3, #0]
    40e4:	f003 fe3f 	bl	7d66 <pinctrl_configure_pins>
	if (err < 0) {
    40e8:	1e05      	subs	r5, r0, #0
    40ea:	db1d      	blt.n	4128 <uarte_0_init+0x88>
	err = uarte_nrfx_configure(dev, &data->uart_config);
    40ec:	4638      	mov	r0, r7
    40ee:	1d31      	adds	r1, r6, #4
    40f0:	f7ff ff18 	bl	3f24 <uarte_nrfx_configure>
	if (err) {
    40f4:	4605      	mov	r5, r0
    40f6:	b9b8      	cbnz	r0, 4128 <uarte_0_init+0x88>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    40f8:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    40fc:	0799      	lsls	r1, r3, #30
    40fe:	d523      	bpl.n	4148 <uarte_0_init+0xa8>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    4100:	f106 0018 	add.w	r0, r6, #24
    4104:	f000 fe40 	bl	4d88 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    4108:	4b24      	ldr	r3, [pc, #144]	; (419c <uarte_0_init+0xfc>)
    410a:	4298      	cmp	r0, r3
    410c:	d010      	beq.n	4130 <uarte_0_init+0x90>
		LOG_ERR("Failed to allocate PPI Channel");
    410e:	4b24      	ldr	r3, [pc, #144]	; (41a0 <uarte_0_init+0x100>)
    4110:	9305      	str	r3, [sp, #20]
    4112:	2302      	movs	r3, #2
    4114:	9304      	str	r3, [sp, #16]
    4116:	462b      	mov	r3, r5
		return -EIO;
    4118:	f06f 0504 	mvn.w	r5, #4
    411c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4120:	4820      	ldr	r0, [pc, #128]	; (41a4 <uarte_0_init+0x104>)
    4122:	aa04      	add	r2, sp, #16
    4124:	f7fd fdb0 	bl	1c88 <z_impl_z_log_msg_static_create>
UART_NRF_UARTE_DEVICE(0);
    4128:	4628      	mov	r0, r5
    412a:	b007      	add	sp, #28
    412c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    4130:	7e32      	ldrb	r2, [r6, #24]
    4132:	f042 4300 	orr.w	r3, r2, #2147483648	; 0x80000000
    4136:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    413a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    413e:	2301      	movs	r3, #1
    4140:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
    4142:	4a19      	ldr	r2, [pc, #100]	; (41a8 <uarte_0_init+0x108>)
    4144:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    4148:	2308      	movs	r3, #8
    414a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
    414e:	f898 3008 	ldrb.w	r3, [r8, #8]
    4152:	b953      	cbnz	r3, 416a <uarte_0_init+0xca>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4154:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    4158:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    415c:	6973      	ldr	r3, [r6, #20]
    415e:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    4162:	2301      	movs	r3, #1
    4164:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4168:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    416a:	f8d8 3004 	ldr.w	r3, [r8, #4]
    416e:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    4170:	bf5c      	itt	pl
    4172:	f44f 7280 	movpl.w	r2, #256	; 0x100
    4176:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    417a:	06db      	lsls	r3, r3, #27
    417c:	bf44      	itt	mi
    417e:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    4182:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    4186:	6933      	ldr	r3, [r6, #16]
    4188:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    418c:	2300      	movs	r3, #0
    418e:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4192:	2301      	movs	r3, #1
    4194:	60a3      	str	r3, [r4, #8]
    4196:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
    4198:	e7c6      	b.n	4128 <uarte_0_init+0x88>
    419a:	bf00      	nop
    419c:	0bad0000 	.word	0x0bad0000
    41a0:	00009568 	.word	0x00009568
    41a4:	000088fc 	.word	0x000088fc
    41a8:	50017000 	.word	0x50017000

000041ac <uarte_nrfx_poll_out>:
{
    41ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    41ae:	4604      	mov	r4, r0
    41b0:	460d      	mov	r5, r1
	struct uarte_nrfx_data *data = dev->data;
    41b2:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    41b4:	f004 f845 	bl	8242 <k_is_in_isr>
    41b8:	b910      	cbnz	r0, 41c0 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    41ba:	4b2d      	ldr	r3, [pc, #180]	; (4270 <uarte_nrfx_poll_out+0xc4>)
	if (isr_mode) {
    41bc:	781b      	ldrb	r3, [r3, #0]
    41be:	b98b      	cbnz	r3, 41e4 <uarte_nrfx_poll_out+0x38>
	__asm__ volatile(
    41c0:	f04f 0320 	mov.w	r3, #32
    41c4:	f3ef 8611 	mrs	r6, BASEPRI
    41c8:	f383 8812 	msr	BASEPRI_MAX, r3
    41cc:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    41d0:	6860      	ldr	r0, [r4, #4]
    41d2:	4631      	mov	r1, r6
    41d4:	f003 fd45 	bl	7c62 <is_tx_ready.isra.0>
    41d8:	bb30      	cbnz	r0, 4228 <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
    41da:	f386 8811 	msr	BASEPRI, r6
    41de:	f3bf 8f6f 	isb	sy
}
    41e2:	e7ed      	b.n	41c0 <uarte_nrfx_poll_out+0x14>
{
    41e4:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    41e6:	6860      	ldr	r0, [r4, #4]
    41e8:	f003 fd3b 	bl	7c62 <is_tx_ready.isra.0>
    41ec:	b970      	cbnz	r0, 420c <uarte_nrfx_poll_out+0x60>
    41ee:	2001      	movs	r0, #1
    41f0:	f003 fe8d 	bl	7f0e <nrfx_busy_wait>
    41f4:	3e01      	subs	r6, #1
    41f6:	d1f6      	bne.n	41e6 <uarte_nrfx_poll_out+0x3a>
	return z_impl_k_sleep(timeout);
    41f8:	2100      	movs	r1, #0
    41fa:	2021      	movs	r0, #33	; 0x21
    41fc:	f002 fa66 	bl	66cc <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    4200:	e7f0      	b.n	41e4 <uarte_nrfx_poll_out+0x38>
	__asm__ volatile(
    4202:	f386 8811 	msr	BASEPRI, r6
    4206:	f3bf 8f6f 	isb	sy
}
    420a:	e7f5      	b.n	41f8 <uarte_nrfx_poll_out+0x4c>
	__asm__ volatile(
    420c:	f04f 0320 	mov.w	r3, #32
    4210:	f3ef 8611 	mrs	r6, BASEPRI
    4214:	f383 8812 	msr	BASEPRI_MAX, r3
    4218:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    421c:	6860      	ldr	r0, [r4, #4]
    421e:	4631      	mov	r1, r6
    4220:	f003 fd1f 	bl	7c62 <is_tx_ready.isra.0>
    4224:	2800      	cmp	r0, #0
    4226:	d0ec      	beq.n	4202 <uarte_nrfx_poll_out+0x56>
	*data->char_out = c;
    4228:	693b      	ldr	r3, [r7, #16]
    422a:	701d      	strb	r5, [r3, #0]
	tx_start(dev, data->char_out, 1);
    422c:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    422e:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
    4230:	6813      	ldr	r3, [r2, #0]
    4232:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    4236:	2001      	movs	r0, #1
    4238:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    423c:	2000      	movs	r0, #0
    423e:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    4242:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
    4246:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    424a:	6852      	ldr	r2, [r2, #4]
    424c:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
    4250:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    4252:	bf41      	itttt	mi
    4254:	2208      	movmi	r2, #8
    4256:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    425a:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    425e:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4262:	2201      	movs	r2, #1
    4264:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    4266:	f381 8811 	msr	BASEPRI, r1
    426a:	f3bf 8f6f 	isb	sy
}
    426e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4270:	20020593 	.word	0x20020593

00004274 <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    4274:	2301      	movs	r3, #1
    4276:	4083      	lsls	r3, r0
{
    4278:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    427a:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    427c:	4a0d      	ldr	r2, [pc, #52]	; (42b4 <compare_int_lock+0x40>)
    427e:	e8d2 1fef 	ldaex	r1, [r2]
    4282:	ea01 0c04 	and.w	ip, r1, r4
    4286:	e8c2 cfee 	stlex	lr, ip, [r2]
    428a:	f1be 0f00 	cmp.w	lr, #0
    428e:	d1f6      	bne.n	427e <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4290:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    4294:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    4298:	f102 2250 	add.w	r2, r2, #1342197760	; 0x50005000
    429c:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    42a0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    42a4:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    42a8:	420b      	tst	r3, r1
}
    42aa:	bf14      	ite	ne
    42ac:	2001      	movne	r0, #1
    42ae:	2000      	moveq	r0, #0
    42b0:	bd10      	pop	{r4, pc}
    42b2:	bf00      	nop
    42b4:	200202c0 	.word	0x200202c0

000042b8 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    42b8:	4919      	ldr	r1, [pc, #100]	; (4320 <sys_clock_timeout_handler+0x68>)
{
    42ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    42bc:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    42be:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    42c2:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    42c4:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    42c8:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    42cc:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    42ce:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    42d2:	d222      	bcs.n	431a <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    42d4:	4b13      	ldr	r3, [pc, #76]	; (4324 <sys_clock_timeout_handler+0x6c>)
    42d6:	681b      	ldr	r3, [r3, #0]
    42d8:	0a1a      	lsrs	r2, r3, #8
    42da:	061b      	lsls	r3, r3, #24
    42dc:	195e      	adds	r6, r3, r5
    42de:	4b12      	ldr	r3, [pc, #72]	; (4328 <sys_clock_timeout_handler+0x70>)
    42e0:	f142 0700 	adc.w	r7, r2, #0
    42e4:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
    42e8:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    42ea:	f002 fb4d 	bl	6988 <sys_clock_announce>
    return p_reg->CC[ch];
    42ee:	00a3      	lsls	r3, r4, #2
    42f0:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    42f4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    42f8:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    42fc:	42aa      	cmp	r2, r5
    42fe:	d10b      	bne.n	4318 <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    4300:	b91e      	cbnz	r6, 430a <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
    4302:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    4306:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    430a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    430e:	4b07      	ldr	r3, [pc, #28]	; (432c <sys_clock_timeout_handler+0x74>)
    4310:	fa00 f404 	lsl.w	r4, r0, r4
    4314:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    4318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    431a:	2600      	movs	r6, #0
    431c:	e7e5      	b.n	42ea <sys_clock_timeout_handler+0x32>
    431e:	bf00      	nop
    4320:	200006b8 	.word	0x200006b8
    4324:	200202c4 	.word	0x200202c4
    4328:	20000690 	.word	0x20000690
    432c:	50015000 	.word	0x50015000

00004330 <compare_int_unlock>:
	if (key) {
    4330:	b1e1      	cbz	r1, 436c <compare_int_unlock+0x3c>
		atomic_or(&int_mask, BIT(chan));
    4332:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4334:	4a0e      	ldr	r2, [pc, #56]	; (4370 <compare_int_unlock+0x40>)
    4336:	4083      	lsls	r3, r0
    4338:	e8d2 1fef 	ldaex	r1, [r2]
    433c:	4319      	orrs	r1, r3
    433e:	e8c2 1fec 	stlex	ip, r1, [r2]
    4342:	f1bc 0f00 	cmp.w	ip, #0
    4346:	d1f7      	bne.n	4338 <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4348:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
    434c:	4a09      	ldr	r2, [pc, #36]	; (4374 <compare_int_unlock+0x44>)
    434e:	4083      	lsls	r3, r0
    4350:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4354:	4b08      	ldr	r3, [pc, #32]	; (4378 <compare_int_unlock+0x48>)
    4356:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    435a:	fa23 f000 	lsr.w	r0, r3, r0
    435e:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4360:	bf42      	ittt	mi
    4362:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
    4366:	4b05      	ldrmi	r3, [pc, #20]	; (437c <compare_int_unlock+0x4c>)
    4368:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    436c:	4770      	bx	lr
    436e:	bf00      	nop
    4370:	200202c0 	.word	0x200202c0
    4374:	50015000 	.word	0x50015000
    4378:	200202bc 	.word	0x200202bc
    437c:	e000e100 	.word	0xe000e100

00004380 <z_nrf_rtc_timer_compare_evt_address_get>:
    p_reg->EVTENCLR = mask;
}

NRF_STATIC_INLINE nrf_rtc_event_t nrf_rtc_compare_event_get(uint8_t index)
{
    return (nrf_rtc_event_t)NRFX_OFFSETOF(NRF_RTC_Type, EVENTS_COMPARE[index]);
    4380:	b2c3      	uxtb	r3, r0
}
    4382:	4802      	ldr	r0, [pc, #8]	; (438c <z_nrf_rtc_timer_compare_evt_address_get+0xc>)
    4384:	009b      	lsls	r3, r3, #2
    4386:	4418      	add	r0, r3
    4388:	4770      	bx	lr
    438a:	bf00      	nop
    438c:	50015140 	.word	0x50015140

00004390 <z_nrf_rtc_timer_compare_read>:
    return p_reg->CC[ch];
    4390:	4b02      	ldr	r3, [pc, #8]	; (439c <z_nrf_rtc_timer_compare_read+0xc>)
    4392:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    4396:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
    439a:	4770      	bx	lr
    439c:	50015000 	.word	0x50015000

000043a0 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    43a0:	4b0d      	ldr	r3, [pc, #52]	; (43d8 <z_nrf_rtc_timer_read+0x38>)
    43a2:	6818      	ldr	r0, [r3, #0]
    43a4:	0a01      	lsrs	r1, r0, #8
    43a6:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    43a8:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    43ac:	4b0b      	ldr	r3, [pc, #44]	; (43dc <z_nrf_rtc_timer_read+0x3c>)
    43ae:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    43b2:	1818      	adds	r0, r3, r0
    43b4:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    43b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    43bc:	d20a      	bcs.n	43d4 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    43be:	4b08      	ldr	r3, [pc, #32]	; (43e0 <z_nrf_rtc_timer_read+0x40>)
    43c0:	e9d3 2300 	ldrd	r2, r3, [r3]
    43c4:	4290      	cmp	r0, r2
    43c6:	eb71 0303 	sbcs.w	r3, r1, r3
    43ca:	d203      	bcs.n	43d4 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    43cc:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    43d0:	f141 0100 	adc.w	r1, r1, #0
}
    43d4:	4770      	bx	lr
    43d6:	bf00      	nop
    43d8:	200202c4 	.word	0x200202c4
    43dc:	50015000 	.word	0x50015000
    43e0:	20000690 	.word	0x20000690

000043e4 <compare_set>:
{
    43e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    43e8:	b085      	sub	sp, #20
    43ea:	4616      	mov	r6, r2
    43ec:	461f      	mov	r7, r3
    43ee:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    43f0:	f7ff ff40 	bl	4274 <compare_int_lock>
    43f4:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    43f6:	f7ff ffd3 	bl	43a0 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    43fa:	42b0      	cmp	r0, r6
    43fc:	eb71 0307 	sbcs.w	r3, r1, r7
    4400:	d275      	bcs.n	44ee <compare_set+0x10a>
		if (target_time - curr_time > COUNTER_SPAN) {
    4402:	4b43      	ldr	r3, [pc, #268]	; (4510 <compare_set+0x12c>)
    4404:	1a30      	subs	r0, r6, r0
    4406:	eb67 0101 	sbc.w	r1, r7, r1
    440a:	4298      	cmp	r0, r3
    440c:	f171 0300 	sbcs.w	r3, r1, #0
    4410:	d27a      	bcs.n	4508 <compare_set+0x124>
		if (target_time != cc_data[chan].target_time) {
    4412:	4b40      	ldr	r3, [pc, #256]	; (4514 <compare_set+0x130>)
    4414:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    4418:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
    441c:	454f      	cmp	r7, r9
    441e:	bf08      	it	eq
    4420:	4546      	cmpeq	r6, r8
    4422:	d04f      	beq.n	44c4 <compare_set+0xe0>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4424:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	return absolute_time & COUNTER_MAX;
    4428:	f026 437f 	bic.w	r3, r6, #4278190080	; 0xff000000
    442c:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
    442e:	00ab      	lsls	r3, r5, #2
    4430:	f103 2a50 	add.w	sl, r3, #1342197760	; 0x50005000
    4434:	f50a 3a80 	add.w	sl, sl, #65536	; 0x10000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4438:	fa02 f305 	lsl.w	r3, r2, r5
    443c:	f8da 0540 	ldr.w	r0, [sl, #1344]	; 0x540
     return p_reg->COUNTER;
    4440:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 4518 <compare_set+0x134>
    4444:	9302      	str	r3, [sp, #8]
	uint32_t cc_val = abs_val & COUNTER_MAX;
    4446:	f026 447f 	bic.w	r4, r6, #4278190080	; 0xff000000
    444a:	f8db 2504 	ldr.w	r2, [fp, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    444e:	1a80      	subs	r0, r0, r2
    4450:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    4454:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    4458:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    445a:	f8ca 3540 	str.w	r3, [sl, #1344]	; 0x540
    445e:	d104      	bne.n	446a <compare_set+0x86>
    4460:	9203      	str	r2, [sp, #12]
	z_impl_k_busy_wait(usec_to_wait);
    4462:	2013      	movs	r0, #19
    4464:	f004 f836 	bl	84d4 <z_impl_k_busy_wait>
    4468:	9a03      	ldr	r2, [sp, #12]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    446a:	f102 0c02 	add.w	ip, r2, #2
	return (a - b) & COUNTER_MAX;
    446e:	eba4 000c 	sub.w	r0, r4, ip
    4472:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    4476:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    447a:	bf88      	it	hi
    447c:	4664      	movhi	r4, ip
		event_clear(chan);
    447e:	4628      	mov	r0, r5
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    4480:	9203      	str	r2, [sp, #12]
		event_clear(chan);
    4482:	f003 fc38 	bl	7cf6 <event_clear>
    p_reg->EVTENSET = mask;
    4486:	9b02      	ldr	r3, [sp, #8]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    4488:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    448c:	f8cb 3344 	str.w	r3, [fp, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
    4490:	f8ca 0540 	str.w	r0, [sl, #1344]	; 0x540
     return p_reg->COUNTER;
    4494:	f8db 0504 	ldr.w	r0, [fp, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    4498:	9a03      	ldr	r2, [sp, #12]
    449a:	4282      	cmp	r2, r0
    449c:	d00a      	beq.n	44b4 <compare_set+0xd0>
	return (a - b) & COUNTER_MAX;
    449e:	f1c0 20ff 	rsb	r0, r0, #4278255360	; 0xff00ff00
    44a2:	f500 007f 	add.w	r0, r0, #16711680	; 0xff0000
    44a6:	30fe      	adds	r0, #254	; 0xfe
    44a8:	4420      	add	r0, r4
    44aa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    44ae:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    44b2:	d81a      	bhi.n	44ea <compare_set+0x106>
	return (a - b) & COUNTER_MAX;
    44b4:	9b01      	ldr	r3, [sp, #4]
    44b6:	1ae4      	subs	r4, r4, r3
    44b8:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    44bc:	eb14 0806 	adds.w	r8, r4, r6
    44c0:	f147 0900 	adc.w	r9, r7, #0
	return ret;
    44c4:	2400      	movs	r4, #0
	cc_data[chan].target_time = target_time;
    44c6:	4913      	ldr	r1, [pc, #76]	; (4514 <compare_set+0x130>)
	cc_data[chan].callback = handler;
    44c8:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
    44ca:	012b      	lsls	r3, r5, #4
    44cc:	eb01 1205 	add.w	r2, r1, r5, lsl #4
	cc_data[chan].callback = handler;
    44d0:	50c8      	str	r0, [r1, r3]
	cc_data[chan].target_time = target_time;
    44d2:	e9c2 8902 	strd	r8, r9, [r2, #8]
	cc_data[chan].user_context = user_data;
    44d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    44d8:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
    44da:	4628      	mov	r0, r5
    44dc:	9900      	ldr	r1, [sp, #0]
    44de:	f7ff ff27 	bl	4330 <compare_int_unlock>
}
    44e2:	4620      	mov	r0, r4
    44e4:	b005      	add	sp, #20
    44e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    44ea:	4620      	mov	r0, r4
    44ec:	e7ad      	b.n	444a <compare_set+0x66>
		atomic_or(&force_isr_mask, BIT(chan));
    44ee:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    44f0:	4a0a      	ldr	r2, [pc, #40]	; (451c <compare_set+0x138>)
    44f2:	40ab      	lsls	r3, r5
    44f4:	e8d2 1fef 	ldaex	r1, [r2]
    44f8:	4319      	orrs	r1, r3
    44fa:	e8c2 1fe0 	stlex	r0, r1, [r2]
    44fe:	2800      	cmp	r0, #0
    4500:	d1f8      	bne.n	44f4 <compare_set+0x110>
    4502:	46b0      	mov	r8, r6
    4504:	46b9      	mov	r9, r7
    4506:	e7dd      	b.n	44c4 <compare_set+0xe0>
			return -EINVAL;
    4508:	f06f 0415 	mvn.w	r4, #21
    450c:	e7e5      	b.n	44da <compare_set+0xf6>
    450e:	bf00      	nop
    4510:	01000001 	.word	0x01000001
    4514:	20000698 	.word	0x20000698
    4518:	50015000 	.word	0x50015000
    451c:	200202bc 	.word	0x200202bc

00004520 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    4520:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->INTENSET = mask;
    4522:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    p_reg->PRESCALER = val;
    4526:	2500      	movs	r5, #0
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    4528:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    452c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4530:	4c19      	ldr	r4, [pc, #100]	; (4598 <sys_clock_driver_init+0x78>)
    4532:	4b1a      	ldr	r3, [pc, #104]	; (459c <sys_clock_driver_init+0x7c>)
    4534:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    4538:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    453c:	f8c4 2304 	str.w	r2, [r4, #772]	; 0x304
    4540:	e9c3 0106 	strd	r0, r1, [r3, #24]
    4544:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    4548:	2602      	movs	r6, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    454a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    454e:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    4552:	4b13      	ldr	r3, [pc, #76]	; (45a0 <sys_clock_driver_init+0x80>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    4554:	2101      	movs	r1, #1
    4556:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    455a:	2015      	movs	r0, #21
    455c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    4560:	462a      	mov	r2, r5
    4562:	f7fe f8d1 	bl	2708 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    4566:	2015      	movs	r0, #21
    4568:	f7fe f89c 	bl	26a4 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    456c:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    456e:	2203      	movs	r2, #3
    4570:	60a3      	str	r3, [r4, #8]
    4572:	6023      	str	r3, [r4, #0]
    4574:	4b0b      	ldr	r3, [pc, #44]	; (45a4 <sys_clock_driver_init+0x84>)

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    4576:	4628      	mov	r0, r5
	int_mask = BIT_MASK(CHAN_COUNT);
    4578:	601a      	str	r2, [r3, #0]
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
    457a:	4b0b      	ldr	r3, [pc, #44]	; (45a8 <sys_clock_driver_init+0x88>)
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    457c:	4a0b      	ldr	r2, [pc, #44]	; (45ac <sys_clock_driver_init+0x8c>)
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
    457e:	601e      	str	r6, [r3, #0]
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    4580:	4b0b      	ldr	r3, [pc, #44]	; (45b0 <sys_clock_driver_init+0x90>)
    4582:	9501      	str	r5, [sp, #4]
    4584:	9300      	str	r3, [sp, #0]
    4586:	2300      	movs	r3, #0
    4588:	f7ff ff2c 	bl	43e4 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    458c:	4630      	mov	r0, r6
    458e:	f7fe fff1 	bl	3574 <z_nrf_clock_control_lf_on>

	return 0;
}
    4592:	4628      	mov	r0, r5
    4594:	b002      	add	sp, #8
    4596:	bd70      	pop	{r4, r5, r6, pc}
    4598:	50015000 	.word	0x50015000
    459c:	20000698 	.word	0x20000698
    45a0:	e000e100 	.word	0xe000e100
    45a4:	200202c0 	.word	0x200202c0
    45a8:	200202b8 	.word	0x200202b8
    45ac:	007fffff 	.word	0x007fffff
    45b0:	000042b9 	.word	0x000042b9

000045b4 <rtc_nrf_isr>:
    return p_reg->INTENSET & mask;
    45b4:	4b3a      	ldr	r3, [pc, #232]	; (46a0 <rtc_nrf_isr+0xec>)
{
    45b6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    45ba:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    45be:	0792      	lsls	r2, r2, #30
    45c0:	d50b      	bpl.n	45da <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    45c2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    45c6:	b142      	cbz	r2, 45da <rtc_nrf_isr+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    45c8:	2200      	movs	r2, #0
    45ca:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
    45ce:	4a35      	ldr	r2, [pc, #212]	; (46a4 <rtc_nrf_isr+0xf0>)
    45d0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    45d4:	6813      	ldr	r3, [r2, #0]
    45d6:	3301      	adds	r3, #1
    45d8:	6013      	str	r3, [r2, #0]
{
    45da:	2400      	movs	r4, #0
    45dc:	4d32      	ldr	r5, [pc, #200]	; (46a8 <rtc_nrf_isr+0xf4>)
    return p_reg->INTENSET & mask;
    45de:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 46a0 <rtc_nrf_isr+0xec>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    45e2:	4f32      	ldr	r7, [pc, #200]	; (46ac <rtc_nrf_isr+0xf8>)
	__asm__ volatile(
    45e4:	f04f 0320 	mov.w	r3, #32
    45e8:	f3ef 8111 	mrs	r1, BASEPRI
    45ec:	f383 8812 	msr	BASEPRI_MAX, r3
    45f0:	f3bf 8f6f 	isb	sy
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    45f4:	f44f 3680 	mov.w	r6, #65536	; 0x10000
    45f8:	f8d8 3304 	ldr.w	r3, [r8, #772]	; 0x304
    45fc:	40a6      	lsls	r6, r4
    45fe:	421e      	tst	r6, r3
    4600:	d134      	bne.n	466c <rtc_nrf_isr+0xb8>
	bool result = false;
    4602:	2300      	movs	r3, #0
	__asm__ volatile(
    4604:	f381 8811 	msr	BASEPRI, r1
    4608:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    460c:	b33b      	cbz	r3, 465e <rtc_nrf_isr+0xaa>
		curr_time = z_nrf_rtc_timer_read();
    460e:	f7ff fec7 	bl	43a0 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    4612:	f04f 0320 	mov.w	r3, #32
    4616:	f3ef 8e11 	mrs	lr, BASEPRI
    461a:	f383 8812 	msr	BASEPRI_MAX, r3
    461e:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    4622:	4b21      	ldr	r3, [pc, #132]	; (46a8 <rtc_nrf_isr+0xf4>)
    4624:	eb03 1c04 	add.w	ip, r3, r4, lsl #4
    4628:	e9dc 2302 	ldrd	r2, r3, [ip, #8]
		if (curr_time >= expire_time) {
    462c:	4290      	cmp	r0, r2
    462e:	4199      	sbcs	r1, r3
    4630:	f04f 0000 	mov.w	r0, #0
    4634:	d331      	bcc.n	469a <rtc_nrf_isr+0xe6>
			user_context = cc_data[chan].user_context;
    4636:	e9d5 1900 	ldrd	r1, r9, [r5]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    463a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    463e:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
			cc_data[chan].callback = NULL;
    4642:	6028      	str	r0, [r5, #0]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    4644:	e9cc ab02 	strd	sl, fp, [ip, #8]
    p_reg->EVTENCLR = mask;
    4648:	f8c8 6348 	str.w	r6, [r8, #840]	; 0x348
	__asm__ volatile(
    464c:	f38e 8811 	msr	BASEPRI, lr
    4650:	f3bf 8f6f 	isb	sy
		if (handler) {
    4654:	b119      	cbz	r1, 465e <rtc_nrf_isr+0xaa>
			handler(chan, expire_time, user_context);
    4656:	4620      	mov	r0, r4
    4658:	f8cd 9000 	str.w	r9, [sp]
    465c:	4788      	blx	r1
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    465e:	3510      	adds	r5, #16
    4660:	b114      	cbz	r4, 4668 <rtc_nrf_isr+0xb4>
}
    4662:	b003      	add	sp, #12
    4664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4668:	2401      	movs	r4, #1
    466a:	e7bb      	b.n	45e4 <rtc_nrf_isr+0x30>
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    466c:	2301      	movs	r3, #1
    466e:	40a3      	lsls	r3, r4
    4670:	43db      	mvns	r3, r3
    4672:	e8d7 2fef 	ldaex	r2, [r7]
    4676:	ea02 0003 	and.w	r0, r2, r3
    467a:	e8c7 0fec 	stlex	ip, r0, [r7]
    467e:	f1bc 0f00 	cmp.w	ip, #0
    4682:	d1f6      	bne.n	4672 <rtc_nrf_isr+0xbe>
    4684:	b922      	cbnz	r2, 4690 <rtc_nrf_isr+0xdc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4686:	4b0a      	ldr	r3, [pc, #40]	; (46b0 <rtc_nrf_isr+0xfc>)
    4688:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
		if (result) {
    468c:	2b00      	cmp	r3, #0
    468e:	d0b8      	beq.n	4602 <rtc_nrf_isr+0x4e>
			event_clear(chan);
    4690:	4620      	mov	r0, r4
    4692:	f003 fb30 	bl	7cf6 <event_clear>
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    4696:	2301      	movs	r3, #1
    4698:	e7b4      	b.n	4604 <rtc_nrf_isr+0x50>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    469a:	4601      	mov	r1, r0
    469c:	e7d6      	b.n	464c <rtc_nrf_isr+0x98>
    469e:	bf00      	nop
    46a0:	50015000 	.word	0x50015000
    46a4:	200202c4 	.word	0x200202c4
    46a8:	20000698 	.word	0x20000698
    46ac:	200202bc 	.word	0x200202bc
    46b0:	50015140 	.word	0x50015140

000046b4 <z_nrf_rtc_timer_chan_alloc>:
{
    46b4:	b510      	push	{r4, lr}
		prev = atomic_and(&alloc_mask, ~BIT(chan));
    46b6:	2401      	movs	r4, #1
		chan = alloc_mask ? 31 - __builtin_clz(alloc_mask) : -1;
    46b8:	4b0c      	ldr	r3, [pc, #48]	; (46ec <z_nrf_rtc_timer_chan_alloc+0x38>)
    46ba:	6818      	ldr	r0, [r3, #0]
    46bc:	b198      	cbz	r0, 46e6 <z_nrf_rtc_timer_chan_alloc+0x32>
    46be:	fab0 f080 	clz	r0, r0
    46c2:	f1c0 001f 	rsb	r0, r0, #31
		prev = atomic_and(&alloc_mask, ~BIT(chan));
    46c6:	fa04 f100 	lsl.w	r1, r4, r0
    46ca:	43c9      	mvns	r1, r1
    46cc:	e8d3 2fef 	ldaex	r2, [r3]
    46d0:	ea02 0c01 	and.w	ip, r2, r1
    46d4:	e8c3 cfee 	stlex	lr, ip, [r3]
    46d8:	f1be 0f00 	cmp.w	lr, #0
    46dc:	d1f6      	bne.n	46cc <z_nrf_rtc_timer_chan_alloc+0x18>
	} while (!(prev & BIT(chan)));
    46de:	40c2      	lsrs	r2, r0
    46e0:	07d2      	lsls	r2, r2, #31
    46e2:	d5ea      	bpl.n	46ba <z_nrf_rtc_timer_chan_alloc+0x6>
}
    46e4:	bd10      	pop	{r4, pc}
			return -ENOMEM;
    46e6:	f06f 000b 	mvn.w	r0, #11
    46ea:	e7fb      	b.n	46e4 <z_nrf_rtc_timer_chan_alloc+0x30>
    46ec:	200202b8 	.word	0x200202b8

000046f0 <z_nrf_rtc_timer_chan_free>:
	atomic_or(&alloc_mask, BIT(chan));
    46f0:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    46f2:	4a05      	ldr	r2, [pc, #20]	; (4708 <z_nrf_rtc_timer_chan_free+0x18>)
    46f4:	4083      	lsls	r3, r0
    46f6:	e8d2 1fef 	ldaex	r1, [r2]
    46fa:	4319      	orrs	r1, r3
    46fc:	e8c2 1fe0 	stlex	r0, r1, [r2]
    4700:	2800      	cmp	r0, #0
    4702:	d1f8      	bne.n	46f6 <z_nrf_rtc_timer_chan_free+0x6>
}
    4704:	4770      	bx	lr
    4706:	bf00      	nop
    4708:	200202b8 	.word	0x200202b8

0000470c <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    470c:	1c43      	adds	r3, r0, #1
{
    470e:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    4710:	d020      	beq.n	4754 <sys_clock_set_timeout+0x48>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    4712:	2801      	cmp	r0, #1
    4714:	dd20      	ble.n	4758 <sys_clock_set_timeout+0x4c>
    4716:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    471a:	da1f      	bge.n	475c <sys_clock_set_timeout+0x50>
    471c:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    471e:	f7ff fe3f 	bl	43a0 <z_nrf_rtc_timer_read>
    4722:	4b0f      	ldr	r3, [pc, #60]	; (4760 <sys_clock_set_timeout+0x54>)
    4724:	e9d3 1300 	ldrd	r1, r3, [r3]
    4728:	1a40      	subs	r0, r0, r1
		ticks = 0;
    472a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    472e:	bf28      	it	cs
    4730:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    4732:	3001      	adds	r0, #1
    4734:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
    4736:	480b      	ldr	r0, [pc, #44]	; (4764 <sys_clock_set_timeout+0x58>)
    4738:	4282      	cmp	r2, r0
    473a:	bf28      	it	cs
    473c:	4602      	movcs	r2, r0
    473e:	2000      	movs	r0, #0
    4740:	1852      	adds	r2, r2, r1
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    4742:	4909      	ldr	r1, [pc, #36]	; (4768 <sys_clock_set_timeout+0x5c>)
    4744:	9001      	str	r0, [sp, #4]
    4746:	9100      	str	r1, [sp, #0]
    4748:	f143 0300 	adc.w	r3, r3, #0
    474c:	f7ff fe4a 	bl	43e4 <compare_set>
}
    4750:	b002      	add	sp, #8
    4752:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    4754:	4803      	ldr	r0, [pc, #12]	; (4764 <sys_clock_set_timeout+0x58>)
    4756:	e7e1      	b.n	471c <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    4758:	2400      	movs	r4, #0
    475a:	e7e0      	b.n	471e <sys_clock_set_timeout+0x12>
    475c:	4c01      	ldr	r4, [pc, #4]	; (4764 <sys_clock_set_timeout+0x58>)
    475e:	e7de      	b.n	471e <sys_clock_set_timeout+0x12>
    4760:	200006b8 	.word	0x200006b8
    4764:	007fffff 	.word	0x007fffff
    4768:	000042b9 	.word	0x000042b9

0000476c <sys_clock_elapsed>:
{
    476c:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    476e:	f7ff fe17 	bl	43a0 <z_nrf_rtc_timer_read>
    4772:	4b02      	ldr	r3, [pc, #8]	; (477c <sys_clock_elapsed+0x10>)
    4774:	681b      	ldr	r3, [r3, #0]
}
    4776:	1ac0      	subs	r0, r0, r3
    4778:	bd08      	pop	{r3, pc}
    477a:	bf00      	nop
    477c:	200006b8 	.word	0x200006b8

00004780 <nrf_gpio_pin_clear>:
        case 1: return NRF_P1;
    4780:	4a05      	ldr	r2, [pc, #20]	; (4798 <nrf_gpio_pin_clear+0x18>)
    4782:	4b06      	ldr	r3, [pc, #24]	; (479c <nrf_gpio_pin_clear+0x1c>)
    *p_pin = pin_number & 0x1F;
    4784:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    4788:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    478a:	2801      	cmp	r0, #1
    478c:	bf08      	it	eq
    478e:	4613      	moveq	r3, r2
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    4790:	2201      	movs	r2, #1
    4792:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
    4794:	60da      	str	r2, [r3, #12]
}
    4796:	4770      	bx	lr
    4798:	50842800 	.word	0x50842800
    479c:	50842500 	.word	0x50842500

000047a0 <nrf_pin_configure>:
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input,
				       nrf_gpio_pin_drive_t drive)
{
    47a0:	b570      	push	{r4, r5, r6, lr}
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    47a2:	f400 5480 	and.w	r4, r0, #4096	; 0x1000
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    47a6:	2c00      	cmp	r4, #0
        case 1: return NRF_P1;
    47a8:	4e0e      	ldr	r6, [pc, #56]	; (47e4 <nrf_pin_configure+0x44>)
    47aa:	bf0e      	itee	eq
    47ac:	4615      	moveq	r5, r2
    47ae:	2501      	movne	r5, #1
    47b0:	2100      	movne	r1, #0
    47b2:	f010 0f20 	tst.w	r0, #32
    *p_pin = pin_number & 0x1F;
    47b6:	f000 041f 	and.w	r4, r0, #31
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin), drive,
    47ba:	f3c0 1281 	ubfx	r2, r0, #6, #2
        case 1: return NRF_P1;
    47be:	480a      	ldr	r0, [pc, #40]	; (47e8 <nrf_pin_configure+0x48>)
    47c0:	bf18      	it	ne
    47c2:	4630      	movne	r0, r6
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    47c4:	021b      	lsls	r3, r3, #8
    47c6:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    47ca:	f8d0 4200 	ldr.w	r4, [r0, #512]	; 0x200
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    47ce:	ea43 0282 	orr.w	r2, r3, r2, lsl #2
    47d2:	430a      	orrs	r2, r1
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    47d4:	f004 44e0 	and.w	r4, r4, #1879048192	; 0x70000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    47d8:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    47dc:	4322      	orrs	r2, r4
    reg->PIN_CNF[pin_number] = cnf;
    47de:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
		     NRF_GPIO_PIN_NOSENSE);
}
    47e2:	bd70      	pop	{r4, r5, r6, pc}
    47e4:	50842800 	.word	0x50842800
    47e8:	50842500 	.word	0x50842500

000047ec <nrf_gpio_pin_set>:
        case 1: return NRF_P1;
    47ec:	4a05      	ldr	r2, [pc, #20]	; (4804 <nrf_gpio_pin_set+0x18>)
    47ee:	4b06      	ldr	r3, [pc, #24]	; (4808 <nrf_gpio_pin_set+0x1c>)
    *p_pin = pin_number & 0x1F;
    47f0:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    47f4:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    47f6:	2801      	cmp	r0, #1
    47f8:	bf08      	it	eq
    47fa:	4613      	moveq	r3, r2
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    47fc:	2201      	movs	r2, #1
    47fe:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    4800:	609a      	str	r2, [r3, #8]
}
    4802:	4770      	bx	lr
    4804:	50842800 	.word	0x50842800
    4808:	50842500 	.word	0x50842500

0000480c <mbox_nrf_init>:

	nrfx_ipc_config_load(&ch_config);
}

static int mbox_nrf_init(const struct device *dev)
{
    480c:	b530      	push	{r4, r5, lr}
    480e:	4604      	mov	r4, r0
	struct mbox_nrf_data *data = dev->data;
    4810:	6902      	ldr	r2, [r0, #16]
{
    4812:	b0a9      	sub	sp, #164	; 0xa4

	data->dev = dev;
    4814:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80

	nrfx_ipc_init(0, mbox_dispatcher, (void *) data);
    4818:	4926      	ldr	r1, [pc, #152]	; (48b4 <mbox_nrf_init+0xa8>)
    481a:	2000      	movs	r0, #0
    481c:	f000 fe2a 	bl	5474 <nrfx_ipc_init>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4820:	2200      	movs	r2, #0
    4822:	2101      	movs	r1, #1
    4824:	202a      	movs	r0, #42	; 0x2a
    4826:	f7fd ff6f 	bl	2708 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	enable_dt_channels(dev);
    482a:	6864      	ldr	r4, [r4, #4]
	nrfx_ipc_config_t ch_config = { 0 };
    482c:	2284      	movs	r2, #132	; 0x84
    482e:	2100      	movs	r1, #0
    4830:	a807      	add	r0, sp, #28
    4832:	f003 f8ee 	bl	7a12 <memset>
	if (conf->tx_mask >= BIT(IPC_CONF_NUM)) {
    4836:	6863      	ldr	r3, [r4, #4]
    4838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    483c:	d30a      	bcc.n	4854 <mbox_nrf_init+0x48>
		LOG_WRN("tx_mask too big (or IPC_CONF_NUM too small)");
    483e:	4b1e      	ldr	r3, [pc, #120]	; (48b8 <mbox_nrf_init+0xac>)
    4840:	9305      	str	r3, [sp, #20]
    4842:	2302      	movs	r3, #2
    4844:	9304      	str	r3, [sp, #16]
    4846:	2300      	movs	r3, #0
    4848:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    484c:	481b      	ldr	r0, [pc, #108]	; (48bc <mbox_nrf_init+0xb0>)
    484e:	aa04      	add	r2, sp, #16
    4850:	f7fd fa1a 	bl	1c88 <z_impl_z_log_msg_static_create>
	if (conf->rx_mask >= BIT(IPC_CONF_NUM)) {
    4854:	6823      	ldr	r3, [r4, #0]
    4856:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    485a:	d30a      	bcc.n	4872 <mbox_nrf_init+0x66>
		LOG_WRN("rx_mask too big (or IPC_CONF_NUM too small)");
    485c:	4b18      	ldr	r3, [pc, #96]	; (48c0 <mbox_nrf_init+0xb4>)
    485e:	9305      	str	r3, [sp, #20]
    4860:	2302      	movs	r3, #2
    4862:	9304      	str	r3, [sp, #16]
    4864:	2300      	movs	r3, #0
    4866:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    486a:	4814      	ldr	r0, [pc, #80]	; (48bc <mbox_nrf_init+0xb0>)
    486c:	aa04      	add	r2, sp, #16
    486e:	f7fd fa0b 	bl	1c88 <z_impl_z_log_msg_static_create>
		if (conf->rx_mask & BIT(ch)) {
    4872:	e9d4 4000 	ldrd	r4, r0, [r4]
	ch_config.receive_events_enabled = 0;
    4876:	2300      	movs	r3, #0
			ch_config.send_task_config[ch] = BIT(ch);
    4878:	2101      	movs	r1, #1
	ch_config.receive_events_enabled = 0;
    487a:	9327      	str	r3, [sp, #156]	; 0x9c
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
    487c:	aa07      	add	r2, sp, #28
		if (conf->tx_mask & BIT(ch)) {
    487e:	fa20 f503 	lsr.w	r5, r0, r3
    4882:	07ed      	lsls	r5, r5, #31
			ch_config.send_task_config[ch] = BIT(ch);
    4884:	bf44      	itt	mi
    4886:	fa01 f503 	lslmi.w	r5, r1, r3
    488a:	6015      	strmi	r5, [r2, #0]
		if (conf->rx_mask & BIT(ch)) {
    488c:	fa24 f503 	lsr.w	r5, r4, r3
    4890:	07ed      	lsls	r5, r5, #31
			ch_config.receive_event_config[ch] = BIT(ch);
    4892:	bf48      	it	mi
    4894:	fa01 f503 	lslmi.w	r5, r1, r3
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
    4898:	f103 0301 	add.w	r3, r3, #1
			ch_config.receive_event_config[ch] = BIT(ch);
    489c:	bf48      	it	mi
    489e:	6415      	strmi	r5, [r2, #64]	; 0x40
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
    48a0:	2b10      	cmp	r3, #16
    48a2:	f102 0204 	add.w	r2, r2, #4
    48a6:	d1ea      	bne.n	487e <mbox_nrf_init+0x72>
	nrfx_ipc_config_load(&ch_config);
    48a8:	a807      	add	r0, sp, #28
    48aa:	f000 fdfb 	bl	54a4 <nrfx_ipc_config_load>

	return 0;
}
    48ae:	2000      	movs	r0, #0
    48b0:	b029      	add	sp, #164	; 0xa4
    48b2:	bd30      	pop	{r4, r5, pc}
    48b4:	000049bd 	.word	0x000049bd
    48b8:	000095a1 	.word	0x000095a1
    48bc:	000088cc 	.word	0x000088cc
    48c0:	000095cd 	.word	0x000095cd

000048c4 <mbox_nrf_set_enabled>:
{
    48c4:	b530      	push	{r4, r5, lr}
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
    48c6:	290f      	cmp	r1, #15
{
    48c8:	460c      	mov	r4, r1
	struct mbox_nrf_data *data = dev->data;
    48ca:	6905      	ldr	r5, [r0, #16]
{
    48cc:	b087      	sub	sp, #28
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
    48ce:	d836      	bhi.n	493e <mbox_nrf_set_enabled+0x7a>
    48d0:	6843      	ldr	r3, [r0, #4]
    48d2:	681b      	ldr	r3, [r3, #0]
    48d4:	40cb      	lsrs	r3, r1
    48d6:	07db      	lsls	r3, r3, #31
    48d8:	d531      	bpl.n	493e <mbox_nrf_set_enabled+0x7a>
	if ((enable == 0 && (!(data->enabled_mask & BIT(channel)))) ||
    48da:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
    48de:	40cb      	lsrs	r3, r1
    48e0:	f003 0301 	and.w	r3, r3, #1
    48e4:	b91a      	cbnz	r2, 48ee <mbox_nrf_set_enabled+0x2a>
    48e6:	bb73      	cbnz	r3, 4946 <mbox_nrf_set_enabled+0x82>
		return -EALREADY;
    48e8:	f06f 0077 	mvn.w	r0, #119	; 0x77
    48ec:	e029      	b.n	4942 <mbox_nrf_set_enabled+0x7e>
	    (enable != 0 &&   (data->enabled_mask & BIT(channel)))) {
    48ee:	2b00      	cmp	r3, #0
    48f0:	d1fa      	bne.n	48e8 <mbox_nrf_set_enabled+0x24>
	if (enable && (data->cb[channel] == NULL)) {
    48f2:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
    48f6:	b94b      	cbnz	r3, 490c <mbox_nrf_set_enabled+0x48>
		LOG_WRN("Enabling channel without a registered callback\n");
    48f8:	4a19      	ldr	r2, [pc, #100]	; (4960 <mbox_nrf_set_enabled+0x9c>)
    48fa:	9205      	str	r2, [sp, #20]
    48fc:	2202      	movs	r2, #2
    48fe:	9204      	str	r2, [sp, #16]
    4900:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    4904:	4817      	ldr	r0, [pc, #92]	; (4964 <mbox_nrf_set_enabled+0xa0>)
    4906:	aa04      	add	r2, sp, #16
    4908:	f7fd f9be 	bl	1c88 <z_impl_z_log_msg_static_create>
	if (enable && data->enabled_mask == 0) {
    490c:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
    4910:	b913      	cbnz	r3, 4918 <mbox_nrf_set_enabled+0x54>
		irq_enable(DT_INST_IRQN(0));
    4912:	202a      	movs	r0, #42	; 0x2a
    4914:	f7fd fec6 	bl	26a4 <arch_irq_enable>
		data->enabled_mask |= BIT(channel);
    4918:	2301      	movs	r3, #1
    491a:	fa03 f204 	lsl.w	r2, r3, r4
    491e:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
    4922:	4313      	orrs	r3, r2
    4924:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
		nrfx_ipc_receive_event_enable(channel);
    4928:	b2e0      	uxtb	r0, r4
    492a:	f000 fddb 	bl	54e4 <nrfx_ipc_receive_event_enable>
	if (data->enabled_mask == 0) {
    492e:	f8d5 4084 	ldr.w	r4, [r5, #132]	; 0x84
    4932:	b914      	cbnz	r4, 493a <mbox_nrf_set_enabled+0x76>
		irq_disable(DT_INST_IRQN(0));
    4934:	202a      	movs	r0, #42	; 0x2a
    4936:	f7fd fec5 	bl	26c4 <arch_irq_disable>
	return 0;
    493a:	2000      	movs	r0, #0
    493c:	e001      	b.n	4942 <mbox_nrf_set_enabled+0x7e>
		return -EINVAL;
    493e:	f06f 0015 	mvn.w	r0, #21
}
    4942:	b007      	add	sp, #28
    4944:	bd30      	pop	{r4, r5, pc}
		nrfx_ipc_receive_event_disable(channel);
    4946:	b2c8      	uxtb	r0, r1
    4948:	f000 fdd4 	bl	54f4 <nrfx_ipc_receive_event_disable>
		data->enabled_mask &= ~BIT(channel);
    494c:	2301      	movs	r3, #1
    494e:	fa03 f404 	lsl.w	r4, r3, r4
    4952:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
    4956:	ea23 0304 	bic.w	r3, r3, r4
    495a:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    495e:	e7e6      	b.n	492e <mbox_nrf_set_enabled+0x6a>
    4960:	000095f9 	.word	0x000095f9
    4964:	000088cc 	.word	0x000088cc

00004968 <mbox_nrf_send>:
{
    4968:	b530      	push	{r4, r5, lr}
    496a:	4605      	mov	r5, r0
    496c:	460c      	mov	r4, r1
    496e:	b087      	sub	sp, #28
	if (msg) {
    4970:	b152      	cbz	r2, 4988 <mbox_nrf_send+0x20>
		LOG_WRN("Sending data not supported");
    4972:	4b10      	ldr	r3, [pc, #64]	; (49b4 <mbox_nrf_send+0x4c>)
    4974:	9305      	str	r3, [sp, #20]
    4976:	2302      	movs	r3, #2
    4978:	9304      	str	r3, [sp, #16]
    497a:	2300      	movs	r3, #0
    497c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    4980:	480d      	ldr	r0, [pc, #52]	; (49b8 <mbox_nrf_send+0x50>)
    4982:	aa04      	add	r2, sp, #16
    4984:	f7fd f980 	bl	1c88 <z_impl_z_log_msg_static_create>
	return ((ch < IPC_CONF_NUM) && (conf->tx_mask & BIT(ch)));
    4988:	2c0f      	cmp	r4, #15
    498a:	d80f      	bhi.n	49ac <mbox_nrf_send+0x44>
    498c:	686b      	ldr	r3, [r5, #4]
    498e:	685b      	ldr	r3, [r3, #4]
    4990:	40e3      	lsrs	r3, r4
    4992:	07db      	lsls	r3, r3, #31
    4994:	d50a      	bpl.n	49ac <mbox_nrf_send+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4996:	2301      	movs	r3, #1
	return 0;
    4998:	2000      	movs	r0, #0
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    499a:	00a4      	lsls	r4, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    499c:	b2e4      	uxtb	r4, r4
    499e:	f104 44a0 	add.w	r4, r4, #1342177280	; 0x50000000
    49a2:	f504 3428 	add.w	r4, r4, #172032	; 0x2a000
    49a6:	6023      	str	r3, [r4, #0]
}
    49a8:	b007      	add	sp, #28
    49aa:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
    49ac:	f06f 0015 	mvn.w	r0, #21
    49b0:	e7fa      	b.n	49a8 <mbox_nrf_send+0x40>
    49b2:	bf00      	nop
    49b4:	00009629 	.word	0x00009629
    49b8:	000088cc 	.word	0x000088cc

000049bc <mbox_dispatcher>:
{
    49bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    49c0:	4605      	mov	r5, r0
    49c2:	460e      	mov	r6, r1
	const struct device *dev = data->dev;
    49c4:	f8d1 7080 	ldr.w	r7, [r1, #128]	; 0x80
			LOG_WRN("RX event on illegal channel");
    49c8:	f8df 9088 	ldr.w	r9, [pc, #136]	; 4a54 <mbox_dispatcher+0x98>
    49cc:	f8df 8088 	ldr.w	r8, [pc, #136]	; 4a58 <mbox_dispatcher+0x9c>
			LOG_WRN("RX event on disabled channel");
    49d0:	f8df a088 	ldr.w	sl, [pc, #136]	; 4a5c <mbox_dispatcher+0xa0>
{
    49d4:	b087      	sub	sp, #28
	while (event_mask) {
    49d6:	b915      	cbnz	r5, 49de <mbox_dispatcher+0x22>
}
    49d8:	b007      	add	sp, #28
    49da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
    49de:	fa95 f4a5 	rbit	r4, r5
  if (value == 0U)
    49e2:	b3a4      	cbz	r4, 4a4e <mbox_dispatcher+0x92>
  return __builtin_clz(value);
    49e4:	fab4 f484 	clz	r4, r4
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
    49e8:	2c0f      	cmp	r4, #15
    49ea:	dc04      	bgt.n	49f6 <mbox_dispatcher+0x3a>
    49ec:	687b      	ldr	r3, [r7, #4]
    49ee:	681b      	ldr	r3, [r3, #0]
    49f0:	40e3      	lsrs	r3, r4
    49f2:	07db      	lsls	r3, r3, #31
    49f4:	d40a      	bmi.n	4a0c <mbox_dispatcher+0x50>
			LOG_WRN("RX event on illegal channel");
    49f6:	2302      	movs	r3, #2
    49f8:	f8cd 9014 	str.w	r9, [sp, #20]
    49fc:	9304      	str	r3, [sp, #16]
    49fe:	2300      	movs	r3, #0
    4a00:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    4a04:	4640      	mov	r0, r8
    4a06:	aa04      	add	r2, sp, #16
    4a08:	f7fd f93e 	bl	1c88 <z_impl_z_log_msg_static_create>
		if (!(data->enabled_mask & BIT(channel))) {
    4a0c:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
    4a10:	40e3      	lsrs	r3, r4
    4a12:	f013 0301 	ands.w	r3, r3, #1
    4a16:	d109      	bne.n	4a2c <mbox_dispatcher+0x70>
			LOG_WRN("RX event on disabled channel");
    4a18:	2202      	movs	r2, #2
    4a1a:	f8cd a014 	str.w	sl, [sp, #20]
    4a1e:	9204      	str	r2, [sp, #16]
    4a20:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    4a24:	4640      	mov	r0, r8
    4a26:	aa04      	add	r2, sp, #16
    4a28:	f7fd f92e 	bl	1c88 <z_impl_z_log_msg_static_create>
		event_mask &= ~BIT(channel);
    4a2c:	2301      	movs	r3, #1
		if (data->cb[channel] != NULL) {
    4a2e:	f856 b024 	ldr.w	fp, [r6, r4, lsl #2]
		event_mask &= ~BIT(channel);
    4a32:	40a3      	lsls	r3, r4
    4a34:	ea25 0503 	bic.w	r5, r5, r3
		if (data->cb[channel] != NULL) {
    4a38:	eb06 0284 	add.w	r2, r6, r4, lsl #2
    4a3c:	f1bb 0f00 	cmp.w	fp, #0
    4a40:	d0c9      	beq.n	49d6 <mbox_dispatcher+0x1a>
			data->cb[channel](dev, channel, data->user_data[channel], NULL);
    4a42:	2300      	movs	r3, #0
    4a44:	4621      	mov	r1, r4
    4a46:	4638      	mov	r0, r7
    4a48:	6c12      	ldr	r2, [r2, #64]	; 0x40
    4a4a:	47d8      	blx	fp
    4a4c:	e7c3      	b.n	49d6 <mbox_dispatcher+0x1a>
		uint32_t channel = __CLZ(__RBIT(event_mask));
    4a4e:	2420      	movs	r4, #32
    4a50:	e7d1      	b.n	49f6 <mbox_dispatcher+0x3a>
    4a52:	bf00      	nop
    4a54:	00009644 	.word	0x00009644
    4a58:	000088cc 	.word	0x000088cc
    4a5c:	00009660 	.word	0x00009660

00004a60 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    4a60:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	z_impl_log_panic();
    4a62:	f7fd f82d 	bl	1ac0 <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    4a66:	4b07      	ldr	r3, [pc, #28]	; (4a84 <k_sys_fatal_error_handler+0x24>)
    4a68:	9305      	str	r3, [sp, #20]
    4a6a:	2302      	movs	r3, #2
    4a6c:	9304      	str	r3, [sp, #16]
    4a6e:	4806      	ldr	r0, [pc, #24]	; (4a88 <k_sys_fatal_error_handler+0x28>)
    4a70:	2300      	movs	r3, #0
    4a72:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4a76:	aa04      	add	r2, sp, #16
    4a78:	f7fd f906 	bl	1c88 <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
    4a7c:	2000      	movs	r0, #0
    4a7e:	f7fe fa4d 	bl	2f1c <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    4a82:	bf00      	nop
    4a84:	00009696 	.word	0x00009696
    4a88:	000088b4 	.word	0x000088b4

00004a8c <nrf53_errata_42>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    4a8c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    4a90:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    4a94:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    4a98:	2a07      	cmp	r2, #7
    4a9a:	d105      	bne.n	4aa8 <nrf53_errata_42+0x1c>
                {
                    switch(var2)
    4a9c:	3b02      	subs	r3, #2
    4a9e:	2b03      	cmp	r3, #3
    4aa0:	d802      	bhi.n	4aa8 <nrf53_errata_42+0x1c>
    4aa2:	4a02      	ldr	r2, [pc, #8]	; (4aac <nrf53_errata_42+0x20>)
    4aa4:	5cd0      	ldrb	r0, [r2, r3]
    4aa6:	4770      	bx	lr
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    4aa8:	2000      	movs	r0, #0
    #endif
}
    4aaa:	4770      	bx	lr
    4aac:	000096b3 	.word	0x000096b3

00004ab0 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
    4ab0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4ab4:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
    4ab8:	4b03      	ldr	r3, [pc, #12]	; (4ac8 <SystemCoreClockUpdate+0x18>)
    4aba:	f002 0203 	and.w	r2, r2, #3
    4abe:	40d3      	lsrs	r3, r2
    4ac0:	4a02      	ldr	r2, [pc, #8]	; (4acc <SystemCoreClockUpdate+0x1c>)
    4ac2:	6013      	str	r3, [r2, #0]
#endif
}
    4ac4:	4770      	bx	lr
    4ac6:	bf00      	nop
    4ac8:	07a12000 	.word	0x07a12000
    4acc:	20000054 	.word	0x20000054

00004ad0 <SystemInit>:

void SystemInit(void)
{
    4ad0:	b508      	push	{r3, lr}
            SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
        #endif

        /* Workaround for Errata 97 "ERASEPROTECT, APPROTECT, or startup problems" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_97())
    4ad2:	f7ff ffdb 	bl	4a8c <nrf53_errata_42>
    4ad6:	b158      	cbz	r0, 4af0 <SystemInit+0x20>
        {
            if (*((volatile uint32_t *)0x50004A20ul) == 0)
    4ad8:	4b4f      	ldr	r3, [pc, #316]	; (4c18 <SystemInit+0x148>)
    4ada:	f8d3 2a20 	ldr.w	r2, [r3, #2592]	; 0xa20
    4ade:	b93a      	cbnz	r2, 4af0 <SystemInit+0x20>
            {
                *((volatile uint32_t *)0x50004A20ul) = 0xDul;
    4ae0:	210d      	movs	r1, #13
    4ae2:	f8c3 1a20 	str.w	r1, [r3, #2592]	; 0xa20
                *((volatile uint32_t *)0x5000491Cul) = 0x1ul;
    4ae6:	2101      	movs	r1, #1
    4ae8:	f8c3 191c 	str.w	r1, [r3, #2332]	; 0x91c
                *((volatile uint32_t *)0x5000491Cul) = 0x0ul;
    4aec:	f8c3 291c 	str.w	r2, [r3, #2332]	; 0x91c
{
    4af0:	2200      	movs	r2, #0
    4af2:	00d3      	lsls	r3, r2, #3
    4af4:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        }

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    4af8:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    4afc:	3101      	adds	r1, #1
    4afe:	d007      	beq.n	4b10 <SystemInit+0x40>
            #if defined ( __ICCARM__ )
                /* IAR will complain about the order of volatile pointer accesses. */
                #pragma diag_suppress=Pa082
            #endif
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    4b00:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    4b04:	3201      	adds	r2, #1
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    4b06:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    4b0a:	2a20      	cmp	r2, #32
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    4b0c:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    4b0e:	d1f0      	bne.n	4af2 <SystemInit+0x22>
        }

        /* errata 64 must be before errata 42, as errata 42 is dependant on the changes in errata 64*/
        /* Workaround for Errata 64 "VREGMAIN has invalid configuration when CPU is running at 128 MHz" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_64())
    4b10:	f7ff ffbc 	bl	4a8c <nrf53_errata_42>
    4b14:	2800      	cmp	r0, #0
    4b16:	d176      	bne.n	4c06 <SystemInit+0x136>
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
        }

        /* Workaround for Errata 42 "Reset value of HFCLKCTRL is invalid" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_42())
    4b18:	f7ff ffb8 	bl	4a8c <nrf53_errata_42>
    4b1c:	b140      	cbz	r0, 4b30 <SystemInit+0x60>
        {
            *((volatile uint32_t *)0x50039530ul) = 0xBEEF0044ul;
    4b1e:	4b3f      	ldr	r3, [pc, #252]	; (4c1c <SystemInit+0x14c>)
    4b20:	4a3f      	ldr	r2, [pc, #252]	; (4c20 <SystemInit+0x150>)
    4b22:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
            NRF_CLOCK_S->HFCLKCTRL = CLOCK_HFCLKCTRL_HCLK_Div2 << CLOCK_HFCLKCTRL_HCLK_Pos;
    4b26:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4b2a:	2201      	movs	r2, #1
    4b2c:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    4b30:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    4b34:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    4b38:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    4b3c:	2a07      	cmp	r2, #7
    4b3e:	d109      	bne.n	4b54 <SystemInit+0x84>
                {
                    switch(var2)
    4b40:	3b02      	subs	r3, #2
    4b42:	2b03      	cmp	r3, #3
    4b44:	d806      	bhi.n	4b54 <SystemInit+0x84>
        }

        /* Workaround for Errata 46 "Higher power consumption of LFRC" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_46())
    4b46:	4a37      	ldr	r2, [pc, #220]	; (4c24 <SystemInit+0x154>)
    4b48:	5cd3      	ldrb	r3, [r2, r3]
    4b4a:	b11b      	cbz	r3, 4b54 <SystemInit+0x84>
        {
            *((volatile uint32_t *)0x5003254Cul) = 0;
    4b4c:	2200      	movs	r2, #0
    4b4e:	4b36      	ldr	r3, [pc, #216]	; (4c28 <SystemInit+0x158>)
    4b50:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        }

        /* Workaround for Errata 49 "SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_49())
    4b54:	f7ff ff9a 	bl	4a8c <nrf53_errata_42>
    4b58:	b150      	cbz	r0, 4b70 <SystemInit+0xa0>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk)
    4b5a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4b5e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    4b62:	07d1      	lsls	r1, r2, #31
            {
                NRF_POWER_S->EVENTS_SLEEPENTER = 0;
    4b64:	bf42      	ittt	mi
    4b66:	2200      	movmi	r2, #0
    4b68:	f8c3 2114 	strmi.w	r2, [r3, #276]	; 0x114
                NRF_POWER_S->EVENTS_SLEEPEXIT = 0;
    4b6c:	f8c3 2118 	strmi.w	r2, [r3, #280]	; 0x118
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    4b70:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    4b74:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    4b78:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    4b7c:	2a07      	cmp	r2, #7
    4b7e:	d109      	bne.n	4b94 <SystemInit+0xc4>

        /* Workaround for Errata 55 "Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_55())
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk){
    4b80:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4b84:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    4b88:	07d2      	lsls	r2, r2, #31
                NRF_RESET_S->RESETREAS = ~RESET_RESETREAS_RESETPIN_Msk;
    4b8a:	bf44      	itt	mi
    4b8c:	f06f 0201 	mvnmi.w	r2, #1
    4b90:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
            }
        }

        /* Workaround for Errata 69 "VREGMAIN configuration is not retained in System OFF" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_69())
    4b94:	f7ff ff7a 	bl	4a8c <nrf53_errata_42>
    4b98:	b118      	cbz	r0, 4ba2 <SystemInit+0xd2>
        {
            *((volatile uint32_t *)0x5000470Cul) =0x65ul;
    4b9a:	2265      	movs	r2, #101	; 0x65
    4b9c:	4b1e      	ldr	r3, [pc, #120]	; (4c18 <SystemInit+0x148>)
    4b9e:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    4ba2:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    4ba6:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    4baa:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                if (var1 == 0x07)
    4bae:	2a07      	cmp	r2, #7
    4bb0:	d116      	bne.n	4be0 <SystemInit+0x110>
        }

        if (nrf53_errata_140())
        {
            if (*(volatile uint32_t *)0x50032420 & 0x80000000)
    4bb2:	4b1d      	ldr	r3, [pc, #116]	; (4c28 <SystemInit+0x158>)
    4bb4:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
    4bb8:	2b00      	cmp	r3, #0
    4bba:	da11      	bge.n	4be0 <SystemInit+0x110>
            {
                /* Reset occured during calibration */
                NRF_CLOCK_S->LFCLKSRC = CLOCK_LFCLKSRC_SRC_LFSYNT;
    4bbc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4bc0:	2203      	movs	r2, #3
    4bc2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
                NRF_CLOCK_S->TASKS_LFCLKSTART = 1;
    4bc6:	2201      	movs	r2, #1
    4bc8:	609a      	str	r2, [r3, #8]
                while (NRF_CLOCK_S->EVENTS_LFCLKSTARTED == 0) {}
    4bca:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    4bce:	2a00      	cmp	r2, #0
    4bd0:	d0fb      	beq.n	4bca <SystemInit+0xfa>
                NRF_CLOCK_S->EVENTS_LFCLKSTARTED = 0;
    4bd2:	2200      	movs	r2, #0
    4bd4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
                NRF_CLOCK_S->TASKS_LFCLKSTOP = 1;
    4bd8:	2201      	movs	r2, #1
    4bda:	60da      	str	r2, [r3, #12]
                NRF_CLOCK_S->LFCLKSRC = CLOCK_LFCLKSRC_SRC_LFRC;
    4bdc:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518

        #endif

        /* Allow Non-Secure code to run FPU instructions.
         * If only the secure code should control FPU power state these registers should be configured accordingly in the secure application code. */
        SCB->NSACR |= (3UL << 10);
    4be0:	4a12      	ldr	r2, [pc, #72]	; (4c2c <SystemInit+0x15c>)
    4be2:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    4be6:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    4bea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                /* Do nothing, allow user code to handle APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load APPROTECT soft branch from UICR.
               If UICR->APPROTECT is disabled, CTRLAP->APPROTECT will be disabled. */
            NRF_CTRLAP_S->APPROTECT.DISABLE = NRF_UICR_S->APPROTECT;
    4bee:	4a10      	ldr	r2, [pc, #64]	; (4c30 <SystemInit+0x160>)
    4bf0:	4b10      	ldr	r3, [pc, #64]	; (4c34 <SystemInit+0x164>)
    4bf2:	6811      	ldr	r1, [r2, #0]
    4bf4:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
                /* Do nothing, allow user code to handle SECURE APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load SECURE APPROTECT soft branch from UICR.
               If UICR->SECUREAPPROTECT is disabled, CTRLAP->SECUREAPPROTECT will be disabled. */
            NRF_CTRLAP_S->SECUREAPPROTECT.DISABLE = NRF_UICR_S->SECUREAPPROTECT;
    4bf8:	69d2      	ldr	r2, [r2, #28]
    4bfa:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
}
    4bfe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    SystemCoreClockUpdate();
    4c02:	f7ff bf55 	b.w	4ab0 <SystemCoreClockUpdate>
            *((volatile uint32_t *)0x5000470Cul) = 0x29ul;
    4c06:	2229      	movs	r2, #41	; 0x29
    4c08:	4b03      	ldr	r3, [pc, #12]	; (4c18 <SystemInit+0x148>)
    4c0a:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
    4c0e:	2203      	movs	r2, #3
    4c10:	f8c3 273c 	str.w	r2, [r3, #1852]	; 0x73c
    4c14:	e780      	b.n	4b18 <SystemInit+0x48>
    4c16:	bf00      	nop
    4c18:	50004000 	.word	0x50004000
    4c1c:	50039000 	.word	0x50039000
    4c20:	beef0044 	.word	0xbeef0044
    4c24:	000096b7 	.word	0x000096b7
    4c28:	50032000 	.word	0x50032000
    4c2c:	e000ed00 	.word	0xe000ed00
    4c30:	00ff8000 	.word	0x00ff8000
    4c34:	50006000 	.word	0x50006000

00004c38 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    4c38:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    4c3a:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    4c3c:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    4c3e:	fab2 f382 	clz	r3, r2
    4c42:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
    4c46:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
    4c48:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
    4c4a:	d010      	beq.n	4c6e <nrfx_flag32_alloc+0x36>
        new_mask = prev_mask & ~NRFX_BIT(idx);
    4c4c:	fa05 f303 	lsl.w	r3, r5, r3
    4c50:	ea22 0303 	bic.w	r3, r2, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    4c54:	e8d0 6fef 	ldaex	r6, [r0]
    4c58:	4296      	cmp	r6, r2
    4c5a:	d104      	bne.n	4c66 <nrfx_flag32_alloc+0x2e>
    4c5c:	e8c0 3fec 	stlex	ip, r3, [r0]
    4c60:	f1bc 0f00 	cmp.w	ip, #0
    4c64:	d1f6      	bne.n	4c54 <nrfx_flag32_alloc+0x1c>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    4c66:	d1e9      	bne.n	4c3c <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    4c68:	4802      	ldr	r0, [pc, #8]	; (4c74 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
    4c6a:	700c      	strb	r4, [r1, #0]
}
    4c6c:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    4c6e:	4802      	ldr	r0, [pc, #8]	; (4c78 <nrfx_flag32_alloc+0x40>)
    4c70:	e7fc      	b.n	4c6c <nrfx_flag32_alloc+0x34>
    4c72:	bf00      	nop
    4c74:	0bad0000 	.word	0x0bad0000
    4c78:	0bad0002 	.word	0x0bad0002

00004c7c <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    4c7c:	6803      	ldr	r3, [r0, #0]
{
    4c7e:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    4c80:	40cb      	lsrs	r3, r1
    4c82:	07db      	lsls	r3, r3, #31
    4c84:	d411      	bmi.n	4caa <nrfx_flag32_free+0x2e>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    4c86:	2301      	movs	r3, #1
    4c88:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    4c8c:	6803      	ldr	r3, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    4c8e:	ea41 0203 	orr.w	r2, r1, r3
    4c92:	e8d0 4fef 	ldaex	r4, [r0]
    4c96:	429c      	cmp	r4, r3
    4c98:	d104      	bne.n	4ca4 <nrfx_flag32_free+0x28>
    4c9a:	e8c0 2fec 	stlex	ip, r2, [r0]
    4c9e:	f1bc 0f00 	cmp.w	ip, #0
    4ca2:	d1f6      	bne.n	4c92 <nrfx_flag32_free+0x16>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    4ca4:	d1f2      	bne.n	4c8c <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    4ca6:	4802      	ldr	r0, [pc, #8]	; (4cb0 <nrfx_flag32_free+0x34>)
}
    4ca8:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    4caa:	4802      	ldr	r0, [pc, #8]	; (4cb4 <nrfx_flag32_free+0x38>)
    4cac:	e7fc      	b.n	4ca8 <nrfx_flag32_free+0x2c>
    4cae:	bf00      	nop
    4cb0:	0bad0000 	.word	0x0bad0000
    4cb4:	0bad0004 	.word	0x0bad0004

00004cb8 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    4cb8:	4b04      	ldr	r3, [pc, #16]	; (4ccc <nrfx_clock_init+0x14>)
    4cba:	791a      	ldrb	r2, [r3, #4]
    4cbc:	b922      	cbnz	r2, 4cc8 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    4cbe:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    4cc0:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    4cc2:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    4cc4:	4802      	ldr	r0, [pc, #8]	; (4cd0 <nrfx_clock_init+0x18>)
    4cc6:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    4cc8:	4802      	ldr	r0, [pc, #8]	; (4cd4 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    4cca:	4770      	bx	lr
    4ccc:	20020350 	.word	0x20020350
    4cd0:	0bad0000 	.word	0x0bad0000
    4cd4:	0bad000c 	.word	0x0bad000c

00004cd8 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4cd8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4cdc:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    4ce0:	b510      	push	{r4, lr}
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    4ce2:	b152      	cbz	r2, 4cfa <nrfx_power_clock_irq_handler+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4ce4:	2000      	movs	r0, #0
    4ce6:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    4cea:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    4cee:	2201      	movs	r2, #1
    4cf0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    4cf4:	4b23      	ldr	r3, [pc, #140]	; (4d84 <nrfx_power_clock_irq_handler+0xac>)
    4cf6:	681b      	ldr	r3, [r3, #0]
    4cf8:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4cfa:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4cfe:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    4d02:	b18a      	cbz	r2, 4d28 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4d04:	2200      	movs	r2, #0
    4d06:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    4d0a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4d0e:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4d12:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    4d16:	f002 0203 	and.w	r2, r2, #3
    4d1a:	2a01      	cmp	r2, #1
    4d1c:	f04f 0102 	mov.w	r1, #2
    4d20:	d128      	bne.n	4d74 <nrfx_power_clock_irq_handler+0x9c>
    p_reg->LFCLKSRC = (uint32_t)(source);
    4d22:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4d26:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4d28:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4d2c:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
    4d30:	b162      	cbz	r2, 4d4c <nrfx_power_clock_irq_handler+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4d32:	2200      	movs	r2, #0
    4d34:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    4d38:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
    4d3c:	f44f 7280 	mov.w	r2, #256	; 0x100
    4d40:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
    4d44:	4b0f      	ldr	r3, [pc, #60]	; (4d84 <nrfx_power_clock_irq_handler+0xac>)
    4d46:	2004      	movs	r0, #4
    4d48:	681b      	ldr	r3, [r3, #0]
    4d4a:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4d4c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4d50:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
    4d54:	b1aa      	cbz	r2, 4d82 <nrfx_power_clock_irq_handler+0xaa>
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    4d56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4d5a:	2200      	movs	r2, #0
    4d5c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    4d60:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
    4d64:	f44f 7200 	mov.w	r2, #512	; 0x200
    4d68:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    4d6c:	4b05      	ldr	r3, [pc, #20]	; (4d84 <nrfx_power_clock_irq_handler+0xac>)
    4d6e:	2005      	movs	r0, #5
    4d70:	681b      	ldr	r3, [r3, #0]
    4d72:	4718      	bx	r3
    4d74:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    4d78:	4b02      	ldr	r3, [pc, #8]	; (4d84 <nrfx_power_clock_irq_handler+0xac>)
    4d7a:	2001      	movs	r0, #1
    4d7c:	681b      	ldr	r3, [r3, #0]
    4d7e:	4798      	blx	r3
    4d80:	e7d2      	b.n	4d28 <nrfx_power_clock_irq_handler+0x50>
}
    4d82:	bd10      	pop	{r4, pc}
    4d84:	20020350 	.word	0x20020350

00004d88 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    4d88:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
    4d8a:	4801      	ldr	r0, [pc, #4]	; (4d90 <nrfx_dppi_channel_alloc+0x8>)
    4d8c:	f7ff bf54 	b.w	4c38 <nrfx_flag32_alloc>
    4d90:	20000058 	.word	0x20000058

00004d94 <nrfx_dppi_channel_free>:
}

nrfx_err_t nrfx_dppi_channel_free(uint8_t channel)
{
    nrf_dppi_channels_disable(NRF_DPPIC, NRFX_BIT(channel));
    4d94:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
    4d96:	4a04      	ldr	r2, [pc, #16]	; (4da8 <nrfx_dppi_channel_free+0x14>)
    4d98:	4083      	lsls	r3, r0
{
    4d9a:	4601      	mov	r1, r0
    4d9c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    return nrfx_flag32_free(&m_allocated_channels, channel);
    4da0:	4802      	ldr	r0, [pc, #8]	; (4dac <nrfx_dppi_channel_free+0x18>)
    4da2:	f7ff bf6b 	b.w	4c7c <nrfx_flag32_free>
    4da6:	bf00      	nop
    4da8:	50017000 	.word	0x50017000
    4dac:	20000058 	.word	0x20000058

00004db0 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    4db0:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    4db2:	f003 021f 	and.w	r2, r3, #31
    4db6:	6002      	str	r2, [r0, #0]
}
    4db8:	4a03      	ldr	r2, [pc, #12]	; (4dc8 <nrf_gpio_pin_port_decode+0x18>)
    4dba:	4804      	ldr	r0, [pc, #16]	; (4dcc <nrf_gpio_pin_port_decode+0x1c>)
    return pin_number >> 5;
    4dbc:	095b      	lsrs	r3, r3, #5
}
    4dbe:	2b01      	cmp	r3, #1
    4dc0:	bf08      	it	eq
    4dc2:	4610      	moveq	r0, r2
    4dc4:	4770      	bx	lr
    4dc6:	bf00      	nop
    4dc8:	50842800 	.word	0x50842800
    4dcc:	50842500 	.word	0x50842500

00004dd0 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    4dd0:	4b03      	ldr	r3, [pc, #12]	; (4de0 <pin_in_use_by_te+0x10>)
    4dd2:	3008      	adds	r0, #8
    4dd4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    4dd8:	f3c0 1040 	ubfx	r0, r0, #5, #1
    4ddc:	4770      	bx	lr
    4dde:	bf00      	nop
    4de0:	2000005c 	.word	0x2000005c

00004de4 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    4de4:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4de6:	4c0d      	ldr	r4, [pc, #52]	; (4e1c <call_handler+0x38>)
    4de8:	f100 0308 	add.w	r3, r0, #8
    4dec:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
    4df0:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4df2:	05da      	lsls	r2, r3, #23
{
    4df4:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4df6:	d507      	bpl.n	4e08 <call_handler+0x24>
    4df8:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    4dfc:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    4e00:	6852      	ldr	r2, [r2, #4]
    4e02:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    4e06:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    4e08:	68a3      	ldr	r3, [r4, #8]
    4e0a:	b12b      	cbz	r3, 4e18 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    4e0c:	4631      	mov	r1, r6
    4e0e:	4628      	mov	r0, r5
    4e10:	68e2      	ldr	r2, [r4, #12]
    }
}
    4e12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    4e16:	4718      	bx	r3
}
    4e18:	bd70      	pop	{r4, r5, r6, pc}
    4e1a:	bf00      	nop
    4e1c:	2000005c 	.word	0x2000005c

00004e20 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4e20:	4a12      	ldr	r2, [pc, #72]	; (4e6c <release_handler+0x4c>)
    4e22:	3008      	adds	r0, #8
    4e24:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
{
    4e28:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4e2a:	05d9      	lsls	r1, r3, #23
    4e2c:	d51b      	bpl.n	4e66 <release_handler+0x46>
    4e2e:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    4e32:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    4e36:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    4e3a:	2000      	movs	r0, #0
    4e3c:	f102 0410 	add.w	r4, r2, #16
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    4e40:	f834 3b02 	ldrh.w	r3, [r4], #2
    4e44:	f413 7f80 	tst.w	r3, #256	; 0x100
    4e48:	d003      	beq.n	4e52 <release_handler+0x32>
    4e4a:	f3c3 2343 	ubfx	r3, r3, #9, #4
    4e4e:	4299      	cmp	r1, r3
    4e50:	d009      	beq.n	4e66 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    4e52:	3001      	adds	r0, #1
    4e54:	2830      	cmp	r0, #48	; 0x30
    4e56:	d1f3      	bne.n	4e40 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    4e58:	2300      	movs	r3, #0
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    4e5a:	4805      	ldr	r0, [pc, #20]	; (4e70 <release_handler+0x50>)
}
    4e5c:	bc10      	pop	{r4}
        m_cb.handlers[handler_id].handler = NULL;
    4e5e:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    4e62:	f7ff bf0b 	b.w	4c7c <nrfx_flag32_free>
}
    4e66:	bc10      	pop	{r4}
    4e68:	4770      	bx	lr
    4e6a:	bf00      	nop
    4e6c:	2000005c 	.word	0x2000005c
    4e70:	200000d0 	.word	0x200000d0

00004e74 <pin_handler_trigger_uninit>:
{
    4e74:	b538      	push	{r3, r4, r5, lr}
    4e76:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    4e78:	f7ff ffaa 	bl	4dd0 <pin_in_use_by_te>
    4e7c:	4c0b      	ldr	r4, [pc, #44]	; (4eac <pin_handler_trigger_uninit+0x38>)
    4e7e:	f102 0508 	add.w	r5, r2, #8
    4e82:	b160      	cbz	r0, 4e9e <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    4e84:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4e86:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    4e8a:	0b5b      	lsrs	r3, r3, #13
    4e8c:	009b      	lsls	r3, r3, #2
    4e8e:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    4e92:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    4e96:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
    4e9a:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
    4e9e:	4610      	mov	r0, r2
    4ea0:	f7ff ffbe 	bl	4e20 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    4ea4:	2300      	movs	r3, #0
    4ea6:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    4eaa:	bd38      	pop	{r3, r4, r5, pc}
    4eac:	2000005c 	.word	0x2000005c

00004eb0 <nrfx_gpiote_input_configure>:
{
    4eb0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    4eb4:	4604      	mov	r4, r0
    4eb6:	4616      	mov	r6, r2
    4eb8:	461d      	mov	r5, r3
    if (p_input_config)
    4eba:	b321      	cbz	r1, 4f06 <nrfx_gpiote_input_configure+0x56>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4ebc:	4f4e      	ldr	r7, [pc, #312]	; (4ff8 <nrfx_gpiote_input_configure+0x148>)
    4ebe:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    4ec2:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
    4ec6:	079b      	lsls	r3, r3, #30
    4ec8:	d506      	bpl.n	4ed8 <nrfx_gpiote_input_configure+0x28>
    4eca:	f7ff ff81 	bl	4dd0 <pin_in_use_by_te>
        if (pin_is_task_output(pin))
    4ece:	b118      	cbz	r0, 4ed8 <nrfx_gpiote_input_configure+0x28>
                return NRFX_ERROR_INVALID_PARAM;
    4ed0:	484a      	ldr	r0, [pc, #296]	; (4ffc <nrfx_gpiote_input_configure+0x14c>)
}
    4ed2:	b004      	add	sp, #16
    4ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    4ed8:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    4eda:	4620      	mov	r0, r4
    4edc:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    4ee0:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    4ee4:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    4ee8:	f10d 020f 	add.w	r2, sp, #15
    4eec:	460b      	mov	r3, r1
    4eee:	f10d 010e 	add.w	r1, sp, #14
    4ef2:	f003 f8fd 	bl	80f0 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    4ef6:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
    4efa:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    4efe:	f043 0301 	orr.w	r3, r3, #1
    4f02:	f827 3018 	strh.w	r3, [r7, r8, lsl #1]
    if (p_trigger_config)
    4f06:	b196      	cbz	r6, 4f2e <nrfx_gpiote_input_configure+0x7e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4f08:	483b      	ldr	r0, [pc, #236]	; (4ff8 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    4f0a:	7833      	ldrb	r3, [r6, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    4f0c:	6872      	ldr	r2, [r6, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4f0e:	f104 0608 	add.w	r6, r4, #8
    4f12:	f830 1016 	ldrh.w	r1, [r0, r6, lsl #1]
        if (pin_is_output(pin))
    4f16:	078f      	lsls	r7, r1, #30
    4f18:	d50c      	bpl.n	4f34 <nrfx_gpiote_input_configure+0x84>
            if (use_evt)
    4f1a:	2a00      	cmp	r2, #0
    4f1c:	d1d8      	bne.n	4ed0 <nrfx_gpiote_input_configure+0x20>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    4f1e:	f830 2016 	ldrh.w	r2, [r0, r6, lsl #1]
    4f22:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    4f26:	ea42 0383 	orr.w	r3, r2, r3, lsl #2
    4f2a:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (p_handler_config)
    4f2e:	bbcd      	cbnz	r5, 4fa4 <nrfx_gpiote_input_configure+0xf4>
    return NRFX_SUCCESS;
    4f30:	4833      	ldr	r0, [pc, #204]	; (5000 <nrfx_gpiote_input_configure+0x150>)
    4f32:	e7ce      	b.n	4ed2 <nrfx_gpiote_input_configure+0x22>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    4f34:	f021 0120 	bic.w	r1, r1, #32
    4f38:	04c9      	lsls	r1, r1, #19
    4f3a:	0cc9      	lsrs	r1, r1, #19
    4f3c:	f820 1016 	strh.w	r1, [r0, r6, lsl #1]
            if (use_evt)
    4f40:	2a00      	cmp	r2, #0
    4f42:	d0ec      	beq.n	4f1e <nrfx_gpiote_input_configure+0x6e>
                if (!edge)
    4f44:	2b03      	cmp	r3, #3
    4f46:	d8c3      	bhi.n	4ed0 <nrfx_gpiote_input_configure+0x20>
                uint8_t ch = *p_trigger_config->p_in_channel;
    4f48:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    4f4c:	4662      	mov	r2, ip
    4f4e:	0092      	lsls	r2, r2, #2
    4f50:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    4f54:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    4f58:	b923      	cbnz	r3, 4f64 <nrfx_gpiote_input_configure+0xb4>
    p_reg->CONFIG[idx] = 0;
    4f5a:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
    4f5e:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
#endif
}
    4f62:	e7dc      	b.n	4f1e <nrfx_gpiote_input_configure+0x6e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    4f64:	f8d2 7510 	ldr.w	r7, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    4f68:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
    4f6c:	f027 0703 	bic.w	r7, r7, #3
    4f70:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    4f74:	f8d2 7510 	ldr.w	r7, [r2, #1296]	; 0x510
    4f78:	f041 0120 	orr.w	r1, r1, #32
    4f7c:	f427 374f 	bic.w	r7, r7, #211968	; 0x33c00
    4f80:	f427 7740 	bic.w	r7, r7, #768	; 0x300
    4f84:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4f88:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    4f8c:	0227      	lsls	r7, r4, #8
    4f8e:	f407 577c 	and.w	r7, r7, #16128	; 0x3f00
    4f92:	ea4e 4e03 	orr.w	lr, lr, r3, lsl #16
    4f96:	ea47 070e 	orr.w	r7, r7, lr
    4f9a:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
    4f9e:	f820 1016 	strh.w	r1, [r0, r6, lsl #1]
    4fa2:	e7bc      	b.n	4f1e <nrfx_gpiote_input_configure+0x6e>
    release_handler(pin);
    4fa4:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    4fa6:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    4faa:	f7ff ff39 	bl	4e20 <release_handler>
    if (!handler)
    4fae:	2e00      	cmp	r6, #0
    4fb0:	d0be      	beq.n	4f30 <nrfx_gpiote_input_configure+0x80>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    4fb2:	4d11      	ldr	r5, [pc, #68]	; (4ff8 <nrfx_gpiote_input_configure+0x148>)
    4fb4:	682b      	ldr	r3, [r5, #0]
    4fb6:	429e      	cmp	r6, r3
    4fb8:	d104      	bne.n	4fc4 <nrfx_gpiote_input_configure+0x114>
    4fba:	686b      	ldr	r3, [r5, #4]
    4fbc:	429f      	cmp	r7, r3
    4fbe:	d101      	bne.n	4fc4 <nrfx_gpiote_input_configure+0x114>
    4fc0:	2200      	movs	r2, #0
    4fc2:	e00a      	b.n	4fda <nrfx_gpiote_input_configure+0x12a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    4fc4:	480f      	ldr	r0, [pc, #60]	; (5004 <nrfx_gpiote_input_configure+0x154>)
    4fc6:	f10d 010f 	add.w	r1, sp, #15
    4fca:	f7ff fe35 	bl	4c38 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    4fce:	4b0c      	ldr	r3, [pc, #48]	; (5000 <nrfx_gpiote_input_configure+0x150>)
    4fd0:	4298      	cmp	r0, r3
    4fd2:	f47f af7e 	bne.w	4ed2 <nrfx_gpiote_input_configure+0x22>
        handler_id = (int32_t)id;
    4fd6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].p_context = p_context;
    4fda:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    4fde:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    4fe0:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    4fe2:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
    4fe6:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    4fea:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    4fee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    4ff2:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    4ff6:	e79b      	b.n	4f30 <nrfx_gpiote_input_configure+0x80>
    4ff8:	2000005c 	.word	0x2000005c
    4ffc:	0bad0004 	.word	0x0bad0004
    5000:	0bad0000 	.word	0x0bad0000
    5004:	200000d0 	.word	0x200000d0

00005008 <nrfx_gpiote_output_configure>:
{
    5008:	b5f0      	push	{r4, r5, r6, r7, lr}
    500a:	4604      	mov	r4, r0
    500c:	4615      	mov	r5, r2
    500e:	b085      	sub	sp, #20
    if (p_config)
    5010:	b319      	cbz	r1, 505a <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5012:	4e34      	ldr	r6, [pc, #208]	; (50e4 <nrfx_gpiote_output_configure+0xdc>)
    5014:	f100 0708 	add.w	r7, r0, #8
    5018:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    501c:	0793      	lsls	r3, r2, #30
    501e:	d403      	bmi.n	5028 <nrfx_gpiote_output_configure+0x20>
    5020:	f7ff fed6 	bl	4dd0 <pin_in_use_by_te>
    5024:	2800      	cmp	r0, #0
    5026:	d15a      	bne.n	50de <nrfx_gpiote_output_configure+0xd6>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    5028:	f012 0f1c 	tst.w	r2, #28
    502c:	d002      	beq.n	5034 <nrfx_gpiote_output_configure+0x2c>
    502e:	784b      	ldrb	r3, [r1, #1]
    5030:	2b01      	cmp	r3, #1
    5032:	d054      	beq.n	50de <nrfx_gpiote_output_configure+0xd6>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    5034:	2301      	movs	r3, #1
    5036:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    503a:	2300      	movs	r3, #0
    503c:	1c4a      	adds	r2, r1, #1
    503e:	e9cd 1300 	strd	r1, r3, [sp]
    5042:	4620      	mov	r0, r4
    5044:	1c8b      	adds	r3, r1, #2
    5046:	f10d 010f 	add.w	r1, sp, #15
    504a:	f003 f851 	bl	80f0 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    504e:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    5052:	f043 0303 	orr.w	r3, r3, #3
    5056:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    505a:	b915      	cbnz	r5, 5062 <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
    505c:	4822      	ldr	r0, [pc, #136]	; (50e8 <nrfx_gpiote_output_configure+0xe0>)
}
    505e:	b005      	add	sp, #20
    5060:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5062:	4e20      	ldr	r6, [pc, #128]	; (50e4 <nrfx_gpiote_output_configure+0xdc>)
    5064:	f104 0708 	add.w	r7, r4, #8
    5068:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    506c:	0783      	lsls	r3, r0, #30
    506e:	d536      	bpl.n	50de <nrfx_gpiote_output_configure+0xd6>
        uint32_t ch = p_task_config->task_ch;
    5070:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    5074:	2300      	movs	r3, #0
    5076:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    5078:	f020 0020 	bic.w	r0, r0, #32
    507c:	0089      	lsls	r1, r1, #2
    507e:	f101 41a0 	add.w	r1, r1, #1342177280	; 0x50000000
    5082:	04c0      	lsls	r0, r0, #19
    5084:	f501 4150 	add.w	r1, r1, #53248	; 0xd000
    5088:	0cc0      	lsrs	r0, r0, #19
    508a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    508e:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
    5092:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    5096:	786a      	ldrb	r2, [r5, #1]
    5098:	2a00      	cmp	r2, #0
    509a:	d0df      	beq.n	505c <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    509c:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    50a0:	78ad      	ldrb	r5, [r5, #2]
    50a2:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    50a6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    50aa:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    50ae:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    50b2:	0223      	lsls	r3, r4, #8
    50b4:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    50b8:	0412      	lsls	r2, r2, #16
    50ba:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    50be:	ea43 030e 	orr.w	r3, r3, lr
    50c2:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    50c4:	052a      	lsls	r2, r5, #20
    50c6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    50ca:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    50ce:	4313      	orrs	r3, r2
    50d0:	f040 0020 	orr.w	r0, r0, #32
    50d4:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    50d8:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    50dc:	e7be      	b.n	505c <nrfx_gpiote_output_configure+0x54>
            return NRFX_ERROR_INVALID_PARAM;
    50de:	4803      	ldr	r0, [pc, #12]	; (50ec <nrfx_gpiote_output_configure+0xe4>)
    50e0:	e7bd      	b.n	505e <nrfx_gpiote_output_configure+0x56>
    50e2:	bf00      	nop
    50e4:	2000005c 	.word	0x2000005c
    50e8:	0bad0000 	.word	0x0bad0000
    50ec:	0bad0004 	.word	0x0bad0004

000050f0 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    50f0:	4b01      	ldr	r3, [pc, #4]	; (50f8 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    50f2:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    50f6:	4770      	bx	lr
    50f8:	2000005c 	.word	0x2000005c

000050fc <nrfx_gpiote_channel_get>:
{
    50fc:	b508      	push	{r3, lr}
    50fe:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    5100:	f7ff fe66 	bl	4dd0 <pin_in_use_by_te>
    5104:	b138      	cbz	r0, 5116 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5106:	4b05      	ldr	r3, [pc, #20]	; (511c <nrfx_gpiote_channel_get+0x20>)
    5108:	3208      	adds	r2, #8
    510a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
    510e:	4804      	ldr	r0, [pc, #16]	; (5120 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5110:	0b5b      	lsrs	r3, r3, #13
    5112:	700b      	strb	r3, [r1, #0]
}
    5114:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    5116:	4803      	ldr	r0, [pc, #12]	; (5124 <nrfx_gpiote_channel_get+0x28>)
    5118:	e7fc      	b.n	5114 <nrfx_gpiote_channel_get+0x18>
    511a:	bf00      	nop
    511c:	2000005c 	.word	0x2000005c
    5120:	0bad0000 	.word	0x0bad0000
    5124:	0bad0004 	.word	0x0bad0004

00005128 <nrfx_gpiote_init>:
{
    5128:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    512a:	4c0f      	ldr	r4, [pc, #60]	; (5168 <nrfx_gpiote_init+0x40>)
    512c:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    5130:	b9bd      	cbnz	r5, 5162 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    5132:	2260      	movs	r2, #96	; 0x60
    5134:	4629      	mov	r1, r5
    5136:	f104 0010 	add.w	r0, r4, #16
    513a:	f002 fc6a 	bl	7a12 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    513e:	200d      	movs	r0, #13
    5140:	f7fd fab0 	bl	26a4 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5144:	4b09      	ldr	r3, [pc, #36]	; (516c <nrfx_gpiote_init+0x44>)
    return err_code;
    5146:	480a      	ldr	r0, [pc, #40]	; (5170 <nrfx_gpiote_init+0x48>)
    5148:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    514c:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    5150:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    5154:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    5158:	2301      	movs	r3, #1
    515a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    515e:	6763      	str	r3, [r4, #116]	; 0x74
}
    5160:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    5162:	4804      	ldr	r0, [pc, #16]	; (5174 <nrfx_gpiote_init+0x4c>)
    5164:	e7fc      	b.n	5160 <nrfx_gpiote_init+0x38>
    5166:	bf00      	nop
    5168:	2000005c 	.word	0x2000005c
    516c:	5000d000 	.word	0x5000d000
    5170:	0bad0000 	.word	0x0bad0000
    5174:	0bad0005 	.word	0x0bad0005

00005178 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    5178:	4b03      	ldr	r3, [pc, #12]	; (5188 <nrfx_gpiote_is_init+0x10>)
    517a:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    517e:	3800      	subs	r0, #0
    5180:	bf18      	it	ne
    5182:	2001      	movne	r0, #1
    5184:	4770      	bx	lr
    5186:	bf00      	nop
    5188:	2000005c 	.word	0x2000005c

0000518c <nrfx_gpiote_channel_free>:
{
    518c:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    518e:	4801      	ldr	r0, [pc, #4]	; (5194 <nrfx_gpiote_channel_free+0x8>)
    5190:	f7ff bd74 	b.w	4c7c <nrfx_flag32_free>
    5194:	200000cc 	.word	0x200000cc

00005198 <nrfx_gpiote_channel_alloc>:
{
    5198:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    519a:	4801      	ldr	r0, [pc, #4]	; (51a0 <nrfx_gpiote_channel_alloc+0x8>)
    519c:	f7ff bd4c 	b.w	4c38 <nrfx_flag32_alloc>
    51a0:	200000cc 	.word	0x200000cc

000051a4 <nrfx_gpiote_trigger_enable>:
{
    51a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    51a6:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    51a8:	f7ff fe12 	bl	4dd0 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    51ac:	4b1e      	ldr	r3, [pc, #120]	; (5228 <nrfx_gpiote_trigger_enable+0x84>)
    51ae:	f104 0208 	add.w	r2, r4, #8
    51b2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    51b6:	b1e8      	cbz	r0, 51f4 <nrfx_gpiote_trigger_enable+0x50>
    51b8:	f013 0502 	ands.w	r5, r3, #2
    51bc:	d11a      	bne.n	51f4 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    51be:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    51c0:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    51c2:	f102 40a0 	add.w	r0, r2, #1342177280	; 0x50000000
    51c6:	f500 4051 	add.w	r0, r0, #53504	; 0xd100
    51ca:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    51ce:	6005      	str	r5, [r0, #0]
    51d0:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    51d4:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    51d6:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    51da:	f040 0001 	orr.w	r0, r0, #1
    51de:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    51e2:	b129      	cbz	r1, 51f0 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    51e4:	2201      	movs	r2, #1
    51e6:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    51ea:	4a10      	ldr	r2, [pc, #64]	; (522c <nrfx_gpiote_trigger_enable+0x88>)
    51ec:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    51f0:	b003      	add	sp, #12
    51f2:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    51f4:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    51f8:	2b04      	cmp	r3, #4
    51fa:	d011      	beq.n	5220 <nrfx_gpiote_trigger_enable+0x7c>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    51fc:	2b05      	cmp	r3, #5
    51fe:	d011      	beq.n	5224 <nrfx_gpiote_trigger_enable+0x80>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5200:	a801      	add	r0, sp, #4
    5202:	9401      	str	r4, [sp, #4]
    5204:	f7ff fdd4 	bl	4db0 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    5208:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    520a:	6901      	ldr	r1, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    520c:	40d9      	lsrs	r1, r3
    520e:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    5212:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    5214:	4620      	mov	r0, r4
}
    5216:	b003      	add	sp, #12
    5218:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    521c:	f002 bfaf 	b.w	817e <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    5220:	2103      	movs	r1, #3
    5222:	e7f7      	b.n	5214 <nrfx_gpiote_trigger_enable+0x70>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    5224:	2102      	movs	r1, #2
    5226:	e7f5      	b.n	5214 <nrfx_gpiote_trigger_enable+0x70>
    5228:	2000005c 	.word	0x2000005c
    522c:	5000d000 	.word	0x5000d000

00005230 <nrfx_gpiote_trigger_disable>:
{
    5230:	b508      	push	{r3, lr}
    5232:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    5234:	f7ff fdcc 	bl	4dd0 <pin_in_use_by_te>
    5238:	b1c0      	cbz	r0, 526c <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    523a:	4b0f      	ldr	r3, [pc, #60]	; (5278 <nrfx_gpiote_trigger_disable+0x48>)
    523c:	f102 0108 	add.w	r1, r2, #8
    5240:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    5244:	0799      	lsls	r1, r3, #30
    5246:	d411      	bmi.n	526c <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    5248:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    524a:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    524c:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    524e:	490b      	ldr	r1, [pc, #44]	; (527c <nrfx_gpiote_trigger_disable+0x4c>)
    5250:	009b      	lsls	r3, r3, #2
    5252:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    5256:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    525a:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    525e:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    5262:	f022 0203 	bic.w	r2, r2, #3
    5266:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    526a:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    526c:	2100      	movs	r1, #0
}
    526e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    5272:	4610      	mov	r0, r2
    5274:	f002 bf83 	b.w	817e <nrf_gpio_cfg_sense_set>
    5278:	2000005c 	.word	0x2000005c
    527c:	5000d000 	.word	0x5000d000

00005280 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    5280:	4b10      	ldr	r3, [pc, #64]	; (52c4 <nrfx_gpiote_pin_uninit+0x44>)
    5282:	f100 0208 	add.w	r2, r0, #8
    5286:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
    528a:	b513      	push	{r0, r1, r4, lr}
    if (!pin_in_use(pin))
    528c:	07db      	lsls	r3, r3, #31
{
    528e:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    5290:	d516      	bpl.n	52c0 <nrfx_gpiote_pin_uninit+0x40>
    nrfx_gpiote_trigger_disable(pin);
    5292:	f7ff ffcd 	bl	5230 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    5296:	4620      	mov	r0, r4
    5298:	f7ff fdec 	bl	4e74 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    529c:	a801      	add	r0, sp, #4
    529e:	9401      	str	r4, [sp, #4]
    52a0:	f7ff fd86 	bl	4db0 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    52a4:	9b01      	ldr	r3, [sp, #4]
    52a6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    52aa:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    52ae:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    52b2:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
    52b6:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_gpio_cfg(
    52ba:	4803      	ldr	r0, [pc, #12]	; (52c8 <nrfx_gpiote_pin_uninit+0x48>)
}
    52bc:	b002      	add	sp, #8
    52be:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    52c0:	4802      	ldr	r0, [pc, #8]	; (52cc <nrfx_gpiote_pin_uninit+0x4c>)
    52c2:	e7fb      	b.n	52bc <nrfx_gpiote_pin_uninit+0x3c>
    52c4:	2000005c 	.word	0x2000005c
    52c8:	0bad0000 	.word	0x0bad0000
    52cc:	0bad0004 	.word	0x0bad0004

000052d0 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    52d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
    52d4:	2600      	movs	r6, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    52d6:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    52d8:	4634      	mov	r4, r6
{
    52da:	4b60      	ldr	r3, [pc, #384]	; (545c <nrfx_gpiote_irq_handler+0x18c>)
    return p_reg->INTENSET & mask;
    52dc:	4860      	ldr	r0, [pc, #384]	; (5460 <nrfx_gpiote_irq_handler+0x190>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    52de:	4961      	ldr	r1, [pc, #388]	; (5464 <nrfx_gpiote_irq_handler+0x194>)
{
    52e0:	b087      	sub	sp, #28
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    52e2:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    52e4:	b135      	cbz	r5, 52f4 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    52e6:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    52ea:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    52ec:	bf1e      	ittt	ne
    52ee:	601c      	strne	r4, [r3, #0]
    52f0:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    52f2:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    52f4:	3304      	adds	r3, #4
    52f6:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    52f8:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    52fc:	d1f1      	bne.n	52e2 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    52fe:	f8df 9160 	ldr.w	r9, [pc, #352]	; 5460 <nrfx_gpiote_irq_handler+0x190>
    5302:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    5306:	2b00      	cmp	r3, #0
    5308:	f000 808a 	beq.w	5420 <nrfx_gpiote_irq_handler+0x150>
        *p_masks = gpio_regs[i]->LATCH;
    530c:	4f56      	ldr	r7, [pc, #344]	; (5468 <nrfx_gpiote_irq_handler+0x198>)
    530e:	6a3b      	ldr	r3, [r7, #32]
    5310:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    5312:	623b      	str	r3, [r7, #32]
        *p_masks = gpio_regs[i]->LATCH;
    5314:	4b55      	ldr	r3, [pc, #340]	; (546c <nrfx_gpiote_irq_handler+0x19c>)
    5316:	6a1a      	ldr	r2, [r3, #32]
    5318:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    531a:	621a      	str	r2, [r3, #32]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    531c:	f04f 0800 	mov.w	r8, #0
            while (latch[i])
    5320:	f10d 0a10 	add.w	sl, sp, #16
    5324:	ea4f 1348 	mov.w	r3, r8, lsl #5
    5328:	9300      	str	r3, [sp, #0]
    532a:	e049      	b.n	53c0 <nrfx_gpiote_irq_handler+0xf0>
                uint32_t pin = NRF_CTZ(latch[i]);
    532c:	fa94 f4a4 	rbit	r4, r4
    5330:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    5334:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    5336:	4a4e      	ldr	r2, [pc, #312]	; (5470 <nrfx_gpiote_irq_handler+0x1a0>)
                pin += 32 * i;
    5338:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    533a:	f104 0308 	add.w	r3, r4, #8
    533e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    5342:	08e0      	lsrs	r0, r4, #3
    5344:	0899      	lsrs	r1, r3, #2
    5346:	f3c3 0582 	ubfx	r5, r3, #2, #3
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    534a:	2301      	movs	r3, #1
    bit = BITMASK_RELBIT_GET(bit);
    534c:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    5350:	fa03 fc02 	lsl.w	ip, r3, r2
    5354:	f81a 2000 	ldrb.w	r2, [sl, r0]
    5358:	9403      	str	r4, [sp, #12]
    535a:	ea22 020c 	bic.w	r2, r2, ip
    535e:	f80a 2000 	strb.w	r2, [sl, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5362:	a803      	add	r0, sp, #12
    5364:	f7ff fd24 	bl	4db0 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    5368:	9a03      	ldr	r2, [sp, #12]
    if (is_level(trigger))
    536a:	074b      	lsls	r3, r1, #29
    536c:	f102 0280 	add.w	r2, r2, #128	; 0x80
    5370:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    5374:	46ab      	mov	fp, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    5376:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
    537a:	d52b      	bpl.n	53d4 <nrfx_gpiote_irq_handler+0x104>
        call_handler(pin, trigger);
    537c:	4620      	mov	r0, r4
    537e:	4659      	mov	r1, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    5380:	b2d5      	uxtb	r5, r2
    5382:	f7ff fd2f 	bl	4de4 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5386:	a803      	add	r0, sp, #12
    5388:	9403      	str	r4, [sp, #12]
    538a:	f7ff fd11 	bl	4db0 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    538e:	9b03      	ldr	r3, [sp, #12]
    5390:	3380      	adds	r3, #128	; 0x80
    5392:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    5396:	f3c3 4301 	ubfx	r3, r3, #16, #2
    539a:	429d      	cmp	r5, r3
    539c:	d107      	bne.n	53ae <nrfx_gpiote_irq_handler+0xde>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    539e:	2100      	movs	r1, #0
    53a0:	4620      	mov	r0, r4
    53a2:	f002 feec 	bl	817e <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    53a6:	4629      	mov	r1, r5
    53a8:	4620      	mov	r0, r4
    53aa:	f002 fee8 	bl	817e <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    53ae:	a803      	add	r0, sp, #12
    53b0:	9403      	str	r4, [sp, #12]
    53b2:	f7ff fcfd 	bl	4db0 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    53b6:	2201      	movs	r2, #1
    53b8:	9b03      	ldr	r3, [sp, #12]
    53ba:	fa02 f303 	lsl.w	r3, r2, r3
    53be:	6203      	str	r3, [r0, #32]
            while (latch[i])
    53c0:	f85a 4028 	ldr.w	r4, [sl, r8, lsl #2]
    53c4:	2c00      	cmp	r4, #0
    53c6:	d1b1      	bne.n	532c <nrfx_gpiote_irq_handler+0x5c>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    53c8:	f1b8 0f00 	cmp.w	r8, #0
    53cc:	d11a      	bne.n	5404 <nrfx_gpiote_irq_handler+0x134>
    53ce:	f04f 0801 	mov.w	r8, #1
    53d2:	e7a7      	b.n	5324 <nrfx_gpiote_irq_handler+0x54>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    53d4:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    53d6:	bf0c      	ite	eq
    53d8:	2103      	moveq	r1, #3
    53da:	2102      	movne	r1, #2
    53dc:	4620      	mov	r0, r4
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    53de:	9201      	str	r2, [sp, #4]
        nrf_gpio_cfg_sense_set(pin, next_sense);
    53e0:	f002 fecd 	bl	817e <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    53e4:	2d03      	cmp	r5, #3
    53e6:	d004      	beq.n	53f2 <nrfx_gpiote_irq_handler+0x122>
    53e8:	9a01      	ldr	r2, [sp, #4]
    53ea:	2a02      	cmp	r2, #2
    53ec:	d106      	bne.n	53fc <nrfx_gpiote_irq_handler+0x12c>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    53ee:	2d01      	cmp	r5, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    53f0:	d1dd      	bne.n	53ae <nrfx_gpiote_irq_handler+0xde>
            call_handler(pin, trigger);
    53f2:	4659      	mov	r1, fp
    53f4:	4620      	mov	r0, r4
    53f6:	f7ff fcf5 	bl	4de4 <call_handler>
    53fa:	e7d8      	b.n	53ae <nrfx_gpiote_irq_handler+0xde>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    53fc:	2a03      	cmp	r2, #3
    53fe:	d1d6      	bne.n	53ae <nrfx_gpiote_irq_handler+0xde>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    5400:	2d02      	cmp	r5, #2
    5402:	e7f5      	b.n	53f0 <nrfx_gpiote_irq_handler+0x120>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5404:	f8c9 417c 	str.w	r4, [r9, #380]	; 0x17c
    5408:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    540c:	6a3a      	ldr	r2, [r7, #32]
    540e:	4917      	ldr	r1, [pc, #92]	; (546c <nrfx_gpiote_irq_handler+0x19c>)
    5410:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    5412:	623a      	str	r2, [r7, #32]
        *p_masks = gpio_regs[i]->LATCH;
    5414:	6a0b      	ldr	r3, [r1, #32]
    5416:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    5418:	620b      	str	r3, [r1, #32]
        if (latch[port_idx])
    541a:	4313      	orrs	r3, r2
    541c:	f47f af7e 	bne.w	531c <nrfx_gpiote_irq_handler+0x4c>
        mask &= ~NRFX_BIT(ch);
    5420:	2401      	movs	r4, #1
    while (mask)
    5422:	b916      	cbnz	r6, 542a <nrfx_gpiote_irq_handler+0x15a>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    5424:	b007      	add	sp, #28
    5426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    542a:	fa96 f3a6 	rbit	r3, r6
    542e:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    5432:	fa04 f203 	lsl.w	r2, r4, r3
    5436:	009b      	lsls	r3, r3, #2
    5438:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    543c:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    5440:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    5444:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    5448:	f3c0 2005 	ubfx	r0, r0, #8, #6
    544c:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
    5450:	ea26 0602 	bic.w	r6, r6, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    5454:	f7ff fcc6 	bl	4de4 <call_handler>
    5458:	e7e3      	b.n	5422 <nrfx_gpiote_irq_handler+0x152>
    545a:	bf00      	nop
    545c:	5000d100 	.word	0x5000d100
    5460:	5000d000 	.word	0x5000d000
    5464:	5000d120 	.word	0x5000d120
    5468:	50842500 	.word	0x50842500
    546c:	50842800 	.word	0x50842800
    5470:	2000005c 	.word	0x2000005c

00005474 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
    5474:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(handler);
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    5476:	4c08      	ldr	r4, [pc, #32]	; (5498 <nrfx_ipc_init+0x24>)
{
    5478:	460e      	mov	r6, r1
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    547a:	7923      	ldrb	r3, [r4, #4]
{
    547c:	4615      	mov	r5, r2
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    547e:	b943      	cbnz	r3, 5492 <nrfx_ipc_init+0x1e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
    5480:	202a      	movs	r0, #42	; 0x2a
    5482:	f7fd f90f 	bl	26a4 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
    5486:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
    5488:	4804      	ldr	r0, [pc, #16]	; (549c <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
    548a:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
    548c:	6026      	str	r6, [r4, #0]
    m_ipc_cb.p_context = p_context;
    548e:	60a5      	str	r5, [r4, #8]
}
    5490:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
    5492:	4803      	ldr	r0, [pc, #12]	; (54a0 <nrfx_ipc_init+0x2c>)
    5494:	e7fc      	b.n	5490 <nrfx_ipc_init+0x1c>
    5496:	bf00      	nop
    5498:	20020358 	.word	0x20020358
    549c:	0bad0000 	.word	0x0bad0000
    54a0:	0bad000c 	.word	0x0bad000c

000054a4 <nrfx_ipc_config_load>:
{
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
    54a4:	2300      	movs	r3, #0
{
    54a6:	b530      	push	{r4, r5, lr}
    p_reg->SEND_CNF[index] = channels_mask;
    54a8:	4a0d      	ldr	r2, [pc, #52]	; (54e0 <nrfx_ipc_config_load+0x3c>)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
    54aa:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    54ae:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
    54b2:	3301      	adds	r3, #1
    54b4:	2b10      	cmp	r3, #16
    54b6:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
    54ba:	d1f6      	bne.n	54aa <nrfx_ipc_config_load+0x6>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
    54bc:	2300      	movs	r3, #0
    p_reg->RECEIVE_CNF[index] = channels_mask;
    54be:	4a08      	ldr	r2, [pc, #32]	; (54e0 <nrfx_ipc_config_load+0x3c>)
    54c0:	f100 0140 	add.w	r1, r0, #64	; 0x40
    54c4:	f503 74b2 	add.w	r4, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
    54c8:	f851 5b04 	ldr.w	r5, [r1], #4
    for (i = 0; i < IPC_CONF_NUM; ++i)
    54cc:	3301      	adds	r3, #1
    54ce:	2b10      	cmp	r3, #16
    54d0:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
    54d4:	d1f6      	bne.n	54c4 <nrfx_ipc_config_load+0x20>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
    54d6:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
    p_reg->INTENSET = mask;
    54da:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    54de:	bd30      	pop	{r4, r5, pc}
    54e0:	5002a000 	.word	0x5002a000

000054e4 <nrfx_ipc_receive_event_enable>:
}

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
    54e4:	2301      	movs	r3, #1
    54e6:	4a02      	ldr	r2, [pc, #8]	; (54f0 <nrfx_ipc_receive_event_enable+0xc>)
    54e8:	4083      	lsls	r3, r0
    54ea:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    54ee:	4770      	bx	lr
    54f0:	5002a000 	.word	0x5002a000

000054f4 <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
    54f4:	2301      	movs	r3, #1
    p_reg->INTENCLR = mask;
    54f6:	4a02      	ldr	r2, [pc, #8]	; (5500 <nrfx_ipc_receive_event_disable+0xc>)
    54f8:	4083      	lsls	r3, r0
    54fa:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
    54fe:	4770      	bx	lr
    5500:	5002a000 	.word	0x5002a000

00005504 <nrfx_ipc_irq_handler>:
    return p_reg->INTPEND;
    5504:	4b0c      	ldr	r3, [pc, #48]	; (5538 <nrfx_ipc_irq_handler+0x34>)
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
    5506:	b430      	push	{r4, r5}
    5508:	f8d3 030c 	ldr.w	r0, [r3, #780]	; 0x30c
    // Clear these events
    uint32_t bitmask = events_map;
    while (bitmask)
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
        bitmask &= ~(1UL << event_idx);
    550c:	2401      	movs	r4, #1
    uint32_t bitmask = events_map;
    550e:	4603      	mov	r3, r0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5510:	2500      	movs	r5, #0
    while (bitmask)
    5512:	b923      	cbnz	r3, 551e <nrfx_ipc_irq_handler+0x1a>
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
    }

    // Execute interrupt handler to provide information about events to app
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
}
    5514:	bc30      	pop	{r4, r5}
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
    5516:	4b09      	ldr	r3, [pc, #36]	; (553c <nrfx_ipc_irq_handler+0x38>)
    5518:	681a      	ldr	r2, [r3, #0]
    551a:	6899      	ldr	r1, [r3, #8]
    551c:	4710      	bx	r2
        uint8_t event_idx = NRF_CTZ(bitmask);
    551e:	fa93 f2a3 	rbit	r2, r3
    5522:	fab2 f282 	clz	r2, r2
        bitmask &= ~(1UL << event_idx);
    5526:	fa04 f102 	lsl.w	r1, r4, r2
    552a:	ea23 0301 	bic.w	r3, r3, r1
    552e:	4904      	ldr	r1, [pc, #16]	; (5540 <nrfx_ipc_irq_handler+0x3c>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    5530:	0092      	lsls	r2, r2, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5532:	508d      	str	r5, [r1, r2]
}
    5534:	e7ed      	b.n	5512 <nrfx_ipc_irq_handler+0xe>
    5536:	bf00      	nop
    5538:	5002a000 	.word	0x5002a000
    553c:	20020358 	.word	0x20020358
    5540:	5002a100 	.word	0x5002a100

00005544 <nrf_gpio_cfg_default>:
        case 1: return NRF_P1;
    5544:	4b09      	ldr	r3, [pc, #36]	; (556c <nrf_gpio_cfg_default+0x28>)
    5546:	490a      	ldr	r1, [pc, #40]	; (5570 <nrf_gpio_cfg_default+0x2c>)
    *p_pin = pin_number & 0x1F;
    5548:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    554c:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    554e:	2801      	cmp	r0, #1
    5550:	bf08      	it	eq
    5552:	460b      	moveq	r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    5554:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    5558:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    555c:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    5560:	f042 0202 	orr.w	r2, r2, #2
    reg->PIN_CNF[pin_number] = cnf;
    5564:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
    5568:	4770      	bx	lr
    556a:	bf00      	nop
    556c:	50842500 	.word	0x50842500
    5570:	50842800 	.word	0x50842800

00005574 <nrfx_pdm_irq_handler>:

static nrfx_pdm_cb_t m_cb;


void nrfx_pdm_irq_handler(void)
{
    5574:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)task);
}

NRF_STATIC_INLINE bool nrf_pdm_event_check(NRF_PDM_Type const * p_reg, nrf_pdm_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5576:	4a3c      	ldr	r2, [pc, #240]	; (5668 <nrfx_pdm_irq_handler+0xf4>)
    5578:	4c3c      	ldr	r4, [pc, #240]	; (566c <nrfx_pdm_irq_handler+0xf8>)
    557a:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
    if (nrf_pdm_event_check(NRF_PDM0, NRF_PDM_EVENT_STARTED))
    557e:	2b00      	cmp	r3, #0
    5580:	d047      	beq.n	5612 <nrfx_pdm_irq_handler+0x9e>
}

NRF_STATIC_INLINE void nrf_pdm_event_clear(NRF_PDM_Type * p_reg, nrf_pdm_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5582:	2300      	movs	r3, #0
    5584:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    5588:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
    {
        nrf_pdm_event_clear(NRF_PDM0, NRF_PDM_EVENT_STARTED);
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRF_PDM_EVENT_STARTED));

        uint8_t finished_buffer = m_cb.active_buffer;
    558c:	7ca3      	ldrb	r3, [r4, #18]

        // Check if the next buffer was set before.
        uint8_t next_buffer = (~m_cb.active_buffer) & 0x01;
    558e:	43da      	mvns	r2, r3
    5590:	f002 0201 	and.w	r2, r2, #1
        if (m_cb.buff_address[next_buffer] ||
    5594:	eb04 0182 	add.w	r1, r4, r2, lsl #2
    5598:	6849      	ldr	r1, [r1, #4]
    559a:	b911      	cbnz	r1, 55a2 <nrfx_pdm_irq_handler+0x2e>
            m_cb.op_state == NRFX_PDM_STATE_STARTING)
    559c:	7c61      	ldrb	r1, [r4, #17]
        if (m_cb.buff_address[next_buffer] ||
    559e:	2902      	cmp	r1, #2
    55a0:	d12c      	bne.n	55fc <nrfx_pdm_irq_handler+0x88>
            nrfx_pdm_evt_t evt;
            evt.error = NRFX_PDM_NO_ERROR;
            m_cb.error = 0;

            // Release the full buffer if ready and request the next one.
            if (m_cb.op_state == NRFX_PDM_STATE_STARTING)
    55a2:	7c60      	ldrb	r0, [r4, #17]
            evt.error = NRFX_PDM_NO_ERROR;
    55a4:	2100      	movs	r1, #0
            if (m_cb.op_state == NRFX_PDM_STATE_STARTING)
    55a6:	2802      	cmp	r0, #2
            {
                evt.buffer_released = 0;
                m_cb.op_state = NRFX_PDM_STATE_RUNNING;
    55a8:	bf0d      	iteet	eq
    55aa:	2301      	moveq	r3, #1
            }
            else
            {
                evt.buffer_released = m_cb.buff_address[finished_buffer];
    55ac:	eb04 0383 	addne.w	r3, r4, r3, lsl #2
    55b0:	6858      	ldrne	r0, [r3, #4]
                m_cb.op_state = NRFX_PDM_STATE_RUNNING;
    55b2:	7463      	strbeq	r3, [r4, #17]
                m_cb.buff_address[finished_buffer] = 0;
    55b4:	bf18      	it	ne
    55b6:	6059      	strne	r1, [r3, #4]
                m_cb.active_buffer = next_buffer;
            }
            evt.buffer_requested = true;
    55b8:	f04f 0301 	mov.w	r3, #1
            evt.error = NRFX_PDM_NO_ERROR;
    55bc:	f88d 100c 	strb.w	r1, [sp, #12]
            m_cb.error = 0;
    55c0:	74e1      	strb	r1, [r4, #19]
                evt.buffer_released = 0;
    55c2:	bf0e      	itee	eq
    55c4:	9102      	streq	r1, [sp, #8]
                evt.buffer_released = m_cb.buff_address[finished_buffer];
    55c6:	9002      	strne	r0, [sp, #8]
                m_cb.active_buffer = next_buffer;
    55c8:	74a2      	strbne	r2, [r4, #18]
            evt.buffer_requested = true;
    55ca:	f88d 3004 	strb.w	r3, [sp, #4]
                    .buffer_requested = false,
                    .buffer_released  = NULL,
                    .error = NRFX_PDM_ERROR_OVERFLOW
                };
                m_cb.error = 1;
                m_cb.event_handler(&evt);
    55ce:	6823      	ldr	r3, [r4, #0]
    55d0:	a801      	add	r0, sp, #4
    55d2:	4798      	blx	r3
            }
        }

        if (m_cb.op_state == NRFX_PDM_STATE_STARTING)
    55d4:	7c63      	ldrb	r3, [r4, #17]
    55d6:	2b02      	cmp	r3, #2
    55d8:	d101      	bne.n	55de <nrfx_pdm_irq_handler+0x6a>
        {
            m_cb.op_state = NRFX_PDM_STATE_RUNNING;
    55da:	2301      	movs	r3, #1
    55dc:	7463      	strb	r3, [r4, #17]
            m_cb.event_handler(&evt);
        }
        m_cb.active_buffer = 0;
    }

    if (m_cb.irq_buff_request)
    55de:	7d23      	ldrb	r3, [r4, #20]
    55e0:	b153      	cbz	r3, 55f8 <nrfx_pdm_irq_handler+0x84>
    {
        nrfx_pdm_evt_t const evt =
    55e2:	2301      	movs	r3, #1
    55e4:	f88d 3004 	strb.w	r3, [sp, #4]
    55e8:	2300      	movs	r3, #0
            .buffer_requested = true,
            .buffer_released  = NULL,
            .error = NRFX_PDM_NO_ERROR,
        };
        m_cb.irq_buff_request = 0;
        m_cb.event_handler(&evt);
    55ea:	a801      	add	r0, sp, #4
        nrfx_pdm_evt_t const evt =
    55ec:	9302      	str	r3, [sp, #8]
    55ee:	f88d 300c 	strb.w	r3, [sp, #12]
        m_cb.irq_buff_request = 0;
    55f2:	7523      	strb	r3, [r4, #20]
        m_cb.event_handler(&evt);
    55f4:	6823      	ldr	r3, [r4, #0]
    55f6:	4798      	blx	r3
    }
}
    55f8:	b004      	add	sp, #16
    55fa:	bd10      	pop	{r4, pc}
            if (m_cb.error == 0)
    55fc:	7ce3      	ldrb	r3, [r4, #19]
    55fe:	2b00      	cmp	r3, #0
    5600:	d1e8      	bne.n	55d4 <nrfx_pdm_irq_handler+0x60>
                nrfx_pdm_evt_t const evt = {
    5602:	f88d 3004 	strb.w	r3, [sp, #4]
    5606:	9302      	str	r3, [sp, #8]
    5608:	2301      	movs	r3, #1
    560a:	f88d 300c 	strb.w	r3, [sp, #12]
                m_cb.error = 1;
    560e:	74e3      	strb	r3, [r4, #19]
    5610:	e7dd      	b.n	55ce <nrfx_pdm_irq_handler+0x5a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5612:	f8d2 1104 	ldr.w	r1, [r2, #260]	; 0x104
    else if (nrf_pdm_event_check(NRF_PDM0, NRF_PDM_EVENT_STOPPED))
    5616:	2900      	cmp	r1, #0
    5618:	d0e1      	beq.n	55de <nrfx_pdm_irq_handler+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    561a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    561e:	f8d2 1104 	ldr.w	r1, [r2, #260]	; 0x104
    p_reg->ENABLE = (PDM_ENABLE_ENABLE_Enabled << PDM_ENABLE_ENABLE_Pos);
}

NRF_STATIC_INLINE void nrf_pdm_disable(NRF_PDM_Type * p_reg)
{
    p_reg->ENABLE = (PDM_ENABLE_ENABLE_Disabled << PDM_ENABLE_ENABLE_Pos);
    5622:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
        if (m_cb.buff_address[m_cb.active_buffer])
    5626:	7ca2      	ldrb	r2, [r4, #18]
        m_cb.op_state = NRFX_PDM_STATE_IDLE;
    5628:	7463      	strb	r3, [r4, #17]
        if (m_cb.buff_address[m_cb.active_buffer])
    562a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    562e:	6851      	ldr	r1, [r2, #4]
        evt.error = NRFX_PDM_NO_ERROR;
    5630:	f88d 300c 	strb.w	r3, [sp, #12]
        evt.buffer_requested = false;
    5634:	f88d 3004 	strb.w	r3, [sp, #4]
        if (m_cb.buff_address[m_cb.active_buffer])
    5638:	b121      	cbz	r1, 5644 <nrfx_pdm_irq_handler+0xd0>
            m_cb.buff_address[m_cb.active_buffer] = 0;
    563a:	6053      	str	r3, [r2, #4]
            evt.buffer_released = m_cb.buff_address[m_cb.active_buffer];
    563c:	9102      	str	r1, [sp, #8]
            m_cb.event_handler(&evt);
    563e:	6823      	ldr	r3, [r4, #0]
    5640:	a801      	add	r0, sp, #4
    5642:	4798      	blx	r3
        if (m_cb.buff_address[second_buffer])
    5644:	7ca3      	ldrb	r3, [r4, #18]
    5646:	43db      	mvns	r3, r3
    5648:	f003 0301 	and.w	r3, r3, #1
    564c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    5650:	685a      	ldr	r2, [r3, #4]
    5652:	b12a      	cbz	r2, 5660 <nrfx_pdm_irq_handler+0xec>
            evt.buffer_released = m_cb.buff_address[second_buffer];
    5654:	9202      	str	r2, [sp, #8]
            m_cb.buff_address[second_buffer] = 0;
    5656:	2200      	movs	r2, #0
            m_cb.event_handler(&evt);
    5658:	a801      	add	r0, sp, #4
            m_cb.buff_address[second_buffer] = 0;
    565a:	605a      	str	r2, [r3, #4]
            m_cb.event_handler(&evt);
    565c:	6823      	ldr	r3, [r4, #0]
    565e:	4798      	blx	r3
        m_cb.active_buffer = 0;
    5660:	2300      	movs	r3, #0
    5662:	74a3      	strb	r3, [r4, #18]
    5664:	e7bb      	b.n	55de <nrfx_pdm_irq_handler+0x6a>
    5666:	bf00      	nop
    5668:	50026000 	.word	0x50026000
    566c:	20020364 	.word	0x20020364

00005670 <nrfx_pdm_init>:


nrfx_err_t nrfx_pdm_init(nrfx_pdm_config_t const * p_config,
                         nrfx_pdm_event_handler_t  event_handler)
{
    5670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(event_handler);
    nrfx_err_t err_code;

    if (m_cb.drv_state != NRFX_DRV_STATE_UNINITIALIZED)
    5672:	4c3b      	ldr	r4, [pc, #236]	; (5760 <nrfx_pdm_init+0xf0>)
    5674:	7c23      	ldrb	r3, [r4, #16]
    5676:	2b00      	cmp	r3, #0
    5678:	d16e      	bne.n	5758 <nrfx_pdm_init+0xe8>
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    if (p_config->gain_l > NRF_PDM_GAIN_MAXIMUM ||
    567a:	7a07      	ldrb	r7, [r0, #8]
    567c:	2f50      	cmp	r7, #80	; 0x50
    567e:	d86d      	bhi.n	575c <nrfx_pdm_init+0xec>
        p_config->gain_r > NRF_PDM_GAIN_MAXIMUM)
    5680:	7a46      	ldrb	r6, [r0, #9]
    if (p_config->gain_l > NRF_PDM_GAIN_MAXIMUM ||
    5682:	2e50      	cmp	r6, #80	; 0x50
    5684:	d86a      	bhi.n	575c <nrfx_pdm_init+0xec>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    m_cb.buff_address[0] = 0;
    m_cb.buff_address[1] = 0;
    5686:	e9c4 3301 	strd	r3, r3, [r4, #4]
    m_cb.active_buffer = 0;
    m_cb.error = 0;
    m_cb.event_handler = event_handler;
    m_cb.op_state = NRFX_PDM_STATE_IDLE;
    m_cb.skip_gpio_cfg = p_config->skip_gpio_cfg;
    568a:	7b45      	ldrb	r5, [r0, #13]
    m_cb.active_buffer = 0;
    568c:	8263      	strh	r3, [r4, #18]
    m_cb.op_state = NRFX_PDM_STATE_IDLE;
    568e:	7463      	strb	r3, [r4, #17]
}

#if NRF_PDM_HAS_RATIO_CONFIG
NRF_STATIC_INLINE void nrf_pdm_ratio_set(NRF_PDM_Type * p_reg, nrf_pdm_ratio_t ratio)
{
    p_reg->RATIO = ratio;
    5690:	4a34      	ldr	r2, [pc, #208]	; (5764 <nrfx_pdm_init+0xf4>)
    5692:	7ac3      	ldrb	r3, [r0, #11]
    m_cb.event_handler = event_handler;
    5694:	6021      	str	r1, [r4, #0]
    m_cb.skip_gpio_cfg = p_config->skip_gpio_cfg;
    5696:	7565      	strb	r5, [r4, #21]
    5698:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
#endif

#if NRF_PDM_HAS_MCLKCONFIG
NRF_STATIC_INLINE void nrf_pdm_mclksrc_configure(NRF_PDM_Type * p_reg, nrf_pdm_mclksrc_t mclksrc)
{
    p_reg->MCLKCONFIG = mclksrc;
    569c:	7b03      	ldrb	r3, [r0, #12]
    569e:	f8c2 354c 	str.w	r3, [r2, #1356]	; 0x54c
#endif

#if NRF_PDM_HAS_MCLKCONFIG
    nrf_pdm_mclksrc_configure(NRF_PDM0, p_config->mclksrc);
#endif
    nrf_pdm_clock_set(NRF_PDM0, p_config->clock_freq);
    56a2:	6843      	ldr	r3, [r0, #4]
    p_reg->PDMCLKCTRL = ((pdm_freq << PDM_PDMCLKCTRL_FREQ_Pos) & PDM_PDMCLKCTRL_FREQ_Msk);
    56a4:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
                    | ((pdm_edge << PDM_MODE_EDGE_Pos) & PDM_MODE_EDGE_Msk);
    56a8:	7843      	ldrb	r3, [r0, #1]
    p_reg->MODE = ((pdm_mode << PDM_MODE_OPERATION_Pos) & PDM_MODE_OPERATION_Msk)
    56aa:	7801      	ldrb	r1, [r0, #0]
                    | ((pdm_edge << PDM_MODE_EDGE_Pos) & PDM_MODE_EDGE_Msk);
    56ac:	005b      	lsls	r3, r3, #1
    56ae:	f003 0302 	and.w	r3, r3, #2
    p_reg->MODE = ((pdm_mode << PDM_MODE_OPERATION_Pos) & PDM_MODE_OPERATION_Msk)
    56b2:	f001 0101 	and.w	r1, r1, #1
                    | ((pdm_edge << PDM_MODE_EDGE_Pos) & PDM_MODE_EDGE_Msk);
    56b6:	430b      	orrs	r3, r1
    p_reg->MODE = ((pdm_mode << PDM_MODE_OPERATION_Pos) & PDM_MODE_OPERATION_Msk)
    56b8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    p_reg->GAINL = gain_l;
    56bc:	f8c2 7518 	str.w	r7, [r2, #1304]	; 0x518
    p_reg->GAINR = gain_r;
    56c0:	f8c2 651c 	str.w	r6, [r2, #1308]	; 0x51c
    nrf_pdm_mode_set(NRF_PDM0, p_config->mode, p_config->edge);
    nrf_pdm_gain_set(NRF_PDM0, p_config->gain_l, p_config->gain_r);

    if (!p_config->skip_gpio_cfg)
    56c4:	bb45      	cbnz	r5, 5718 <nrfx_pdm_init+0xa8>
    {
        nrf_gpio_pin_clear(p_config->pin_clk);
    56c6:	7883      	ldrb	r3, [r0, #2]
        case 1: return NRF_P1;
    56c8:	4e27      	ldr	r6, [pc, #156]	; (5768 <nrfx_pdm_init+0xf8>)
    56ca:	f502 0201 	add.w	r2, r2, #8454144	; 0x810000
    56ce:	f003 071f 	and.w	r7, r3, #31
    56d2:	f502 4245 	add.w	r2, r2, #50432	; 0xc500
    return pin_number >> 5;
    56d6:	095b      	lsrs	r3, r3, #5
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    56d8:	2501      	movs	r5, #1
        case 1: return NRF_P1;
    56da:	2b01      	cmp	r3, #1
    56dc:	bf14      	ite	ne
    56de:	4611      	movne	r1, r2
    56e0:	4631      	moveq	r1, r6
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    56e2:	40bd      	lsls	r5, r7
    p_reg->OUTCLR = clr_mask;
    56e4:	60cd      	str	r5, [r1, #12]
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    56e6:	eb01 0187 	add.w	r1, r1, r7, lsl #2
    56ea:	f8d1 5200 	ldr.w	r5, [r1, #512]	; 0x200
    56ee:	f005 45e0 	and.w	r5, r5, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    56f2:	f045 0503 	orr.w	r5, r5, #3
    reg->PIN_CNF[pin_number] = cnf;
    56f6:	f8c1 5200 	str.w	r5, [r1, #512]	; 0x200
        nrf_gpio_cfg_output(p_config->pin_clk);
        nrf_gpio_cfg_input(p_config->pin_din, NRF_GPIO_PIN_NOPULL);
    56fa:	78c1      	ldrb	r1, [r0, #3]
    return pin_number >> 5;
    56fc:	094b      	lsrs	r3, r1, #5
        case 1: return NRF_P1;
    56fe:	2b01      	cmp	r3, #1
    5700:	bf08      	it	eq
    5702:	4632      	moveq	r2, r6
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    5704:	f001 031f 	and.w	r3, r1, #31
    5708:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    570c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    5710:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf;
    5714:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    }
    if (!p_config->skip_psel_cfg)
    5718:	7b82      	ldrb	r2, [r0, #14]
    571a:	4b12      	ldr	r3, [pc, #72]	; (5764 <nrfx_pdm_init+0xf4>)
    571c:	b92a      	cbnz	r2, 572a <nrfx_pdm_init+0xba>
    {
        nrf_pdm_psel_connect(NRF_PDM0, p_config->pin_clk, p_config->pin_din);
    571e:	7881      	ldrb	r1, [r0, #2]
    5720:	78c2      	ldrb	r2, [r0, #3]
    p_reg->PSEL.CLK = psel_clk;
    5722:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    p_reg->PSEL.DIN = psel_din;
    5726:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    572a:	2200      	movs	r2, #0
    572c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    5730:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    5734:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    5738:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
    573c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    5740:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    5744:	2203      	movs	r2, #3
    nrf_pdm_event_clear(NRF_PDM0, NRF_PDM_EVENT_STARTED);
    nrf_pdm_event_clear(NRF_PDM0, NRF_PDM_EVENT_END);
    nrf_pdm_event_clear(NRF_PDM0, NRF_PDM_EVENT_STOPPED);
    nrf_pdm_int_enable(NRF_PDM0, NRF_PDM_INT_STARTED | NRF_PDM_INT_STOPPED);
    NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_PDM0), p_config->interrupt_priority);
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_PDM0));
    5746:	2026      	movs	r0, #38	; 0x26
    5748:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    574c:	f7fc ffaa 	bl	26a4 <arch_irq_enable>
    m_cb.drv_state = NRFX_DRV_STATE_INITIALIZED;
    5750:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    5752:	4806      	ldr	r0, [pc, #24]	; (576c <nrfx_pdm_init+0xfc>)
    m_cb.drv_state = NRFX_DRV_STATE_INITIALIZED;
    5754:	7423      	strb	r3, [r4, #16]
}
    5756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return err_code;
    5758:	4805      	ldr	r0, [pc, #20]	; (5770 <nrfx_pdm_init+0x100>)
    575a:	e7fc      	b.n	5756 <nrfx_pdm_init+0xe6>
        return err_code;
    575c:	4805      	ldr	r0, [pc, #20]	; (5774 <nrfx_pdm_init+0x104>)
    575e:	e7fa      	b.n	5756 <nrfx_pdm_init+0xe6>
    5760:	20020364 	.word	0x20020364
    5764:	50026000 	.word	0x50026000
    5768:	50842800 	.word	0x50842800
    576c:	0bad0000 	.word	0x0bad0000
    5770:	0bad0005 	.word	0x0bad0005
    5774:	0bad0004 	.word	0x0bad0004

00005778 <nrfx_pdm_uninit>:

void nrfx_pdm_uninit(void)
{
    5778:	b538      	push	{r3, r4, r5, lr}
    p_reg->ENABLE = (PDM_ENABLE_ENABLE_Disabled << PDM_ENABLE_ENABLE_Pos);
    577a:	2300      	movs	r3, #0
    577c:	4c08      	ldr	r4, [pc, #32]	; (57a0 <nrfx_pdm_uninit+0x28>)
    nrf_pdm_disable(NRF_PDM0);

    if (!m_cb.skip_gpio_cfg)
    577e:	4d09      	ldr	r5, [pc, #36]	; (57a4 <nrfx_pdm_uninit+0x2c>)
    5780:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    5784:	7d6b      	ldrb	r3, [r5, #21]
    5786:	b93b      	cbnz	r3, 5798 <nrfx_pdm_uninit+0x20>
    return p_reg->PSEL.CLK;
    5788:	f8d4 0540 	ldr.w	r0, [r4, #1344]	; 0x540
    {
        nrf_gpio_cfg_default(nrf_pdm_clk_pin_get(NRF_PDM0));
    578c:	f7ff feda 	bl	5544 <nrf_gpio_cfg_default>
    return p_reg->PSEL.DIN;
    5790:	f8d4 0544 	ldr.w	r0, [r4, #1348]	; 0x544
        nrf_gpio_cfg_default(nrf_pdm_din_pin_get(NRF_PDM0));
    5794:	f7ff fed6 	bl	5544 <nrf_gpio_cfg_default>
    }

    m_cb.drv_state = NRFX_DRV_STATE_UNINITIALIZED;
    5798:	2300      	movs	r3, #0
    579a:	742b      	strb	r3, [r5, #16]
    NRFX_LOG_INFO("Uninitialized.");
}
    579c:	bd38      	pop	{r3, r4, r5, pc}
    579e:	bf00      	nop
    57a0:	50026000 	.word	0x50026000
    57a4:	20020364 	.word	0x20020364

000057a8 <nrfx_pdm_start>:
nrfx_err_t nrfx_pdm_start(void)
{
    NRFX_ASSERT(m_cb.drv_state != NRFX_DRV_STATE_UNINITIALIZED);
    nrfx_err_t err_code;

    if (m_cb.op_state != NRFX_PDM_STATE_IDLE)
    57a8:	4b09      	ldr	r3, [pc, #36]	; (57d0 <nrfx_pdm_start+0x28>)
    57aa:	7c5a      	ldrb	r2, [r3, #17]
    57ac:	b132      	cbz	r2, 57bc <nrfx_pdm_start+0x14>
    {
        if (m_cb.op_state == NRFX_PDM_STATE_RUNNING)
    57ae:	7c5a      	ldrb	r2, [r3, #17]
        }
        err_code = NRFX_ERROR_BUSY;
        NRFX_LOG_WARNING("Function: %s, error code: %s.",
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    57b0:	4808      	ldr	r0, [pc, #32]	; (57d4 <nrfx_pdm_start+0x2c>)
    57b2:	4b09      	ldr	r3, [pc, #36]	; (57d8 <nrfx_pdm_start+0x30>)
    57b4:	2a01      	cmp	r2, #1
    57b6:	bf18      	it	ne
    57b8:	4618      	movne	r0, r3
    57ba:	4770      	bx	lr
    }

    m_cb.op_state = NRFX_PDM_STATE_STARTING;
    57bc:	2202      	movs	r2, #2
    57be:	745a      	strb	r2, [r3, #17]
    m_cb.irq_buff_request = 1;
    57c0:	2201      	movs	r2, #1
    57c2:	751a      	strb	r2, [r3, #20]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    57c4:	2240      	movs	r2, #64	; 0x40
    57c6:	4b05      	ldr	r3, [pc, #20]	; (57dc <nrfx_pdm_start+0x34>)

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    57c8:	4802      	ldr	r0, [pc, #8]	; (57d4 <nrfx_pdm_start+0x2c>)
    57ca:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
}
    57ce:	4770      	bx	lr
    57d0:	20020364 	.word	0x20020364
    57d4:	0bad0000 	.word	0x0bad0000
    57d8:	0bad000b 	.word	0x0bad000b
    57dc:	e000e100 	.word	0xe000e100

000057e0 <nrfx_pdm_buffer_set>:

nrfx_err_t nrfx_pdm_buffer_set(int16_t * buffer, uint16_t buffer_length)
{
    57e0:	b570      	push	{r4, r5, r6, lr}
    if (m_cb.drv_state == NRFX_DRV_STATE_UNINITIALIZED)
    57e2:	4c20      	ldr	r4, [pc, #128]	; (5864 <nrfx_pdm_buffer_set+0x84>)
{
    57e4:	4606      	mov	r6, r0
    if (m_cb.drv_state == NRFX_DRV_STATE_UNINITIALIZED)
    57e6:	7c23      	ldrb	r3, [r4, #16]
{
    57e8:	460d      	mov	r5, r1
    if (m_cb.drv_state == NRFX_DRV_STATE_UNINITIALIZED)
    57ea:	2b00      	cmp	r3, #0
    57ec:	d033      	beq.n	5856 <nrfx_pdm_buffer_set+0x76>
    {
        return NRFX_ERROR_INVALID_STATE;
    }
    if (m_cb.op_state == NRFX_PDM_STATE_STOPPING)
    57ee:	7c63      	ldrb	r3, [r4, #17]
    57f0:	2b03      	cmp	r3, #3
    57f2:	d032      	beq.n	585a <nrfx_pdm_buffer_set+0x7a>
    {
        return NRFX_ERROR_BUSY;
    }
    if ((buffer == NULL) || (buffer_length > NRFX_PDM_MAX_BUFFER_SIZE))
    57f4:	2800      	cmp	r0, #0
    57f6:	d032      	beq.n	585e <nrfx_pdm_buffer_set+0x7e>
    57f8:	040b      	lsls	r3, r1, #16
    57fa:	d430      	bmi.n	585e <nrfx_pdm_buffer_set+0x7e>
    }

    nrfx_err_t err_code = NRFX_SUCCESS;

    // Enter the PDM critical section.
    NRFX_IRQ_DISABLE(nrfx_get_irq_number(NRF_PDM0));
    57fc:	2026      	movs	r0, #38	; 0x26
    57fe:	f7fc ff61 	bl	26c4 <arch_irq_disable>

    uint8_t next_buffer = (~m_cb.active_buffer) & 0x01;
    if (m_cb.op_state == NRFX_PDM_STATE_STARTING)
    5802:	7c62      	ldrb	r2, [r4, #17]
    uint8_t next_buffer = (~m_cb.active_buffer) & 0x01;
    5804:	7ca3      	ldrb	r3, [r4, #18]
    if (m_cb.op_state == NRFX_PDM_STATE_STARTING)
    5806:	2a02      	cmp	r2, #2
    5808:	bf16      	itet	ne
    580a:	43db      	mvnne	r3, r3
    {
        next_buffer = 0;
    580c:	2300      	moveq	r3, #0
    580e:	f003 0301 	andne.w	r3, r3, #1
    }

    if (m_cb.buff_address[next_buffer])
    5812:	eb04 0283 	add.w	r2, r4, r3, lsl #2
    5816:	6851      	ldr	r1, [r2, #4]
    5818:	b9b9      	cbnz	r1, 584a <nrfx_pdm_buffer_set+0x6a>
        err_code = NRFX_ERROR_BUSY;
    }
    else
    {
        m_cb.buff_address[next_buffer] = buffer;
        m_cb.buff_length[next_buffer] = buffer_length;
    581a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    581e:	819d      	strh	r5, [r3, #12]
    p_reg->SAMPLE.PTR = (uint32_t)p_buffer;
    5820:	4b11      	ldr	r3, [pc, #68]	; (5868 <nrfx_pdm_buffer_set+0x88>)
        m_cb.buff_address[next_buffer] = buffer;
    5822:	6056      	str	r6, [r2, #4]
    5824:	f8c3 6560 	str.w	r6, [r3, #1376]	; 0x560
    p_reg->SAMPLE.MAXCNT = num;
    5828:	f8c3 5564 	str.w	r5, [r3, #1380]	; 0x564
        nrf_pdm_buffer_set(NRF_PDM0, (uint32_t *)buffer, buffer_length);

        if (m_cb.drv_state != NRFX_DRV_STATE_POWERED_ON)
    582c:	7c22      	ldrb	r2, [r4, #16]
    582e:	2a02      	cmp	r2, #2
    5830:	d009      	beq.n	5846 <nrfx_pdm_buffer_set+0x66>
    m_cb.drv_state = NRFX_DRV_STATE_POWERED_ON;
    5832:	2202      	movs	r2, #2
    5834:	7422      	strb	r2, [r4, #16]
    p_reg->ENABLE = (PDM_ENABLE_ENABLE_Enabled << PDM_ENABLE_ENABLE_Pos);
    5836:	2201      	movs	r2, #1
    5838:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    583c:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    5840:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5844:	601a      	str	r2, [r3, #0]
    nrfx_err_t err_code = NRFX_SUCCESS;
    5846:	4c09      	ldr	r4, [pc, #36]	; (586c <nrfx_pdm_buffer_set+0x8c>)
    5848:	e000      	b.n	584c <nrfx_pdm_buffer_set+0x6c>
        err_code = NRFX_ERROR_BUSY;
    584a:	4c09      	ldr	r4, [pc, #36]	; (5870 <nrfx_pdm_buffer_set+0x90>)
        {
            pdm_start();
        }
    }

    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_PDM0));
    584c:	2026      	movs	r0, #38	; 0x26
    584e:	f7fc ff29 	bl	26a4 <arch_irq_enable>
    return err_code;
}
    5852:	4620      	mov	r0, r4
    5854:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_INVALID_STATE;
    5856:	4c07      	ldr	r4, [pc, #28]	; (5874 <nrfx_pdm_buffer_set+0x94>)
    5858:	e7fb      	b.n	5852 <nrfx_pdm_buffer_set+0x72>
        return NRFX_ERROR_BUSY;
    585a:	4c05      	ldr	r4, [pc, #20]	; (5870 <nrfx_pdm_buffer_set+0x90>)
    585c:	e7f9      	b.n	5852 <nrfx_pdm_buffer_set+0x72>
        return NRFX_ERROR_INVALID_PARAM;
    585e:	4c06      	ldr	r4, [pc, #24]	; (5878 <nrfx_pdm_buffer_set+0x98>)
    5860:	e7f7      	b.n	5852 <nrfx_pdm_buffer_set+0x72>
    5862:	bf00      	nop
    5864:	20020364 	.word	0x20020364
    5868:	50026000 	.word	0x50026000
    586c:	0bad0000 	.word	0x0bad0000
    5870:	0bad000b 	.word	0x0bad000b
    5874:	0bad0005 	.word	0x0bad0005
    5878:	0bad0004 	.word	0x0bad0004

0000587c <nrfx_pdm_stop>:
nrfx_err_t nrfx_pdm_stop(void)
{
    NRFX_ASSERT(m_cb.drv_state != NRFX_DRV_STATE_UNINITIALIZED);
    nrfx_err_t err_code;

    if (m_cb.op_state != NRFX_PDM_STATE_RUNNING)
    587c:	4b0c      	ldr	r3, [pc, #48]	; (58b0 <nrfx_pdm_stop+0x34>)
    587e:	7c59      	ldrb	r1, [r3, #17]
    5880:	2901      	cmp	r1, #1
    5882:	b2ca      	uxtb	r2, r1
    5884:	d00b      	beq.n	589e <nrfx_pdm_stop+0x22>
    {
        if (m_cb.op_state == NRFX_PDM_STATE_IDLE ||
    5886:	7c5a      	ldrb	r2, [r3, #17]
    5888:	b112      	cbz	r2, 5890 <nrfx_pdm_stop+0x14>
            m_cb.op_state == NRFX_PDM_STATE_STARTING)
    588a:	7c5a      	ldrb	r2, [r3, #17]
        if (m_cb.op_state == NRFX_PDM_STATE_IDLE ||
    588c:	2a02      	cmp	r2, #2
    588e:	d10c      	bne.n	58aa <nrfx_pdm_stop+0x2e>
    p_reg->ENABLE = (PDM_ENABLE_ENABLE_Disabled << PDM_ENABLE_ENABLE_Pos);
    5890:	2200      	movs	r2, #0
    5892:	4908      	ldr	r1, [pc, #32]	; (58b4 <nrfx_pdm_stop+0x38>)
    5894:	f8c1 2500 	str.w	r2, [r1, #1280]	; 0x500
        {
            nrf_pdm_disable(NRF_PDM0);
            m_cb.op_state = NRFX_PDM_STATE_IDLE;
    5898:	745a      	strb	r2, [r3, #17]
    m_cb.op_state = NRFX_PDM_STATE_STOPPING;

    nrf_pdm_task_trigger(NRF_PDM0, NRF_PDM_TASK_STOP);
    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    589a:	4807      	ldr	r0, [pc, #28]	; (58b8 <nrfx_pdm_stop+0x3c>)
    589c:	4770      	bx	lr
    m_cb.op_state = NRFX_PDM_STATE_STOPPING;
    589e:	2103      	movs	r1, #3
    m_cb.drv_state = NRFX_DRV_STATE_INITIALIZED;
    58a0:	741a      	strb	r2, [r3, #16]
    m_cb.op_state = NRFX_PDM_STATE_STOPPING;
    58a2:	7459      	strb	r1, [r3, #17]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    58a4:	4b03      	ldr	r3, [pc, #12]	; (58b4 <nrfx_pdm_stop+0x38>)
    58a6:	605a      	str	r2, [r3, #4]
    58a8:	e7f7      	b.n	589a <nrfx_pdm_stop+0x1e>
        return err_code;
    58aa:	4804      	ldr	r0, [pc, #16]	; (58bc <nrfx_pdm_stop+0x40>)
}
    58ac:	4770      	bx	lr
    58ae:	bf00      	nop
    58b0:	20020364 	.word	0x20020364
    58b4:	50026000 	.word	0x50026000
    58b8:	0bad0000 	.word	0x0bad0000
    58bc:	0bad000b 	.word	0x0bad000b

000058c0 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    58c0:	4b0e      	ldr	r3, [pc, #56]	; (58fc <z_sys_init_run_level+0x3c>)
{
    58c2:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    58c4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    58c8:	3001      	adds	r0, #1
    58ca:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    58ce:	42a6      	cmp	r6, r4
    58d0:	d800      	bhi.n	58d4 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    58d2:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    58d4:	e9d4 3500 	ldrd	r3, r5, [r4]
    58d8:	4628      	mov	r0, r5
    58da:	4798      	blx	r3
		if (dev != NULL) {
    58dc:	b165      	cbz	r5, 58f8 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    58de:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    58e0:	b130      	cbz	r0, 58f0 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    58e2:	2800      	cmp	r0, #0
    58e4:	bfb8      	it	lt
    58e6:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    58e8:	28ff      	cmp	r0, #255	; 0xff
    58ea:	bfa8      	it	ge
    58ec:	20ff      	movge	r0, #255	; 0xff
    58ee:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    58f0:	785a      	ldrb	r2, [r3, #1]
    58f2:	f042 0201 	orr.w	r2, r2, #1
    58f6:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    58f8:	3408      	adds	r4, #8
    58fa:	e7e8      	b.n	58ce <z_sys_init_run_level+0xe>
    58fc:	00008b38 	.word	0x00008b38

00005900 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    5900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5904:	b086      	sub	sp, #24
    5906:	4605      	mov	r5, r0
    5908:	460e      	mov	r6, r1
    590a:	af00      	add	r7, sp, #0
	__asm__ volatile(
    590c:	f04f 0320 	mov.w	r3, #32
    5910:	f3ef 8811 	mrs	r8, BASEPRI
    5914:	f383 8812 	msr	BASEPRI_MAX, r3
    5918:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    591c:	f000 fef0 	bl	6700 <z_impl_z_current_get>
    5920:	2d04      	cmp	r5, #4
    5922:	bf98      	it	ls
    5924:	4b2c      	ldrls	r3, [pc, #176]	; (59d8 <z_fatal_error+0xd8>)
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    5926:	46e9      	mov	r9, sp
    5928:	b08a      	sub	sp, #40	; 0x28
    592a:	4604      	mov	r4, r0
    592c:	466a      	mov	r2, sp
    592e:	bf94      	ite	ls
    5930:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
    5934:	4b29      	ldrhi	r3, [pc, #164]	; (59dc <z_fatal_error+0xdc>)
    5936:	61d3      	str	r3, [r2, #28]
    5938:	2303      	movs	r3, #3
    593a:	f04f 0a00 	mov.w	sl, #0
    593e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    5942:	4927      	ldr	r1, [pc, #156]	; (59e0 <z_fatal_error+0xe0>)
    5944:	4b27      	ldr	r3, [pc, #156]	; (59e4 <z_fatal_error+0xe4>)
    5946:	e9c2 1505 	strd	r1, r5, [r2, #20]
    594a:	f8c2 a020 	str.w	sl, [r2, #32]
    594e:	f842 3f10 	str.w	r3, [r2, #16]!
    5952:	f44f 5129 	mov.w	r1, #10816	; 0x2a40
    5956:	4653      	mov	r3, sl
    5958:	4823      	ldr	r0, [pc, #140]	; (59e8 <z_fatal_error+0xe8>)
    595a:	f7fc f995 	bl	1c88 <z_impl_z_log_msg_static_create>
    595e:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    5960:	b17e      	cbz	r6, 5982 <z_fatal_error+0x82>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    5962:	69f3      	ldr	r3, [r6, #28]
    5964:	f3c3 0308 	ubfx	r3, r3, #0, #9
    5968:	b15b      	cbz	r3, 5982 <z_fatal_error+0x82>
		LOG_ERR("Fault during interrupt handling\n");
    596a:	4b20      	ldr	r3, [pc, #128]	; (59ec <z_fatal_error+0xec>)
    596c:	617b      	str	r3, [r7, #20]
    596e:	2302      	movs	r3, #2
    5970:	613b      	str	r3, [r7, #16]
    5972:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5976:	4653      	mov	r3, sl
    5978:	481b      	ldr	r0, [pc, #108]	; (59e8 <z_fatal_error+0xe8>)
    597a:	f107 0210 	add.w	r2, r7, #16
    597e:	f7fc f983 	bl	1c88 <z_impl_z_log_msg_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    5982:	b12c      	cbz	r4, 5990 <z_fatal_error+0x90>
    5984:	4620      	mov	r0, r4
    5986:	f002 fc65 	bl	8254 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    598a:	b108      	cbz	r0, 5990 <z_fatal_error+0x90>
    598c:	7803      	ldrb	r3, [r0, #0]
    598e:	b903      	cbnz	r3, 5992 <z_fatal_error+0x92>
		thread_name = "unknown";
    5990:	4817      	ldr	r0, [pc, #92]	; (59f0 <z_fatal_error+0xf0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    5992:	46e9      	mov	r9, sp
    5994:	b08a      	sub	sp, #40	; 0x28
    5996:	466a      	mov	r2, sp
    5998:	4b16      	ldr	r3, [pc, #88]	; (59f4 <z_fatal_error+0xf4>)
    599a:	61d0      	str	r0, [r2, #28]
    599c:	e9c2 3405 	strd	r3, r4, [r2, #20]
    59a0:	2303      	movs	r3, #3
    59a2:	f882 3020 	strb.w	r3, [r2, #32]
    59a6:	4b14      	ldr	r3, [pc, #80]	; (59f8 <z_fatal_error+0xf8>)
    59a8:	f842 3f10 	str.w	r3, [r2, #16]!
    59ac:	2300      	movs	r3, #0
    59ae:	f44f 5109 	mov.w	r1, #8768	; 0x2240
    59b2:	480d      	ldr	r0, [pc, #52]	; (59e8 <z_fatal_error+0xe8>)
    59b4:	f7fc f968 	bl	1c88 <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    59b8:	4631      	mov	r1, r6
    59ba:	46cd      	mov	sp, r9
    59bc:	4628      	mov	r0, r5
    59be:	f7ff f84f 	bl	4a60 <k_sys_fatal_error_handler>
	__asm__ volatile(
    59c2:	f388 8811 	msr	BASEPRI, r8
    59c6:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    59ca:	4620      	mov	r0, r4
    59cc:	f7fd faee 	bl	2fac <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    59d0:	3718      	adds	r7, #24
    59d2:	46bd      	mov	sp, r7
    59d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    59d8:	00008b50 	.word	0x00008b50
    59dc:	000096bb 	.word	0x000096bb
    59e0:	000096d1 	.word	0x000096d1
    59e4:	01000005 	.word	0x01000005
    59e8:	000088dc 	.word	0x000088dc
    59ec:	000096f9 	.word	0x000096f9
    59f0:	000096c9 	.word	0x000096c9
    59f4:	0000971a 	.word	0x0000971a
    59f8:	01000004 	.word	0x01000004

000059fc <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    59fc:	2201      	movs	r2, #1
{
    59fe:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    5a00:	4b09      	ldr	r3, [pc, #36]	; (5a28 <bg_thread_main+0x2c>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    5a02:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    5a04:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    5a06:	f7ff ff5b 	bl	58c0 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    5a0a:	f001 f8ef 	bl	6bec <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    5a0e:	2003      	movs	r0, #3
    5a10:	f7ff ff56 	bl	58c0 <z_sys_init_run_level>

	z_init_static_threads();
    5a14:	f000 f964 	bl	5ce0 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
    5a18:	f7fa fe16 	bl	648 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    5a1c:	4a03      	ldr	r2, [pc, #12]	; (5a2c <bg_thread_main+0x30>)
    5a1e:	7b13      	ldrb	r3, [r2, #12]
    5a20:	f023 0301 	bic.w	r3, r3, #1
    5a24:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    5a26:	bd08      	pop	{r3, pc}
    5a28:	20020593 	.word	0x20020593
    5a2c:	20000740 	.word	0x20000740

00005a30 <z_bss_zero>:
{
    5a30:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    5a32:	4803      	ldr	r0, [pc, #12]	; (5a40 <z_bss_zero+0x10>)
    5a34:	4a03      	ldr	r2, [pc, #12]	; (5a44 <z_bss_zero+0x14>)
    5a36:	2100      	movs	r1, #0
    5a38:	1a12      	subs	r2, r2, r0
    5a3a:	f002 fbba 	bl	81b2 <z_early_memset>
}
    5a3e:	bd08      	pop	{r3, pc}
    5a40:	200001d8 	.word	0x200001d8
    5a44:	20020594 	.word	0x20020594

00005a48 <z_init_cpu>:

#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
    5a48:	2300      	movs	r3, #0
    5a4a:	2201      	movs	r2, #1
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    5a4c:	b570      	push	{r4, r5, r6, lr}
    5a4e:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    5a50:	e9cd 2304 	strd	r2, r3, [sp, #16]
    5a54:	220f      	movs	r2, #15
    5a56:	9301      	str	r3, [sp, #4]
    5a58:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    5a5c:	2318      	movs	r3, #24
	z_setup_new_thread(thread, stack,
    5a5e:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    5a62:	4d0e      	ldr	r5, [pc, #56]	; (5a9c <z_init_cpu+0x54>)
	struct k_thread *thread = &z_idle_threads[i];
    5a64:	4e0e      	ldr	r6, [pc, #56]	; (5aa0 <z_init_cpu+0x58>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    5a66:	fb03 5500 	mla	r5, r3, r0, r5
	z_setup_new_thread(thread, stack,
    5a6a:	490e      	ldr	r1, [pc, #56]	; (5aa4 <z_init_cpu+0x5c>)
	struct k_thread *thread = &z_idle_threads[i];
    5a6c:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    5a70:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    5a72:	fb02 1100 	mla	r1, r2, r0, r1
    5a76:	4b0c      	ldr	r3, [pc, #48]	; (5aa8 <z_init_cpu+0x60>)
    5a78:	4630      	mov	r0, r6
    5a7a:	9500      	str	r5, [sp, #0]
    5a7c:	f000 f8d4 	bl	5c28 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    5a80:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    5a82:	480a      	ldr	r0, [pc, #40]	; (5aac <z_init_cpu+0x64>)
	_kernel.cpus[id].id = id;
    5a84:	752c      	strb	r4, [r5, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    5a86:	3401      	adds	r4, #1
    5a88:	f023 0304 	bic.w	r3, r3, #4
    5a8c:	eb00 24c4 	add.w	r4, r0, r4, lsl #11
    5a90:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    5a92:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
    5a94:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    5a96:	b006      	add	sp, #24
    5a98:	bd70      	pop	{r4, r5, r6, pc}
    5a9a:	bf00      	nop
    5a9c:	2002037c 	.word	0x2002037c
    5aa0:	200006c0 	.word	0x200006c0
    5aa4:	20020c98 	.word	0x20020c98
    5aa8:	00005d99 	.word	0x00005d99
    5aac:	20020dd8 	.word	0x20020dd8

00005ab0 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    5ab0:	b580      	push	{r7, lr}
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    5ab2:	4b2e      	ldr	r3, [pc, #184]	; (5b6c <z_cstart+0xbc>)
    5ab4:	b0a6      	sub	sp, #152	; 0x98
	uint32_t msp =
    5ab6:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    5aba:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    5abe:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5ac2:	2400      	movs	r4, #0
    5ac4:	23e0      	movs	r3, #224	; 0xe0
    5ac6:	4d2a      	ldr	r5, [pc, #168]	; (5b70 <z_cstart+0xc0>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    5ac8:	4e2a      	ldr	r6, [pc, #168]	; (5b74 <z_cstart+0xc4>)
    5aca:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    5ace:	77ec      	strb	r4, [r5, #31]
    5ad0:	762c      	strb	r4, [r5, #24]
    5ad2:	766c      	strb	r4, [r5, #25]
    5ad4:	76ac      	strb	r4, [r5, #26]
    5ad6:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    5ada:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    5adc:	4f26      	ldr	r7, [pc, #152]	; (5b78 <z_cstart+0xc8>)
    5ade:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    5ae2:	626b      	str	r3, [r5, #36]	; 0x24
    5ae4:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    5ae8:	f7fd f9c6 	bl	2e78 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    5aec:	f7fc fd56 	bl	259c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    5af0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5af4:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    5af6:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    5af8:	f7fd fc06 	bl	3308 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    5afc:	f7fd fa6c 	bl	2fd8 <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    5b00:	f7fb ff70 	bl	19e4 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
    5b04:	f240 1301 	movw	r3, #257	; 0x101
    5b08:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    5b0c:	ab06      	add	r3, sp, #24
    5b0e:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    5b10:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
    5b14:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    5b16:	f002 fb41 	bl	819c <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    5b1a:	4620      	mov	r0, r4
    5b1c:	f7ff fed0 	bl	58c0 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    5b20:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    5b22:	4d16      	ldr	r5, [pc, #88]	; (5b7c <z_cstart+0xcc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    5b24:	f7ff fecc 	bl	58c0 <z_sys_init_run_level>
	z_sched_init();
    5b28:	f000 fd3c 	bl	65a4 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    5b2c:	4b14      	ldr	r3, [pc, #80]	; (5b80 <z_cstart+0xd0>)
	_kernel.ready_q.cache = &z_main_thread;
    5b2e:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    5b30:	9305      	str	r3, [sp, #20]
    5b32:	2301      	movs	r3, #1
    5b34:	4913      	ldr	r1, [pc, #76]	; (5b84 <z_cstart+0xd4>)
    5b36:	f44f 6280 	mov.w	r2, #1024	; 0x400
    5b3a:	e9cd 4303 	strd	r4, r3, [sp, #12]
    5b3e:	4628      	mov	r0, r5
    5b40:	463b      	mov	r3, r7
    5b42:	e9cd 4401 	strd	r4, r4, [sp, #4]
    5b46:	9400      	str	r4, [sp, #0]
    5b48:	f000 f86e 	bl	5c28 <z_setup_new_thread>
    5b4c:	4606      	mov	r6, r0
    5b4e:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
    5b50:	4628      	mov	r0, r5
    5b52:	f022 0204 	bic.w	r2, r2, #4
    5b56:	736a      	strb	r2, [r5, #13]
    5b58:	f002 fbed 	bl	8336 <z_ready_thread>
	z_init_cpu(0);
    5b5c:	4620      	mov	r0, r4
    5b5e:	f7ff ff73 	bl	5a48 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    5b62:	463a      	mov	r2, r7
    5b64:	4631      	mov	r1, r6
    5b66:	4628      	mov	r0, r5
    5b68:	f7fc fe76 	bl	2858 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    5b6c:	20020dd8 	.word	0x20020dd8
    5b70:	e000ed00 	.word	0xe000ed00
    5b74:	2002037c 	.word	0x2002037c
    5b78:	000059fd 	.word	0x000059fd
    5b7c:	20000740 	.word	0x20000740
    5b80:	0000977c 	.word	0x0000977c
    5b84:	20020898 	.word	0x20020898

00005b88 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    5b88:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    5b8a:	4b0e      	ldr	r3, [pc, #56]	; (5bc4 <init_mem_slab_module+0x3c>)
    5b8c:	4c0e      	ldr	r4, [pc, #56]	; (5bc8 <init_mem_slab_module+0x40>)
    5b8e:	42a3      	cmp	r3, r4
    5b90:	d301      	bcc.n	5b96 <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
    5b92:	2000      	movs	r0, #0
	return rc;
}
    5b94:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    5b96:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
    5b9a:	ea41 0200 	orr.w	r2, r1, r0
    5b9e:	f012 0203 	ands.w	r2, r2, #3
    5ba2:	d10b      	bne.n	5bbc <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    5ba4:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    5ba6:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    5ba8:	42aa      	cmp	r2, r5
    5baa:	d101      	bne.n	5bb0 <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    5bac:	331c      	adds	r3, #28
    5bae:	e7ee      	b.n	5b8e <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    5bb0:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    5bb2:	3201      	adds	r2, #1
		*(char **)p = slab->free_list;
    5bb4:	600e      	str	r6, [r1, #0]
		slab->free_list = p;
    5bb6:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
    5bb8:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
    5bba:	e7f5      	b.n	5ba8 <init_mem_slab_module+0x20>
	return rc;
    5bbc:	f06f 0015 	mvn.w	r0, #21
    5bc0:	e7e8      	b.n	5b94 <init_mem_slab_module+0xc>
    5bc2:	bf00      	nop
    5bc4:	20000158 	.word	0x20000158
    5bc8:	20000174 	.word	0x20000174

00005bcc <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    5bcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    5bce:	460c      	mov	r4, r1
	__asm__ volatile(
    5bd0:	f04f 0520 	mov.w	r5, #32
    5bd4:	f3ef 8111 	mrs	r1, BASEPRI
    5bd8:	f385 8812 	msr	BASEPRI_MAX, r5
    5bdc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    5be0:	6945      	ldr	r5, [r0, #20]
    5be2:	b15d      	cbz	r5, 5bfc <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
    5be4:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    5be6:	682b      	ldr	r3, [r5, #0]
    5be8:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    5bea:	6983      	ldr	r3, [r0, #24]
    5bec:	3301      	adds	r3, #1
    5bee:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    5bf0:	2000      	movs	r0, #0
	__asm__ volatile(
    5bf2:	f381 8811 	msr	BASEPRI, r1
    5bf6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    5bfa:	e011      	b.n	5c20 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    5bfc:	ea52 0c03 	orrs.w	ip, r2, r3
    5c00:	d103      	bne.n	5c0a <k_mem_slab_alloc+0x3e>
		result = -ENOMEM;
    5c02:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
    5c06:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
    5c08:	e7f3      	b.n	5bf2 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    5c0a:	e9cd 2300 	strd	r2, r3, [sp]
    5c0e:	4602      	mov	r2, r0
    5c10:	3008      	adds	r0, #8
    5c12:	f000 fc1d 	bl	6450 <z_pend_curr>
		if (result == 0) {
    5c16:	b918      	cbnz	r0, 5c20 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    5c18:	4b02      	ldr	r3, [pc, #8]	; (5c24 <k_mem_slab_alloc+0x58>)
    5c1a:	689b      	ldr	r3, [r3, #8]
    5c1c:	695b      	ldr	r3, [r3, #20]
    5c1e:	6023      	str	r3, [r4, #0]
}
    5c20:	b003      	add	sp, #12
    5c22:	bd30      	pop	{r4, r5, pc}
    5c24:	2002037c 	.word	0x2002037c

00005c28 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    5c28:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    5c2c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    5c2e:	f100 0558 	add.w	r5, r0, #88	; 0x58
    5c32:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    5c34:	2604      	movs	r6, #4
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    5c36:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	thread_base->pended_on = NULL;
    5c3a:	2500      	movs	r5, #0
{
    5c3c:	4604      	mov	r4, r0
	thread_base->thread_state = (uint8_t)initial_state;
    5c3e:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    5c40:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    5c42:	e9c0 5506 	strd	r5, r5, [r0, #24]
    5c46:	7386      	strb	r6, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    5c48:	1dd6      	adds	r6, r2, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5c4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    5c4c:	f026 0607 	bic.w	r6, r6, #7
	new_thread->stack_info.size = stack_buf_size;
    5c50:	e9c0 1619 	strd	r1, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    5c54:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    5c56:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    5c58:	66c5      	str	r5, [r0, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5c5a:	9202      	str	r2, [sp, #8]
    5c5c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	stack_ptr = (char *)stack + stack_obj_size;
    5c5e:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5c62:	9201      	str	r2, [sp, #4]
    5c64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5c66:	9200      	str	r2, [sp, #0]
    5c68:	4642      	mov	r2, r8
    5c6a:	f7fc fdd9 	bl	2820 <arch_new_thread>
	if (!_current) {
    5c6e:	4b05      	ldr	r3, [pc, #20]	; (5c84 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
    5c70:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    5c72:	689b      	ldr	r3, [r3, #8]
    5c74:	b103      	cbz	r3, 5c78 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
    5c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
}
    5c78:	4640      	mov	r0, r8
    5c7a:	6723      	str	r3, [r4, #112]	; 0x70
    5c7c:	b004      	add	sp, #16
    5c7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5c82:	bf00      	nop
    5c84:	2002037c 	.word	0x2002037c

00005c88 <z_impl_k_thread_create>:
{
    5c88:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    5c8a:	2700      	movs	r7, #0
{
    5c8c:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    5c8e:	9705      	str	r7, [sp, #20]
    5c90:	9f10      	ldr	r7, [sp, #64]	; 0x40
{
    5c92:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    5c96:	9704      	str	r7, [sp, #16]
    5c98:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
{
    5c9a:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    5c9c:	9703      	str	r7, [sp, #12]
    5c9e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    5ca0:	9702      	str	r7, [sp, #8]
    5ca2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    5ca4:	9701      	str	r7, [sp, #4]
    5ca6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    5ca8:	9700      	str	r7, [sp, #0]
    5caa:	f7ff ffbd 	bl	5c28 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    5cae:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    5cb2:	bf08      	it	eq
    5cb4:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    5cb8:	d005      	beq.n	5cc6 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    5cba:	ea55 0306 	orrs.w	r3, r5, r6
    5cbe:	d105      	bne.n	5ccc <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
    5cc0:	4620      	mov	r0, r4
    5cc2:	f000 fb69 	bl	6398 <z_sched_start>
}
    5cc6:	4620      	mov	r0, r4
    5cc8:	b007      	add	sp, #28
    5cca:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    5ccc:	4632      	mov	r2, r6
    5cce:	462b      	mov	r3, r5
    5cd0:	4902      	ldr	r1, [pc, #8]	; (5cdc <z_impl_k_thread_create+0x54>)
    5cd2:	f104 0018 	add.w	r0, r4, #24
    5cd6:	f000 fddd 	bl	6894 <z_add_timeout>
    5cda:	e7f4      	b.n	5cc6 <z_impl_k_thread_create+0x3e>
    5cdc:	00008357 	.word	0x00008357

00005ce0 <z_init_static_threads>:
{
    5ce0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5ce4:	4c29      	ldr	r4, [pc, #164]	; (5d8c <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    5ce6:	4d2a      	ldr	r5, [pc, #168]	; (5d90 <z_init_static_threads+0xb0>)
{
    5ce8:	b087      	sub	sp, #28
    5cea:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    5cec:	42ae      	cmp	r6, r5
    5cee:	f104 0430 	add.w	r4, r4, #48	; 0x30
    5cf2:	d30f      	bcc.n	5d14 <z_init_static_threads+0x34>
	k_sched_lock();
    5cf4:	f000 fa6a 	bl	61cc <k_sched_lock>
    5cf8:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    5cfc:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
    5d00:	4c22      	ldr	r4, [pc, #136]	; (5d8c <z_init_static_threads+0xac>)
    5d02:	f8df 9090 	ldr.w	r9, [pc, #144]	; 5d94 <z_init_static_threads+0xb4>
    5d06:	42ac      	cmp	r4, r5
    5d08:	d320      	bcc.n	5d4c <z_init_static_threads+0x6c>
}
    5d0a:	b007      	add	sp, #28
    5d0c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    5d10:	f000 bc2c 	b.w	656c <k_sched_unlock>
		z_setup_new_thread(
    5d14:	f854 3c04 	ldr.w	r3, [r4, #-4]
    5d18:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    5d1c:	9305      	str	r3, [sp, #20]
    5d1e:	f854 3c10 	ldr.w	r3, [r4, #-16]
    5d22:	9304      	str	r3, [sp, #16]
    5d24:	f854 3c14 	ldr.w	r3, [r4, #-20]
    5d28:	9303      	str	r3, [sp, #12]
    5d2a:	f854 3c18 	ldr.w	r3, [r4, #-24]
    5d2e:	9302      	str	r3, [sp, #8]
    5d30:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    5d34:	9301      	str	r3, [sp, #4]
    5d36:	f854 3c20 	ldr.w	r3, [r4, #-32]
    5d3a:	9300      	str	r3, [sp, #0]
    5d3c:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    5d40:	f7ff ff72 	bl	5c28 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    5d44:	f854 3c30 	ldr.w	r3, [r4, #-48]
    5d48:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    5d4a:	e7ce      	b.n	5cea <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    5d4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5d4e:	1c5a      	adds	r2, r3, #1
    5d50:	d00d      	beq.n	5d6e <z_init_static_threads+0x8e>
    5d52:	2100      	movs	r1, #0
    5d54:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
    5d56:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    5d5a:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    5d5e:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    5d62:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    5d66:	d104      	bne.n	5d72 <z_init_static_threads+0x92>
	z_sched_start(thread);
    5d68:	4640      	mov	r0, r8
    5d6a:	f000 fb15 	bl	6398 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    5d6e:	3430      	adds	r4, #48	; 0x30
    5d70:	e7c9      	b.n	5d06 <z_init_static_threads+0x26>
    5d72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5d76:	2300      	movs	r3, #0
    5d78:	f7fa fafa 	bl	370 <__aeabi_uldivmod>
    5d7c:	4602      	mov	r2, r0
    5d7e:	460b      	mov	r3, r1
    5d80:	f108 0018 	add.w	r0, r8, #24
    5d84:	4649      	mov	r1, r9
    5d86:	f000 fd85 	bl	6894 <z_add_timeout>
    5d8a:	e7f0      	b.n	5d6e <z_init_static_threads+0x8e>
    5d8c:	20000158 	.word	0x20000158
    5d90:	20000158 	.word	0x20000158
    5d94:	00008357 	.word	0x00008357

00005d98 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    5d98:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    5d9a:	4c0b      	ldr	r4, [pc, #44]	; (5dc8 <idle+0x30>)
	return !z_sys_post_kernel;
    5d9c:	4d0b      	ldr	r5, [pc, #44]	; (5dcc <idle+0x34>)
	__asm__ volatile(
    5d9e:	f04f 0220 	mov.w	r2, #32
    5da2:	f3ef 8311 	mrs	r3, BASEPRI
    5da6:	f382 8812 	msr	BASEPRI_MAX, r2
    5daa:	f3bf 8f6f 	isb	sy
    5dae:	f002 fb61 	bl	8474 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    5db2:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    5db4:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    5db6:	b913      	cbnz	r3, 5dbe <idle+0x26>
	arch_cpu_idle();
    5db8:	f7fc fbf6 	bl	25a8 <arch_cpu_idle>
}
    5dbc:	e7ef      	b.n	5d9e <idle+0x6>
    5dbe:	f7fc fa4d 	bl	225c <pm_system_suspend>
    5dc2:	2800      	cmp	r0, #0
    5dc4:	d1eb      	bne.n	5d9e <idle+0x6>
    5dc6:	e7f7      	b.n	5db8 <idle+0x20>
    5dc8:	2002037c 	.word	0x2002037c
    5dcc:	20020593 	.word	0x20020593

00005dd0 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
    5dd0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    5dd4:	4604      	mov	r4, r0
    5dd6:	460e      	mov	r6, r1

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
    5dd8:	f100 0808 	add.w	r8, r0, #8
    5ddc:	f04f 0120 	mov.w	r1, #32
    5de0:	f3ef 8711 	mrs	r7, BASEPRI
    5de4:	f381 8812 	msr	BASEPRI_MAX, r1
    5de8:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, put, msgq, timeout);

	if (msgq->used_msgs < msgq->max_msgs) {
    5dec:	6a05      	ldr	r5, [r0, #32]
    5dee:	68c1      	ldr	r1, [r0, #12]
    5df0:	428d      	cmp	r5, r1
    5df2:	d22a      	bcs.n	5e4a <z_impl_k_msgq_put+0x7a>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
    5df4:	f002 fb10 	bl	8418 <z_unpend_first_thread>
		if (pending_thread != NULL) {
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, 0);

			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
    5df8:	4631      	mov	r1, r6
		if (pending_thread != NULL) {
    5dfa:	4605      	mov	r5, r0
			(void)memcpy(pending_thread->base.swap_data, data,
    5dfc:	68a2      	ldr	r2, [r4, #8]
		if (pending_thread != NULL) {
    5dfe:	b178      	cbz	r0, 5e20 <z_impl_k_msgq_put+0x50>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    5e00:	2400      	movs	r4, #0
			(void)memcpy(pending_thread->base.swap_data, data,
    5e02:	6940      	ldr	r0, [r0, #20]
    5e04:	f001 fdfa 	bl	79fc <memcpy>
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
    5e08:	4628      	mov	r0, r5
    5e0a:	67ac      	str	r4, [r5, #120]	; 0x78
    5e0c:	f002 fa93 	bl	8336 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
    5e10:	4640      	mov	r0, r8
    5e12:	4639      	mov	r1, r7
    5e14:	f000 f9c8 	bl	61a8 <z_reschedule>
			return 0;
    5e18:	4620      	mov	r0, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
    5e1a:	b002      	add	sp, #8
    5e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			(void)memcpy(msgq->write_ptr, data, msgq->msg_size);
    5e20:	69e0      	ldr	r0, [r4, #28]
    5e22:	f001 fdeb 	bl	79fc <memcpy>
		result = 0;
    5e26:	2000      	movs	r0, #0
			msgq->write_ptr += msgq->msg_size;
    5e28:	69e3      	ldr	r3, [r4, #28]
    5e2a:	68a2      	ldr	r2, [r4, #8]
    5e2c:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
    5e2e:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
    5e30:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
    5e32:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
    5e34:	bf04      	itt	eq
    5e36:	6923      	ldreq	r3, [r4, #16]
    5e38:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
    5e3a:	6a23      	ldr	r3, [r4, #32]
    5e3c:	3301      	adds	r3, #1
    5e3e:	6223      	str	r3, [r4, #32]
	__asm__ volatile(
    5e40:	f387 8811 	msr	BASEPRI, r7
    5e44:	f3bf 8f6f 	isb	sy
	return result;
    5e48:	e7e7      	b.n	5e1a <z_impl_k_msgq_put+0x4a>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    5e4a:	ea52 0103 	orrs.w	r1, r2, r3
    5e4e:	d00a      	beq.n	5e66 <z_impl_k_msgq_put+0x96>
		_current->base.swap_data = (void *) data;
    5e50:	4906      	ldr	r1, [pc, #24]	; (5e6c <z_impl_k_msgq_put+0x9c>)
    5e52:	6889      	ldr	r1, [r1, #8]
    5e54:	614e      	str	r6, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
    5e56:	e9cd 2300 	strd	r2, r3, [sp]
    5e5a:	4639      	mov	r1, r7
    5e5c:	4602      	mov	r2, r0
    5e5e:	4640      	mov	r0, r8
    5e60:	f000 faf6 	bl	6450 <z_pend_curr>
		return result;
    5e64:	e7d9      	b.n	5e1a <z_impl_k_msgq_put+0x4a>
		result = -ENOMSG;
    5e66:	f06f 0022 	mvn.w	r0, #34	; 0x22
    5e6a:	e7e9      	b.n	5e40 <z_impl_k_msgq_put+0x70>
    5e6c:	2002037c 	.word	0x2002037c

00005e70 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
    5e70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5e72:	4604      	mov	r4, r0
    5e74:	4608      	mov	r0, r1

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
    5e76:	f104 0708 	add.w	r7, r4, #8
	__asm__ volatile(
    5e7a:	f04f 0120 	mov.w	r1, #32
    5e7e:	f3ef 8611 	mrs	r6, BASEPRI
    5e82:	f381 8812 	msr	BASEPRI_MAX, r1
    5e86:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, get, msgq, timeout);

	if (msgq->used_msgs > 0U) {
    5e8a:	6a21      	ldr	r1, [r4, #32]
    5e8c:	2900      	cmp	r1, #0
    5e8e:	d031      	beq.n	5ef4 <z_impl_k_msgq_get+0x84>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
    5e90:	68a2      	ldr	r2, [r4, #8]
    5e92:	69a1      	ldr	r1, [r4, #24]
    5e94:	f001 fdb2 	bl	79fc <memcpy>
		msgq->read_ptr += msgq->msg_size;
    5e98:	69a3      	ldr	r3, [r4, #24]
    5e9a:	68a2      	ldr	r2, [r4, #8]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
    5e9c:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
    5e9e:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
    5ea0:	6962      	ldr	r2, [r4, #20]
		msgq->read_ptr += msgq->msg_size;
    5ea2:	61a3      	str	r3, [r4, #24]
		if (msgq->read_ptr == msgq->buffer_end) {
    5ea4:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
    5ea6:	bf04      	itt	eq
    5ea8:	6923      	ldreq	r3, [r4, #16]
    5eaa:	61a3      	streq	r3, [r4, #24]
		msgq->used_msgs--;
    5eac:	6a23      	ldr	r3, [r4, #32]
    5eae:	3b01      	subs	r3, #1
    5eb0:	6223      	str	r3, [r4, #32]
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
    5eb2:	f002 fab1 	bl	8418 <z_unpend_first_thread>
		if (pending_thread != NULL) {
    5eb6:	4605      	mov	r5, r0
    5eb8:	b360      	cbz	r0, 5f14 <z_impl_k_msgq_get+0xa4>
			SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_msgq, get, msgq, timeout);

			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
    5eba:	6941      	ldr	r1, [r0, #20]
    5ebc:	68a2      	ldr	r2, [r4, #8]
    5ebe:	69e0      	ldr	r0, [r4, #28]
    5ec0:	f001 fd9c 	bl	79fc <memcpy>
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
    5ec4:	69e3      	ldr	r3, [r4, #28]
    5ec6:	68a2      	ldr	r2, [r4, #8]
			}
			msgq->used_msgs++;

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
    5ec8:	4628      	mov	r0, r5
			msgq->write_ptr += msgq->msg_size;
    5eca:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
    5ecc:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
    5ece:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
    5ed0:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
    5ed2:	bf04      	itt	eq
    5ed4:	6923      	ldreq	r3, [r4, #16]
    5ed6:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
    5ed8:	6a23      	ldr	r3, [r4, #32]
    5eda:	3301      	adds	r3, #1
    5edc:	6223      	str	r3, [r4, #32]
    5ede:	2400      	movs	r4, #0
    5ee0:	67ac      	str	r4, [r5, #120]	; 0x78
			z_ready_thread(pending_thread);
    5ee2:	f002 fa28 	bl	8336 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
    5ee6:	4638      	mov	r0, r7
    5ee8:	4631      	mov	r1, r6
    5eea:	f000 f95d 	bl	61a8 <z_reschedule>

			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, 0);

			return 0;
    5eee:	4620      	mov	r0, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
    5ef0:	b003      	add	sp, #12
    5ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    5ef4:	ea52 0103 	orrs.w	r1, r2, r3
    5ef8:	d00a      	beq.n	5f10 <z_impl_k_msgq_get+0xa0>
		_current->base.swap_data = data;
    5efa:	4909      	ldr	r1, [pc, #36]	; (5f20 <z_impl_k_msgq_get+0xb0>)
    5efc:	6889      	ldr	r1, [r1, #8]
    5efe:	6148      	str	r0, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
    5f00:	e9cd 2300 	strd	r2, r3, [sp]
    5f04:	4631      	mov	r1, r6
    5f06:	4622      	mov	r2, r4
    5f08:	4638      	mov	r0, r7
    5f0a:	f000 faa1 	bl	6450 <z_pend_curr>
		return result;
    5f0e:	e7ef      	b.n	5ef0 <z_impl_k_msgq_get+0x80>
		result = -ENOMSG;
    5f10:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
    5f14:	f386 8811 	msr	BASEPRI, r6
    5f18:	f3bf 8f6f 	isb	sy
	return result;
    5f1c:	e7e8      	b.n	5ef0 <z_impl_k_msgq_get+0x80>
    5f1e:	bf00      	nop
    5f20:	2002037c 	.word	0x2002037c

00005f24 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    5f24:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    5f28:	4604      	mov	r4, r0
    5f2a:	4617      	mov	r7, r2
    5f2c:	461e      	mov	r6, r3
	__asm__ volatile(
    5f2e:	f04f 0320 	mov.w	r3, #32
    5f32:	f3ef 8811 	mrs	r8, BASEPRI
    5f36:	f383 8812 	msr	BASEPRI_MAX, r3
    5f3a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    5f3e:	68c3      	ldr	r3, [r0, #12]
    5f40:	4a32      	ldr	r2, [pc, #200]	; (600c <z_impl_k_mutex_lock+0xe8>)
    5f42:	b16b      	cbz	r3, 5f60 <z_impl_k_mutex_lock+0x3c>
    5f44:	6880      	ldr	r0, [r0, #8]
    5f46:	6891      	ldr	r1, [r2, #8]
    5f48:	4288      	cmp	r0, r1
    5f4a:	d019      	beq.n	5f80 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    5f4c:	ea57 0306 	orrs.w	r3, r7, r6
    5f50:	d118      	bne.n	5f84 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    5f52:	f388 8811 	msr	BASEPRI, r8
    5f56:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    5f5a:	f06f 000f 	mvn.w	r0, #15
    5f5e:	e00c      	b.n	5f7a <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    5f60:	6891      	ldr	r1, [r2, #8]
    5f62:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
    5f66:	3301      	adds	r3, #1
    5f68:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    5f6a:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    5f6c:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
    5f6e:	60a3      	str	r3, [r4, #8]
    5f70:	f388 8811 	msr	BASEPRI, r8
    5f74:	f3bf 8f6f 	isb	sy
		return 0;
    5f78:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    5f7a:	b002      	add	sp, #8
    5f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    5f80:	6921      	ldr	r1, [r4, #16]
    5f82:	e7f0      	b.n	5f66 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    5f84:	f991 100e 	ldrsb.w	r1, [r1, #14]
    5f88:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    5f8c:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    5f90:	4299      	cmp	r1, r3
    5f92:	bfa8      	it	ge
    5f94:	4619      	movge	r1, r3
    5f96:	4291      	cmp	r1, r2
    5f98:	bfb8      	it	lt
    5f9a:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    5f9c:	428b      	cmp	r3, r1
    5f9e:	dd2e      	ble.n	5ffe <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    5fa0:	f002 f970 	bl	8284 <adjust_owner_prio.isra.0>
    5fa4:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    5fa6:	4622      	mov	r2, r4
    5fa8:	4641      	mov	r1, r8
    5faa:	e9cd 7600 	strd	r7, r6, [sp]
    5fae:	4818      	ldr	r0, [pc, #96]	; (6010 <z_impl_k_mutex_lock+0xec>)
    5fb0:	f000 fa4e 	bl	6450 <z_pend_curr>
	if (got_mutex == 0) {
    5fb4:	2800      	cmp	r0, #0
    5fb6:	d0e0      	beq.n	5f7a <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    5fb8:	f04f 0320 	mov.w	r3, #32
    5fbc:	f3ef 8611 	mrs	r6, BASEPRI
    5fc0:	f383 8812 	msr	BASEPRI_MAX, r3
    5fc4:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    5fc8:	6823      	ldr	r3, [r4, #0]
    5fca:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5fcc:	429c      	cmp	r4, r3
    5fce:	d00a      	beq.n	5fe6 <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    5fd0:	b14b      	cbz	r3, 5fe6 <z_impl_k_mutex_lock+0xc2>
    5fd2:	f993 300e 	ldrsb.w	r3, [r3, #14]
    5fd6:	4299      	cmp	r1, r3
    5fd8:	bfa8      	it	ge
    5fda:	4619      	movge	r1, r3
    5fdc:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    5fe0:	4299      	cmp	r1, r3
    5fe2:	bfb8      	it	lt
    5fe4:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    5fe6:	68a0      	ldr	r0, [r4, #8]
    5fe8:	f002 f94c 	bl	8284 <adjust_owner_prio.isra.0>
    5fec:	b900      	cbnz	r0, 5ff0 <z_impl_k_mutex_lock+0xcc>
	if (resched) {
    5fee:	b145      	cbz	r5, 6002 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    5ff0:	4631      	mov	r1, r6
    5ff2:	4807      	ldr	r0, [pc, #28]	; (6010 <z_impl_k_mutex_lock+0xec>)
    5ff4:	f000 f8d8 	bl	61a8 <z_reschedule>
	return -EAGAIN;
    5ff8:	f06f 000a 	mvn.w	r0, #10
    5ffc:	e7bd      	b.n	5f7a <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    5ffe:	2500      	movs	r5, #0
    6000:	e7d1      	b.n	5fa6 <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
    6002:	f386 8811 	msr	BASEPRI, r6
    6006:	f3bf 8f6f 	isb	sy
    600a:	e7f5      	b.n	5ff8 <z_impl_k_mutex_lock+0xd4>
    600c:	2002037c 	.word	0x2002037c
    6010:	20020594 	.word	0x20020594

00006014 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    6014:	6883      	ldr	r3, [r0, #8]
{
    6016:	b570      	push	{r4, r5, r6, lr}
    6018:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    601a:	b36b      	cbz	r3, 6078 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    601c:	4a19      	ldr	r2, [pc, #100]	; (6084 <z_impl_k_mutex_unlock+0x70>)
    601e:	6892      	ldr	r2, [r2, #8]
    6020:	4293      	cmp	r3, r2
    6022:	d12c      	bne.n	607e <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    6024:	68c3      	ldr	r3, [r0, #12]
    6026:	2b01      	cmp	r3, #1
    6028:	d903      	bls.n	6032 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    602a:	3b01      	subs	r3, #1
    602c:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    602e:	2000      	movs	r0, #0
}
    6030:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
    6032:	f04f 0320 	mov.w	r3, #32
    6036:	f3ef 8511 	mrs	r5, BASEPRI
    603a:	f383 8812 	msr	BASEPRI_MAX, r3
    603e:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    6042:	6901      	ldr	r1, [r0, #16]
    6044:	6880      	ldr	r0, [r0, #8]
    6046:	f002 f91d 	bl	8284 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    604a:	4620      	mov	r0, r4
    604c:	f002 f9e4 	bl	8418 <z_unpend_first_thread>
	mutex->owner = new_owner;
    6050:	2600      	movs	r6, #0
    6052:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    6054:	b150      	cbz	r0, 606c <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
    6056:	f990 200e 	ldrsb.w	r2, [r0, #14]
    605a:	6122      	str	r2, [r4, #16]
    605c:	6786      	str	r6, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    605e:	f002 f96a 	bl	8336 <z_ready_thread>
		z_reschedule(&lock, key);
    6062:	4629      	mov	r1, r5
    6064:	4808      	ldr	r0, [pc, #32]	; (6088 <z_impl_k_mutex_unlock+0x74>)
    6066:	f000 f89f 	bl	61a8 <z_reschedule>
    606a:	e7e0      	b.n	602e <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
    606c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    606e:	f385 8811 	msr	BASEPRI, r5
    6072:	f3bf 8f6f 	isb	sy
    6076:	e7da      	b.n	602e <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
    6078:	f06f 0015 	mvn.w	r0, #21
    607c:	e7d8      	b.n	6030 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
    607e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6082:	e7d5      	b.n	6030 <z_impl_k_mutex_unlock+0x1c>
    6084:	2002037c 	.word	0x2002037c
    6088:	20020594 	.word	0x20020594

0000608c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    608c:	b538      	push	{r3, r4, r5, lr}
    608e:	4604      	mov	r4, r0
	__asm__ volatile(
    6090:	f04f 0320 	mov.w	r3, #32
    6094:	f3ef 8511 	mrs	r5, BASEPRI
    6098:	f383 8812 	msr	BASEPRI_MAX, r3
    609c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    60a0:	f002 f9ba 	bl	8418 <z_unpend_first_thread>

	if (thread != NULL) {
    60a4:	b148      	cbz	r0, 60ba <z_impl_k_sem_give+0x2e>
    60a6:	2200      	movs	r2, #0
    60a8:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    60aa:	f002 f944 	bl	8336 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    60ae:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    60b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    60b4:	4804      	ldr	r0, [pc, #16]	; (60c8 <z_impl_k_sem_give+0x3c>)
    60b6:	f000 b877 	b.w	61a8 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    60ba:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    60be:	429a      	cmp	r2, r3
    60c0:	bf18      	it	ne
    60c2:	3301      	addne	r3, #1
    60c4:	60a3      	str	r3, [r4, #8]
}
    60c6:	e7f2      	b.n	60ae <z_impl_k_sem_give+0x22>
    60c8:	20020594 	.word	0x20020594

000060cc <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    60cc:	b513      	push	{r0, r1, r4, lr}
    60ce:	f04f 0420 	mov.w	r4, #32
    60d2:	f3ef 8111 	mrs	r1, BASEPRI
    60d6:	f384 8812 	msr	BASEPRI_MAX, r4
    60da:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    60de:	6884      	ldr	r4, [r0, #8]
    60e0:	b144      	cbz	r4, 60f4 <z_impl_k_sem_take+0x28>
		sem->count--;
    60e2:	3c01      	subs	r4, #1
    60e4:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    60e6:	f381 8811 	msr	BASEPRI, r1
    60ea:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    60ee:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    60f0:	b002      	add	sp, #8
    60f2:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    60f4:	ea52 0403 	orrs.w	r4, r2, r3
    60f8:	d106      	bne.n	6108 <z_impl_k_sem_take+0x3c>
    60fa:	f381 8811 	msr	BASEPRI, r1
    60fe:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    6102:	f06f 000f 	mvn.w	r0, #15
    6106:	e7f3      	b.n	60f0 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    6108:	e9cd 2300 	strd	r2, r3, [sp]
    610c:	4602      	mov	r2, r0
    610e:	4802      	ldr	r0, [pc, #8]	; (6118 <z_impl_k_sem_take+0x4c>)
    6110:	f000 f99e 	bl	6450 <z_pend_curr>
	return ret;
    6114:	e7ec      	b.n	60f0 <z_impl_k_sem_take+0x24>
    6116:	bf00      	nop
    6118:	20020594 	.word	0x20020594

0000611c <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
    611c:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
    611e:	4d07      	ldr	r5, [pc, #28]	; (613c <z_reset_time_slice+0x20>)
    6120:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
    6122:	b154      	cbz	r4, 613a <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    6124:	f7fe fb22 	bl	476c <sys_clock_elapsed>
    6128:	4b05      	ldr	r3, [pc, #20]	; (6140 <z_reset_time_slice+0x24>)
    612a:	4404      	add	r4, r0
    612c:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    612e:	6828      	ldr	r0, [r5, #0]
    6130:	2100      	movs	r1, #0
	}
}
    6132:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
    6136:	f002 b9ad 	b.w	8494 <z_set_timeout_expiry>
}
    613a:	bd38      	pop	{r3, r4, r5, pc}
    613c:	200203ac 	.word	0x200203ac
    6140:	2002037c 	.word	0x2002037c

00006144 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    6144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6146:	4604      	mov	r4, r0
    6148:	460d      	mov	r5, r1
	__asm__ volatile(
    614a:	f04f 0320 	mov.w	r3, #32
    614e:	f3ef 8711 	mrs	r7, BASEPRI
    6152:	f383 8812 	msr	BASEPRI_MAX, r3
    6156:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    615a:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    615c:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    6160:	f240 30e7 	movw	r0, #999	; 0x3e7
    6164:	4e0d      	ldr	r6, [pc, #52]	; (619c <k_sched_time_slice_set+0x58>)
    6166:	2300      	movs	r3, #0
    6168:	6131      	str	r1, [r6, #16]
    616a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    616e:	fbe4 010c 	umlal	r0, r1, r4, ip
    6172:	f7fa f8fd 	bl	370 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    6176:	2c00      	cmp	r4, #0
    6178:	4b09      	ldr	r3, [pc, #36]	; (61a0 <k_sched_time_slice_set+0x5c>)
    617a:	dc0a      	bgt.n	6192 <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
    617c:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    617e:	4b09      	ldr	r3, [pc, #36]	; (61a4 <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
    6180:	68b0      	ldr	r0, [r6, #8]
		slice_max_prio = prio;
    6182:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
    6184:	f7ff ffca 	bl	611c <z_reset_time_slice>
	__asm__ volatile(
    6188:	f387 8811 	msr	BASEPRI, r7
    618c:	f3bf 8f6f 	isb	sy
	}
}
    6190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_ticks = MAX(2, slice_ticks);
    6192:	2802      	cmp	r0, #2
    6194:	bfb8      	it	lt
    6196:	2002      	movlt	r0, #2
    6198:	e7f0      	b.n	617c <k_sched_time_slice_set+0x38>
    619a:	bf00      	nop
    619c:	2002037c 	.word	0x2002037c
    61a0:	200203ac 	.word	0x200203ac
    61a4:	200203a8 	.word	0x200203a8

000061a8 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    61a8:	b949      	cbnz	r1, 61be <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    61aa:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    61ae:	b930      	cbnz	r0, 61be <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    61b0:	4b05      	ldr	r3, [pc, #20]	; (61c8 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    61b2:	69da      	ldr	r2, [r3, #28]
    61b4:	689b      	ldr	r3, [r3, #8]
    61b6:	429a      	cmp	r2, r3
    61b8:	d001      	beq.n	61be <z_reschedule+0x16>
	ret = arch_swap(key);
    61ba:	f7fc badb 	b.w	2774 <arch_swap>
    61be:	f381 8811 	msr	BASEPRI, r1
    61c2:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
    61c6:	4770      	bx	lr
    61c8:	2002037c 	.word	0x2002037c

000061cc <k_sched_lock>:
	__asm__ volatile(
    61cc:	f04f 0320 	mov.w	r3, #32
    61d0:	f3ef 8111 	mrs	r1, BASEPRI
    61d4:	f383 8812 	msr	BASEPRI_MAX, r3
    61d8:	f3bf 8f6f 	isb	sy
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    61dc:	4b04      	ldr	r3, [pc, #16]	; (61f0 <k_sched_lock+0x24>)
    61de:	689a      	ldr	r2, [r3, #8]
    61e0:	7bd3      	ldrb	r3, [r2, #15]
    61e2:	3b01      	subs	r3, #1
    61e4:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    61e6:	f381 8811 	msr	BASEPRI, r1
    61ea:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    61ee:	4770      	bx	lr
    61f0:	2002037c 	.word	0x2002037c

000061f4 <update_cache>:
{
    61f4:	b538      	push	{r3, r4, r5, lr}
    61f6:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    61f8:	480c      	ldr	r0, [pc, #48]	; (622c <update_cache+0x38>)
    61fa:	f002 f896 	bl	832a <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    61fe:	4d0c      	ldr	r5, [pc, #48]	; (6230 <update_cache+0x3c>)
    6200:	4604      	mov	r4, r0
    6202:	b900      	cbnz	r0, 6206 <update_cache+0x12>
    6204:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    6206:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    6208:	b94a      	cbnz	r2, 621e <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
    620a:	7b5a      	ldrb	r2, [r3, #13]
    620c:	06d2      	lsls	r2, r2, #27
    620e:	d106      	bne.n	621e <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    6210:	69a2      	ldr	r2, [r4, #24]
    6212:	b922      	cbnz	r2, 621e <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
    6214:	89da      	ldrh	r2, [r3, #14]
    6216:	2a7f      	cmp	r2, #127	; 0x7f
    6218:	d901      	bls.n	621e <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
    621a:	61eb      	str	r3, [r5, #28]
}
    621c:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    621e:	429c      	cmp	r4, r3
    6220:	d002      	beq.n	6228 <update_cache+0x34>
			z_reset_time_slice(thread);
    6222:	4620      	mov	r0, r4
    6224:	f7ff ff7a 	bl	611c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    6228:	61ec      	str	r4, [r5, #28]
}
    622a:	e7f7      	b.n	621c <update_cache+0x28>
    622c:	2002039c 	.word	0x2002039c
    6230:	2002037c 	.word	0x2002037c

00006234 <move_thread_to_end_of_prio_q>:
{
    6234:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    6236:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    623a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    623c:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
    623e:	7b43      	ldrb	r3, [r0, #13]
    6240:	da04      	bge.n	624c <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6242:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6246:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    6248:	f002 f837 	bl	82ba <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    624c:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    624e:	4a15      	ldr	r2, [pc, #84]	; (62a4 <move_thread_to_end_of_prio_q+0x70>)
    6250:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6254:	734b      	strb	r3, [r1, #13]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6256:	f102 0520 	add.w	r5, r2, #32
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    625a:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    625e:	42ab      	cmp	r3, r5
    6260:	d01b      	beq.n	629a <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6262:	b1d3      	cbz	r3, 629a <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
    6264:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    6268:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    626c:	4286      	cmp	r6, r0
    626e:	d00f      	beq.n	6290 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
    6270:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    6272:	2800      	cmp	r0, #0
    6274:	dd0c      	ble.n	6290 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    6276:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    6278:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    627c:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    627e:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    6280:	6890      	ldr	r0, [r2, #8]
}
    6282:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    6286:	1a43      	subs	r3, r0, r1
    6288:	4258      	negs	r0, r3
    628a:	4158      	adcs	r0, r3
    628c:	f7ff bfb2 	b.w	61f4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    6290:	42a3      	cmp	r3, r4
    6292:	d002      	beq.n	629a <move_thread_to_end_of_prio_q+0x66>
    6294:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6296:	2b00      	cmp	r3, #0
    6298:	d1e6      	bne.n	6268 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
    629a:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
    629e:	6021      	str	r1, [r4, #0]
	list->tail = node;
    62a0:	6251      	str	r1, [r2, #36]	; 0x24
}
    62a2:	e7ed      	b.n	6280 <move_thread_to_end_of_prio_q+0x4c>
    62a4:	2002037c 	.word	0x2002037c

000062a8 <z_time_slice>:
{
    62a8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    62aa:	f04f 0320 	mov.w	r3, #32
    62ae:	f3ef 8511 	mrs	r5, BASEPRI
    62b2:	f383 8812 	msr	BASEPRI_MAX, r3
    62b6:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    62ba:	4b17      	ldr	r3, [pc, #92]	; (6318 <z_time_slice+0x70>)
    62bc:	4a17      	ldr	r2, [pc, #92]	; (631c <z_time_slice+0x74>)
    62be:	689c      	ldr	r4, [r3, #8]
    62c0:	6811      	ldr	r1, [r2, #0]
    62c2:	428c      	cmp	r4, r1
    62c4:	d107      	bne.n	62d6 <z_time_slice+0x2e>
	z_reset_time_slice(curr);
    62c6:	4620      	mov	r0, r4
    62c8:	f7ff ff28 	bl	611c <z_reset_time_slice>
	__asm__ volatile(
    62cc:	f385 8811 	msr	BASEPRI, r5
    62d0:	f3bf 8f6f 	isb	sy
}
    62d4:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    62d6:	2100      	movs	r1, #0
    62d8:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
    62da:	4a11      	ldr	r2, [pc, #68]	; (6320 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
    62dc:	6812      	ldr	r2, [r2, #0]
    62de:	b1c2      	cbz	r2, 6312 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    62e0:	89e2      	ldrh	r2, [r4, #14]
    62e2:	2a7f      	cmp	r2, #127	; 0x7f
    62e4:	d815      	bhi.n	6312 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    62e6:	7b62      	ldrb	r2, [r4, #13]
    62e8:	06d2      	lsls	r2, r2, #27
    62ea:	d112      	bne.n	6312 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    62ec:	4a0d      	ldr	r2, [pc, #52]	; (6324 <z_time_slice+0x7c>)
    62ee:	f994 100e 	ldrsb.w	r1, [r4, #14]
    62f2:	6812      	ldr	r2, [r2, #0]
    62f4:	4291      	cmp	r1, r2
    62f6:	db0c      	blt.n	6312 <z_time_slice+0x6a>
	if (slice_time(_current) && sliceable(_current)) {
    62f8:	4a0b      	ldr	r2, [pc, #44]	; (6328 <z_time_slice+0x80>)
    62fa:	4294      	cmp	r4, r2
    62fc:	d009      	beq.n	6312 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    62fe:	691a      	ldr	r2, [r3, #16]
    6300:	4282      	cmp	r2, r0
    6302:	dc03      	bgt.n	630c <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
    6304:	4620      	mov	r0, r4
    6306:	f7ff ff95 	bl	6234 <move_thread_to_end_of_prio_q>
    630a:	e7dc      	b.n	62c6 <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
    630c:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
    630e:	611a      	str	r2, [r3, #16]
    6310:	e7dc      	b.n	62cc <z_time_slice+0x24>
    6312:	2200      	movs	r2, #0
    6314:	e7fb      	b.n	630e <z_time_slice+0x66>
    6316:	bf00      	nop
    6318:	2002037c 	.word	0x2002037c
    631c:	200203a4 	.word	0x200203a4
    6320:	200203ac 	.word	0x200203ac
    6324:	200203a8 	.word	0x200203a8
    6328:	200006c0 	.word	0x200006c0

0000632c <ready_thread>:
{
    632c:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    632e:	f990 200d 	ldrsb.w	r2, [r0, #13]
    6332:	7b43      	ldrb	r3, [r0, #13]
    6334:	2a00      	cmp	r2, #0
    6336:	db2a      	blt.n	638e <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    6338:	06da      	lsls	r2, r3, #27
    633a:	d128      	bne.n	638e <ready_thread+0x62>
    633c:	6982      	ldr	r2, [r0, #24]
    633e:	bb32      	cbnz	r2, 638e <ready_thread+0x62>
	return list->head == list;
    6340:	4a14      	ldr	r2, [pc, #80]	; (6394 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
    6342:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6346:	7343      	strb	r3, [r0, #13]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6348:	f102 0520 	add.w	r5, r2, #32
	return (node == list->tail) ? NULL : node->next;
    634c:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6350:	42ab      	cmp	r3, r5
    6352:	d017      	beq.n	6384 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6354:	b1b3      	cbz	r3, 6384 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
    6356:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    635a:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    635e:	428e      	cmp	r6, r1
    6360:	d00b      	beq.n	637a <ready_thread+0x4e>
		return b2 - b1;
    6362:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    6364:	2900      	cmp	r1, #0
    6366:	dd08      	ble.n	637a <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
    6368:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    636a:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    636e:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    6370:	6058      	str	r0, [r3, #4]
		update_cache(0);
    6372:	2000      	movs	r0, #0
}
    6374:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    6376:	f7ff bf3d 	b.w	61f4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    637a:	42a3      	cmp	r3, r4
    637c:	d002      	beq.n	6384 <ready_thread+0x58>
    637e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6380:	2b00      	cmp	r3, #0
    6382:	d1ea      	bne.n	635a <ready_thread+0x2e>
	node->prev = tail;
    6384:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
    6388:	6020      	str	r0, [r4, #0]
	list->tail = node;
    638a:	6250      	str	r0, [r2, #36]	; 0x24
}
    638c:	e7f1      	b.n	6372 <ready_thread+0x46>
}
    638e:	bc70      	pop	{r4, r5, r6}
    6390:	4770      	bx	lr
    6392:	bf00      	nop
    6394:	2002037c 	.word	0x2002037c

00006398 <z_sched_start>:
{
    6398:	b510      	push	{r4, lr}
	__asm__ volatile(
    639a:	f04f 0220 	mov.w	r2, #32
    639e:	f3ef 8411 	mrs	r4, BASEPRI
    63a2:	f382 8812 	msr	BASEPRI_MAX, r2
    63a6:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    63aa:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    63ac:	0751      	lsls	r1, r2, #29
    63ae:	d404      	bmi.n	63ba <z_sched_start+0x22>
	__asm__ volatile(
    63b0:	f384 8811 	msr	BASEPRI, r4
    63b4:	f3bf 8f6f 	isb	sy
}
    63b8:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    63ba:	f022 0204 	bic.w	r2, r2, #4
    63be:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    63c0:	f7ff ffb4 	bl	632c <ready_thread>
	z_reschedule(&sched_spinlock, key);
    63c4:	4621      	mov	r1, r4
}
    63c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    63ca:	4801      	ldr	r0, [pc, #4]	; (63d0 <z_sched_start+0x38>)
    63cc:	f7ff beec 	b.w	61a8 <z_reschedule>
    63d0:	20020594 	.word	0x20020594

000063d4 <unready_thread>:
{
    63d4:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    63d6:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    63da:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    63dc:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
    63de:	7b43      	ldrb	r3, [r0, #13]
    63e0:	da04      	bge.n	63ec <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    63e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    63e6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    63e8:	f001 ff67 	bl	82ba <sys_dlist_remove>
	update_cache(thread == _current);
    63ec:	4b04      	ldr	r3, [pc, #16]	; (6400 <unready_thread+0x2c>)
    63ee:	6898      	ldr	r0, [r3, #8]
    63f0:	1a43      	subs	r3, r0, r1
    63f2:	4258      	negs	r0, r3
    63f4:	4158      	adcs	r0, r3
}
    63f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    63fa:	f7ff befb 	b.w	61f4 <update_cache>
    63fe:	bf00      	nop
    6400:	2002037c 	.word	0x2002037c

00006404 <pend>:
{
    6404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6408:	4606      	mov	r6, r0
    640a:	4615      	mov	r5, r2
    640c:	461c      	mov	r4, r3
	__asm__ volatile(
    640e:	f04f 0320 	mov.w	r3, #32
    6412:	f3ef 8711 	mrs	r7, BASEPRI
    6416:	f383 8812 	msr	BASEPRI_MAX, r3
    641a:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    641e:	f001 ffbc 	bl	839a <add_to_waitq_locked>
	__asm__ volatile(
    6422:	f387 8811 	msr	BASEPRI, r7
    6426:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    642a:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    642e:	bf08      	it	eq
    6430:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    6434:	d008      	beq.n	6448 <pend+0x44>
    6436:	462a      	mov	r2, r5
    6438:	4623      	mov	r3, r4
    643a:	f106 0018 	add.w	r0, r6, #24
    643e:	4903      	ldr	r1, [pc, #12]	; (644c <pend+0x48>)
}
    6440:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6444:	f000 ba26 	b.w	6894 <z_add_timeout>
    6448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    644c:	00008357 	.word	0x00008357

00006450 <z_pend_curr>:
{
    6450:	b510      	push	{r4, lr}
    6452:	460c      	mov	r4, r1
	pending_current = _current;
    6454:	4b06      	ldr	r3, [pc, #24]	; (6470 <z_pend_curr+0x20>)
{
    6456:	4611      	mov	r1, r2
	pending_current = _current;
    6458:	6898      	ldr	r0, [r3, #8]
    645a:	4b06      	ldr	r3, [pc, #24]	; (6474 <z_pend_curr+0x24>)
    645c:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    645e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    6462:	f7ff ffcf 	bl	6404 <pend>
    6466:	4620      	mov	r0, r4
}
    6468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    646c:	f7fc b982 	b.w	2774 <arch_swap>
    6470:	2002037c 	.word	0x2002037c
    6474:	200203a4 	.word	0x200203a4

00006478 <z_set_prio>:
{
    6478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    647a:	4604      	mov	r4, r0
	__asm__ volatile(
    647c:	f04f 0320 	mov.w	r3, #32
    6480:	f3ef 8611 	mrs	r6, BASEPRI
    6484:	f383 8812 	msr	BASEPRI_MAX, r3
    6488:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    648c:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
    648e:	b249      	sxtb	r1, r1
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    6490:	06da      	lsls	r2, r3, #27
    6492:	d133      	bne.n	64fc <z_set_prio+0x84>
		if (need_sched) {
    6494:	6982      	ldr	r2, [r0, #24]
    6496:	bb8a      	cbnz	r2, 64fc <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6498:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    649c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    649e:	f001 ff0c 	bl	82ba <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    64a2:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    64a4:	4a17      	ldr	r2, [pc, #92]	; (6504 <z_set_prio+0x8c>)
    64a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
    64aa:	7343      	strb	r3, [r0, #13]
				thread->base.prio = prio;
    64ac:	7381      	strb	r1, [r0, #14]
    64ae:	4610      	mov	r0, r2
    64b0:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    64b4:	4283      	cmp	r3, r0
    64b6:	d01b      	beq.n	64f0 <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    64b8:	b1d3      	cbz	r3, 64f0 <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
    64ba:	6a57      	ldr	r7, [r2, #36]	; 0x24
	int32_t b2 = thread_2->base.prio;
    64bc:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    64c0:	42a9      	cmp	r1, r5
    64c2:	d010      	beq.n	64e6 <z_set_prio+0x6e>
		return b2 - b1;
    64c4:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    64c6:	2d00      	cmp	r5, #0
    64c8:	dd0d      	ble.n	64e6 <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
    64ca:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    64cc:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    64d0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    64d2:	605c      	str	r4, [r3, #4]
			update_cache(1);
    64d4:	2001      	movs	r0, #1
    64d6:	f7ff fe8d 	bl	61f4 <update_cache>
    64da:	2001      	movs	r0, #1
	__asm__ volatile(
    64dc:	f386 8811 	msr	BASEPRI, r6
    64e0:	f3bf 8f6f 	isb	sy
}
    64e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    64e6:	42bb      	cmp	r3, r7
    64e8:	d002      	beq.n	64f0 <z_set_prio+0x78>
    64ea:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    64ec:	2b00      	cmp	r3, #0
    64ee:	d1e5      	bne.n	64bc <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
    64f0:	6a53      	ldr	r3, [r2, #36]	; 0x24
	node->prev = tail;
    64f2:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
    64f6:	601c      	str	r4, [r3, #0]
	list->tail = node;
    64f8:	6254      	str	r4, [r2, #36]	; 0x24
}
    64fa:	e7eb      	b.n	64d4 <z_set_prio+0x5c>
			thread->base.prio = prio;
    64fc:	2000      	movs	r0, #0
    64fe:	73a1      	strb	r1, [r4, #14]
    6500:	e7ec      	b.n	64dc <z_set_prio+0x64>
    6502:	bf00      	nop
    6504:	2002037c 	.word	0x2002037c

00006508 <z_impl_k_thread_suspend>:
{
    6508:	b570      	push	{r4, r5, r6, lr}
    650a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    650c:	3018      	adds	r0, #24
    650e:	f001 ff9b 	bl	8448 <z_abort_timeout>
	__asm__ volatile(
    6512:	f04f 0320 	mov.w	r3, #32
    6516:	f3ef 8611 	mrs	r6, BASEPRI
    651a:	f383 8812 	msr	BASEPRI_MAX, r3
    651e:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    6522:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    6526:	7b63      	ldrb	r3, [r4, #13]
    6528:	2a00      	cmp	r2, #0
    652a:	da05      	bge.n	6538 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    652c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	sys_dlist_remove(&thread->base.qnode_dlist);
    6530:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6532:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    6534:	f001 fec1 	bl	82ba <sys_dlist_remove>
		update_cache(thread == _current);
    6538:	4d0b      	ldr	r5, [pc, #44]	; (6568 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    653a:	7b63      	ldrb	r3, [r4, #13]
    653c:	68a8      	ldr	r0, [r5, #8]
    653e:	f043 0310 	orr.w	r3, r3, #16
    6542:	7363      	strb	r3, [r4, #13]
    6544:	1b03      	subs	r3, r0, r4
    6546:	4258      	negs	r0, r3
    6548:	4158      	adcs	r0, r3
    654a:	f7ff fe53 	bl	61f4 <update_cache>
	__asm__ volatile(
    654e:	f386 8811 	msr	BASEPRI, r6
    6552:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    6556:	68ab      	ldr	r3, [r5, #8]
    6558:	42a3      	cmp	r3, r4
    655a:	d103      	bne.n	6564 <z_impl_k_thread_suspend+0x5c>
}
    655c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    6560:	f001 bed9 	b.w	8316 <z_reschedule_unlocked>
}
    6564:	bd70      	pop	{r4, r5, r6, pc}
    6566:	bf00      	nop
    6568:	2002037c 	.word	0x2002037c

0000656c <k_sched_unlock>:
{
    656c:	b510      	push	{r4, lr}
	__asm__ volatile(
    656e:	f04f 0320 	mov.w	r3, #32
    6572:	f3ef 8411 	mrs	r4, BASEPRI
    6576:	f383 8812 	msr	BASEPRI_MAX, r3
    657a:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    657e:	4b08      	ldr	r3, [pc, #32]	; (65a0 <k_sched_unlock+0x34>)
		update_cache(0);
    6580:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    6582:	689a      	ldr	r2, [r3, #8]
    6584:	7bd3      	ldrb	r3, [r2, #15]
    6586:	3301      	adds	r3, #1
    6588:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    658a:	f7ff fe33 	bl	61f4 <update_cache>
	__asm__ volatile(
    658e:	f384 8811 	msr	BASEPRI, r4
    6592:	f3bf 8f6f 	isb	sy
}
    6596:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    659a:	f001 bebc 	b.w	8316 <z_reschedule_unlocked>
    659e:	bf00      	nop
    65a0:	2002037c 	.word	0x2002037c

000065a4 <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    65a4:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
    65a6:	4b04      	ldr	r3, [pc, #16]	; (65b8 <z_sched_init+0x14>)
    65a8:	4608      	mov	r0, r1
    65aa:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    65ae:	e9c3 2208 	strd	r2, r2, [r3, #32]
    65b2:	f7ff bdc7 	b.w	6144 <k_sched_time_slice_set>
    65b6:	bf00      	nop
    65b8:	2002037c 	.word	0x2002037c

000065bc <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
    65bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    65be:	f04f 0320 	mov.w	r3, #32
    65c2:	f3ef 8511 	mrs	r5, BASEPRI
    65c6:	f383 8812 	msr	BASEPRI_MAX, r3
    65ca:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    65ce:	491a      	ldr	r1, [pc, #104]	; (6638 <z_impl_k_yield+0x7c>)
    65d0:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    65d2:	7b43      	ldrb	r3, [r0, #13]
    65d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    65d8:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    65da:	f001 fe6e 	bl	82ba <sys_dlist_remove>
	return list->head == list;
    65de:	4608      	mov	r0, r1
	}
	queue_thread(_current);
    65e0:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    65e2:	7b5a      	ldrb	r2, [r3, #13]
    65e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
    65e8:	735a      	strb	r2, [r3, #13]
    65ea:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    65ee:	4282      	cmp	r2, r0
    65f0:	d01c      	beq.n	662c <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    65f2:	b1da      	cbz	r2, 662c <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
    65f4:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
    65f6:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    65fa:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
    65fe:	42a6      	cmp	r6, r4
    6600:	d00f      	beq.n	6622 <z_impl_k_yield+0x66>
		return b2 - b1;
    6602:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    6604:	2c00      	cmp	r4, #0
    6606:	dd0c      	ble.n	6622 <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
    6608:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    660a:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    660e:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    6610:	6053      	str	r3, [r2, #4]
	update_cache(1);
    6612:	2001      	movs	r0, #1
    6614:	f7ff fdee 	bl	61f4 <update_cache>
    6618:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    661a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    661e:	f7fc b8a9 	b.w	2774 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    6622:	42ba      	cmp	r2, r7
    6624:	d002      	beq.n	662c <z_impl_k_yield+0x70>
    6626:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6628:	2a00      	cmp	r2, #0
    662a:	d1e6      	bne.n	65fa <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
    662c:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
    662e:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
    6632:	6013      	str	r3, [r2, #0]
	list->tail = node;
    6634:	624b      	str	r3, [r1, #36]	; 0x24
}
    6636:	e7ec      	b.n	6612 <z_impl_k_yield+0x56>
    6638:	2002037c 	.word	0x2002037c

0000663c <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    663c:	ea50 0301 	orrs.w	r3, r0, r1
{
    6640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6644:	4605      	mov	r5, r0
    6646:	460e      	mov	r6, r1
	if (ticks == 0) {
    6648:	d103      	bne.n	6652 <z_tick_sleep+0x16>
	z_impl_k_yield();
    664a:	f7ff ffb7 	bl	65bc <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
    664e:	2000      	movs	r0, #0
    6650:	e033      	b.n	66ba <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
    6652:	f06f 0401 	mvn.w	r4, #1
    6656:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    665a:	1a24      	subs	r4, r4, r0
    665c:	eb63 0301 	sbc.w	r3, r3, r1
    6660:	2c01      	cmp	r4, #1
    6662:	f173 0300 	sbcs.w	r3, r3, #0
    6666:	da02      	bge.n	666e <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    6668:	f001 ff2e 	bl	84c8 <sys_clock_tick_get_32>
    666c:	1944      	adds	r4, r0, r5
    666e:	f04f 0320 	mov.w	r3, #32
    6672:	f3ef 8811 	mrs	r8, BASEPRI
    6676:	f383 8812 	msr	BASEPRI_MAX, r3
    667a:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    667e:	4f10      	ldr	r7, [pc, #64]	; (66c0 <z_tick_sleep+0x84>)
    6680:	4b10      	ldr	r3, [pc, #64]	; (66c4 <z_tick_sleep+0x88>)
    6682:	68b8      	ldr	r0, [r7, #8]
    6684:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    6686:	f7ff fea5 	bl	63d4 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    668a:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    668c:	490e      	ldr	r1, [pc, #56]	; (66c8 <z_tick_sleep+0x8c>)
    668e:	462a      	mov	r2, r5
    6690:	4633      	mov	r3, r6
    6692:	3018      	adds	r0, #24
    6694:	f000 f8fe 	bl	6894 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    6698:	68ba      	ldr	r2, [r7, #8]
    669a:	4640      	mov	r0, r8
    669c:	7b53      	ldrb	r3, [r2, #13]
    669e:	f043 0310 	orr.w	r3, r3, #16
    66a2:	7353      	strb	r3, [r2, #13]
    66a4:	f7fc f866 	bl	2774 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    66a8:	f001 ff0e 	bl	84c8 <sys_clock_tick_get_32>
    66ac:	1a20      	subs	r0, r4, r0
    66ae:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    66b2:	2801      	cmp	r0, #1
    66b4:	f173 0300 	sbcs.w	r3, r3, #0
    66b8:	dbc9      	blt.n	664e <z_tick_sleep+0x12>
}
    66ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    66be:	bf00      	nop
    66c0:	2002037c 	.word	0x2002037c
    66c4:	200203a4 	.word	0x200203a4
    66c8:	00008357 	.word	0x00008357

000066cc <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    66cc:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    66d0:	bf08      	it	eq
    66d2:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    66d6:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    66d8:	d106      	bne.n	66e8 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    66da:	4b08      	ldr	r3, [pc, #32]	; (66fc <z_impl_k_sleep+0x30>)
    66dc:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    66de:	f7ff ff13 	bl	6508 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    66e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    66e6:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    66e8:	f7ff ffa8 	bl	663c <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    66ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    66f0:	fb80 0303 	smull	r0, r3, r0, r3
    66f4:	0bc0      	lsrs	r0, r0, #15
    66f6:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    66fa:	e7f4      	b.n	66e6 <z_impl_k_sleep+0x1a>
    66fc:	2002037c 	.word	0x2002037c

00006700 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    6700:	4b01      	ldr	r3, [pc, #4]	; (6708 <z_impl_z_current_get+0x8>)
    6702:	6898      	ldr	r0, [r3, #8]
    6704:	4770      	bx	lr
    6706:	bf00      	nop
    6708:	2002037c 	.word	0x2002037c

0000670c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    670c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6710:	4604      	mov	r4, r0
    6712:	f04f 0320 	mov.w	r3, #32
    6716:	f3ef 8611 	mrs	r6, BASEPRI
    671a:	f383 8812 	msr	BASEPRI_MAX, r3
    671e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    6722:	7b03      	ldrb	r3, [r0, #12]
    6724:	07d9      	lsls	r1, r3, #31
    6726:	d50b      	bpl.n	6740 <z_thread_abort+0x34>
	__asm__ volatile(
    6728:	f386 8811 	msr	BASEPRI, r6
    672c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
    6730:	4040      	eors	r0, r0
    6732:	f380 8811 	msr	BASEPRI, r0
    6736:	f04f 0004 	mov.w	r0, #4
    673a:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    673c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    6740:	7b43      	ldrb	r3, [r0, #13]
    6742:	071a      	lsls	r2, r3, #28
    6744:	d504      	bpl.n	6750 <z_thread_abort+0x44>
    6746:	f386 8811 	msr	BASEPRI, r6
    674a:	f3bf 8f6f 	isb	sy
    674e:	e7f5      	b.n	673c <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    6750:	f023 0220 	bic.w	r2, r3, #32
    6754:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    6758:	09d2      	lsrs	r2, r2, #7
    675a:	d120      	bne.n	679e <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    675c:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    675e:	68a3      	ldr	r3, [r4, #8]
    6760:	b113      	cbz	r3, 6768 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
    6762:	4620      	mov	r0, r4
    6764:	f001 fdb1 	bl	82ca <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    6768:	f104 0018 	add.w	r0, r4, #24
    676c:	f001 fe6c 	bl	8448 <z_abort_timeout>
    6770:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    6774:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
    6778:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    677a:	42bd      	cmp	r5, r7
    677c:	d000      	beq.n	6780 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    677e:	b9b5      	cbnz	r5, 67ae <z_thread_abort+0xa2>
		update_cache(1);
    6780:	2001      	movs	r0, #1
    6782:	f7ff fd37 	bl	61f4 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    6786:	4b10      	ldr	r3, [pc, #64]	; (67c8 <z_thread_abort+0xbc>)
    6788:	689b      	ldr	r3, [r3, #8]
    678a:	42a3      	cmp	r3, r4
    678c:	d1db      	bne.n	6746 <z_thread_abort+0x3a>
    678e:	f3ef 8305 	mrs	r3, IPSR
    6792:	2b00      	cmp	r3, #0
    6794:	d1d7      	bne.n	6746 <z_thread_abort+0x3a>
    6796:	4630      	mov	r0, r6
    6798:	f7fb ffec 	bl	2774 <arch_swap>
	return ret;
    679c:	e7d3      	b.n	6746 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    679e:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    67a2:	f043 0308 	orr.w	r3, r3, #8
    67a6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    67a8:	f001 fd87 	bl	82ba <sys_dlist_remove>
}
    67ac:	e7d7      	b.n	675e <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
    67ae:	4628      	mov	r0, r5
    67b0:	f001 fd8b 	bl	82ca <unpend_thread_no_timeout>
    67b4:	f105 0018 	add.w	r0, r5, #24
    67b8:	f001 fe46 	bl	8448 <z_abort_timeout>
		ready_thread(thread);
    67bc:	4628      	mov	r0, r5
    67be:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
    67c2:	f7ff fdb3 	bl	632c <ready_thread>
    67c6:	e7d7      	b.n	6778 <z_thread_abort+0x6c>
    67c8:	2002037c 	.word	0x2002037c

000067cc <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    67cc:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    67ce:	4806      	ldr	r0, [pc, #24]	; (67e8 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    67d0:	4a06      	ldr	r2, [pc, #24]	; (67ec <z_data_copy+0x20>)
    67d2:	4907      	ldr	r1, [pc, #28]	; (67f0 <z_data_copy+0x24>)
    67d4:	1a12      	subs	r2, r2, r0
    67d6:	f001 fcee 	bl	81b6 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    67da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    67de:	4a05      	ldr	r2, [pc, #20]	; (67f4 <z_data_copy+0x28>)
    67e0:	4905      	ldr	r1, [pc, #20]	; (67f8 <z_data_copy+0x2c>)
    67e2:	4806      	ldr	r0, [pc, #24]	; (67fc <z_data_copy+0x30>)
    67e4:	f001 bce7 	b.w	81b6 <z_early_memcpy>
    67e8:	20000000 	.word	0x20000000
    67ec:	200001d4 	.word	0x200001d4
    67f0:	000097bc 	.word	0x000097bc
    67f4:	00000000 	.word	0x00000000
    67f8:	000097bc 	.word	0x000097bc
    67fc:	20000000 	.word	0x20000000

00006800 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    6800:	4b03      	ldr	r3, [pc, #12]	; (6810 <elapsed+0x10>)
    6802:	681b      	ldr	r3, [r3, #0]
    6804:	b90b      	cbnz	r3, 680a <elapsed+0xa>
    6806:	f7fd bfb1 	b.w	476c <sys_clock_elapsed>
}
    680a:	2000      	movs	r0, #0
    680c:	4770      	bx	lr
    680e:	bf00      	nop
    6810:	200203b0 	.word	0x200203b0

00006814 <next_timeout>:
	return list->head == list;
    6814:	4b10      	ldr	r3, [pc, #64]	; (6858 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
    6816:	b510      	push	{r4, lr}
    6818:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    681a:	429c      	cmp	r4, r3
    681c:	bf08      	it	eq
    681e:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    6820:	f7ff ffee 	bl	6800 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    6824:	b1a4      	cbz	r4, 6850 <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    6826:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    682a:	1a1b      	subs	r3, r3, r0
    682c:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
    6830:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    6834:	f170 0200 	sbcs.w	r2, r0, #0
    6838:	da0a      	bge.n	6850 <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    683a:	2800      	cmp	r0, #0
    683c:	bfac      	ite	ge
    683e:	4618      	movge	r0, r3
    6840:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    6842:	4b06      	ldr	r3, [pc, #24]	; (685c <next_timeout+0x48>)
    6844:	691b      	ldr	r3, [r3, #16]
    6846:	b113      	cbz	r3, 684e <next_timeout+0x3a>
    6848:	4298      	cmp	r0, r3
    684a:	bfa8      	it	ge
    684c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    684e:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
    6850:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    6854:	e7f5      	b.n	6842 <next_timeout+0x2e>
    6856:	bf00      	nop
    6858:	200000d8 	.word	0x200000d8
    685c:	2002037c 	.word	0x2002037c

00006860 <remove_timeout>:
{
    6860:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
    6862:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6864:	b168      	cbz	r0, 6882 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    6866:	4a0a      	ldr	r2, [pc, #40]	; (6890 <remove_timeout+0x30>)
    6868:	6852      	ldr	r2, [r2, #4]
    686a:	4290      	cmp	r0, r2
    686c:	d009      	beq.n	6882 <remove_timeout+0x22>
	if (next(t) != NULL) {
    686e:	b143      	cbz	r3, 6882 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    6870:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    6874:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    6878:	1912      	adds	r2, r2, r4
    687a:	eb41 0105 	adc.w	r1, r1, r5
    687e:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    6882:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    6884:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    6886:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    6888:	2300      	movs	r3, #0
	node->prev = NULL;
    688a:	e9c0 3300 	strd	r3, r3, [r0]
}
    688e:	bd30      	pop	{r4, r5, pc}
    6890:	200000d8 	.word	0x200000d8

00006894 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    6894:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    6898:	bf08      	it	eq
    689a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    689e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    68a0:	4604      	mov	r4, r0
    68a2:	461f      	mov	r7, r3
    68a4:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    68a6:	d067      	beq.n	6978 <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    68a8:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    68aa:	f04f 0320 	mov.w	r3, #32
    68ae:	f3ef 8611 	mrs	r6, BASEPRI
    68b2:	f383 8812 	msr	BASEPRI_MAX, r3
    68b6:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    68ba:	f06f 0201 	mvn.w	r2, #1
    68be:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    68c2:	1b53      	subs	r3, r2, r5
    68c4:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    68c8:	2b00      	cmp	r3, #0
    68ca:	db1b      	blt.n	6904 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    68cc:	4b2b      	ldr	r3, [pc, #172]	; (697c <z_add_timeout+0xe8>)
    68ce:	e9d3 1300 	ldrd	r1, r3, [r3]
    68d2:	1a52      	subs	r2, r2, r1
    68d4:	eb6c 0303 	sbc.w	r3, ip, r3
    68d8:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
    68da:	eb63 0307 	sbc.w	r3, r3, r7
    68de:	2d01      	cmp	r5, #1
    68e0:	f173 0200 	sbcs.w	r2, r3, #0
    68e4:	bfbc      	itt	lt
    68e6:	2501      	movlt	r5, #1
    68e8:	2300      	movlt	r3, #0
    68ea:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
    68ee:	4824      	ldr	r0, [pc, #144]	; (6980 <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
    68f0:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    68f4:	4283      	cmp	r3, r0
    68f6:	d118      	bne.n	692a <z_add_timeout+0x96>
	node->prev = tail;
    68f8:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
    68fc:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    6900:	6044      	str	r4, [r0, #4]
}
    6902:	e026      	b.n	6952 <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    6904:	f7ff ff7c 	bl	6800 <elapsed>
    6908:	3501      	adds	r5, #1
    690a:	f147 0700 	adc.w	r7, r7, #0
    690e:	182d      	adds	r5, r5, r0
    6910:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
    6914:	e9c4 5704 	strd	r5, r7, [r4, #16]
    6918:	e7e9      	b.n	68ee <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    691a:	1a52      	subs	r2, r2, r1
    691c:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
    6920:	459c      	cmp	ip, r3
    6922:	e9c4 2504 	strd	r2, r5, [r4, #16]
    6926:	d0e7      	beq.n	68f8 <z_add_timeout+0x64>
    6928:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    692a:	2b00      	cmp	r3, #0
    692c:	d0e4      	beq.n	68f8 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
    692e:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
    6932:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
    6936:	428a      	cmp	r2, r1
    6938:	eb75 0e07 	sbcs.w	lr, r5, r7
    693c:	daed      	bge.n	691a <z_add_timeout+0x86>
				t->dticks -= to->dticks;
    693e:	1a8a      	subs	r2, r1, r2
    6940:	eb67 0505 	sbc.w	r5, r7, r5
    6944:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    6948:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    694a:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    694e:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    6950:	605c      	str	r4, [r3, #4]
	return list->head == list;
    6952:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6954:	4283      	cmp	r3, r0
    6956:	d00b      	beq.n	6970 <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    6958:	429c      	cmp	r4, r3
    695a:	d109      	bne.n	6970 <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    695c:	f7ff ff5a 	bl	6814 <next_timeout>

			if (next_time == 0 ||
    6960:	b118      	cbz	r0, 696a <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
    6962:	4b08      	ldr	r3, [pc, #32]	; (6984 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
    6964:	691b      	ldr	r3, [r3, #16]
    6966:	4283      	cmp	r3, r0
    6968:	d002      	beq.n	6970 <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
    696a:	2100      	movs	r1, #0
    696c:	f7fd fece 	bl	470c <sys_clock_set_timeout>
	__asm__ volatile(
    6970:	f386 8811 	msr	BASEPRI, r6
    6974:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    6978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    697a:	bf00      	nop
    697c:	200007c0 	.word	0x200007c0
    6980:	200000d8 	.word	0x200000d8
    6984:	2002037c 	.word	0x2002037c

00006988 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    6988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    698c:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    698e:	f7ff fc8b 	bl	62a8 <z_time_slice>
	__asm__ volatile(
    6992:	f04f 0320 	mov.w	r3, #32
    6996:	f3ef 8511 	mrs	r5, BASEPRI
    699a:	f383 8812 	msr	BASEPRI_MAX, r3
    699e:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    69a2:	4f24      	ldr	r7, [pc, #144]	; (6a34 <sys_clock_announce+0xac>)
	return list->head == list;
    69a4:	f8df 8090 	ldr.w	r8, [pc, #144]	; 6a38 <sys_clock_announce+0xb0>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    69a8:	4e24      	ldr	r6, [pc, #144]	; (6a3c <sys_clock_announce+0xb4>)
	announce_remaining = ticks;
    69aa:	603c      	str	r4, [r7, #0]
    69ac:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    69b0:	683b      	ldr	r3, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    69b2:	4540      	cmp	r0, r8
    69b4:	ea4f 71e3 	mov.w	r1, r3, asr #31
		curr_tick += dt;
    69b8:	e9d6 2e00 	ldrd	r2, lr, [r6]
    69bc:	d00b      	beq.n	69d6 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    69be:	b150      	cbz	r0, 69d6 <sys_clock_announce+0x4e>
    69c0:	e9d0 4c04 	ldrd	r4, ip, [r0, #16]
    69c4:	42a3      	cmp	r3, r4
    69c6:	eb71 090c 	sbcs.w	r9, r1, ip
    69ca:	da16      	bge.n	69fa <sys_clock_announce+0x72>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    69cc:	1ae4      	subs	r4, r4, r3
    69ce:	eb6c 0c01 	sbc.w	ip, ip, r1
    69d2:	e9c0 4c04 	strd	r4, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
    69d6:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    69d8:	189b      	adds	r3, r3, r2
    69da:	eb4e 0101 	adc.w	r1, lr, r1
    69de:	e9c6 3100 	strd	r3, r1, [r6]
	announce_remaining = 0;
    69e2:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
    69e4:	f7ff ff16 	bl	6814 <next_timeout>
    69e8:	4621      	mov	r1, r4
    69ea:	f7fd fe8f 	bl	470c <sys_clock_set_timeout>
	__asm__ volatile(
    69ee:	f385 8811 	msr	BASEPRI, r5
    69f2:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    69f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    69fa:	18a2      	adds	r2, r4, r2
    69fc:	eb4e 71e4 	adc.w	r1, lr, r4, asr #31
		t->dticks = 0;
    6a00:	2300      	movs	r3, #0
		curr_tick += dt;
    6a02:	e9c6 2100 	strd	r2, r1, [r6]
		t->dticks = 0;
    6a06:	2200      	movs	r2, #0
    6a08:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
    6a0c:	f7ff ff28 	bl	6860 <remove_timeout>
    6a10:	f385 8811 	msr	BASEPRI, r5
    6a14:	f3bf 8f6f 	isb	sy
		t->fn(t);
    6a18:	6883      	ldr	r3, [r0, #8]
    6a1a:	4798      	blx	r3
	__asm__ volatile(
    6a1c:	f04f 0320 	mov.w	r3, #32
    6a20:	f3ef 8511 	mrs	r5, BASEPRI
    6a24:	f383 8812 	msr	BASEPRI_MAX, r3
    6a28:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
    6a2c:	683b      	ldr	r3, [r7, #0]
    6a2e:	1b1b      	subs	r3, r3, r4
    6a30:	603b      	str	r3, [r7, #0]
    6a32:	e7bb      	b.n	69ac <sys_clock_announce+0x24>
    6a34:	200203b0 	.word	0x200203b0
    6a38:	200000d8 	.word	0x200000d8
    6a3c:	200007c0 	.word	0x200007c0

00006a40 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    6a40:	b510      	push	{r4, lr}
    6a42:	f04f 0320 	mov.w	r3, #32
    6a46:	f3ef 8411 	mrs	r4, BASEPRI
    6a4a:	f383 8812 	msr	BASEPRI_MAX, r3
    6a4e:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
    6a52:	f7ff fed5 	bl	6800 <elapsed>
    6a56:	4601      	mov	r1, r0
    6a58:	4b05      	ldr	r3, [pc, #20]	; (6a70 <sys_clock_tick_get+0x30>)
    6a5a:	e9d3 0300 	ldrd	r0, r3, [r3]
    6a5e:	1808      	adds	r0, r1, r0
    6a60:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
	__asm__ volatile(
    6a64:	f384 8811 	msr	BASEPRI, r4
    6a68:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    6a6c:	bd10      	pop	{r4, pc}
    6a6e:	bf00      	nop
    6a70:	200007c0 	.word	0x200007c0

00006a74 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    6a74:	b570      	push	{r4, r5, r6, lr}
    6a76:	4604      	mov	r4, r0
	__asm__ volatile(
    6a78:	f04f 0320 	mov.w	r3, #32
    6a7c:	f3ef 8511 	mrs	r5, BASEPRI
    6a80:	f383 8812 	msr	BASEPRI_MAX, r3
    6a84:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    6a88:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
    6a8c:	3301      	adds	r3, #1
    6a8e:	f142 0200 	adc.w	r2, r2, #0
    6a92:	2b02      	cmp	r3, #2
    6a94:	f172 0300 	sbcs.w	r3, r2, #0
    6a98:	d322      	bcc.n	6ae0 <z_timer_expiration_handler+0x6c>
	return z_impl_k_uptime_ticks();
    6a9a:	f001 fd19 	bl	84d0 <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
    6a9e:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
    6aa2:	3001      	adds	r0, #1
    6aa4:	f141 0100 	adc.w	r1, r1, #0
    6aa8:	18c0      	adds	r0, r0, r3
    6aaa:	eb41 0102 	adc.w	r1, r1, r2
    6aae:	2801      	cmp	r0, #1
    6ab0:	f171 0300 	sbcs.w	r3, r1, #0
    6ab4:	db32      	blt.n	6b1c <z_timer_expiration_handler+0xa8>
    6ab6:	f001 fd0b 	bl	84d0 <z_impl_k_uptime_ticks>
    6aba:	3001      	adds	r0, #1
    6abc:	f141 0300 	adc.w	r3, r1, #0
    6ac0:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
    6ac4:	1880      	adds	r0, r0, r2
    6ac6:	f06f 0201 	mvn.w	r2, #1
    6aca:	eb43 0301 	adc.w	r3, r3, r1
    6ace:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6ad2:	1a12      	subs	r2, r2, r0
    6ad4:	eb61 0303 	sbc.w	r3, r1, r3
					   + timer->period.ticks);
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    6ad8:	4620      	mov	r0, r4
    6ada:	491a      	ldr	r1, [pc, #104]	; (6b44 <z_timer_expiration_handler+0xd0>)
    6adc:	f7ff feda 	bl	6894 <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
    6ae0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    6ae2:	3301      	adds	r3, #1
    6ae4:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    6ae6:	6a23      	ldr	r3, [r4, #32]
    6ae8:	b173      	cbz	r3, 6b08 <z_timer_expiration_handler+0x94>
	__asm__ volatile(
    6aea:	f385 8811 	msr	BASEPRI, r5
    6aee:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    6af2:	4620      	mov	r0, r4
    6af4:	6a23      	ldr	r3, [r4, #32]
    6af6:	4798      	blx	r3
	__asm__ volatile(
    6af8:	f04f 0320 	mov.w	r3, #32
    6afc:	f3ef 8511 	mrs	r5, BASEPRI
    6b00:	f383 8812 	msr	BASEPRI_MAX, r3
    6b04:	f3bf 8f6f 	isb	sy
	return list->head == list;
    6b08:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6b0c:	42a6      	cmp	r6, r4
    6b0e:	d000      	beq.n	6b12 <z_timer_expiration_handler+0x9e>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    6b10:	b94e      	cbnz	r6, 6b26 <z_timer_expiration_handler+0xb2>
	__asm__ volatile(
    6b12:	f385 8811 	msr	BASEPRI, r5
    6b16:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    6b1a:	bd70      	pop	{r4, r5, r6, pc}
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
    6b1c:	f06f 0201 	mvn.w	r2, #1
    6b20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6b24:	e7d8      	b.n	6ad8 <z_timer_expiration_handler+0x64>
	z_unpend_thread_no_timeout(thread);
    6b26:	4630      	mov	r0, r6
    6b28:	f001 fbd9 	bl	82de <z_unpend_thread_no_timeout>
    6b2c:	2300      	movs	r3, #0
    6b2e:	67b3      	str	r3, [r6, #120]	; 0x78
    6b30:	f385 8811 	msr	BASEPRI, r5
    6b34:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    6b38:	4630      	mov	r0, r6
}
    6b3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
    6b3e:	f001 bbfa 	b.w	8336 <z_ready_thread>
    6b42:	bf00      	nop
    6b44:	00006a75 	.word	0x00006a75

00006b48 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    6b48:	4611      	mov	r1, r2
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    6b4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    6b4e:	bf08      	it	eq
    6b50:	f1b1 3fff 	cmpeq.w	r1, #4294967295	; 0xffffffff
{
    6b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6b58:	4606      	mov	r6, r0
    6b5a:	e9dd 2008 	ldrd	r2, r0, [sp, #32]
    6b5e:	461c      	mov	r4, r3
    6b60:	4689      	mov	r9, r1
    6b62:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    6b64:	d03e      	beq.n	6be4 <z_impl_k_timer_start+0x9c>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    6b66:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    6b6a:	bf08      	it	eq
    6b6c:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    6b70:	4615      	mov	r5, r2
    6b72:	4607      	mov	r7, r0
    6b74:	d014      	beq.n	6ba0 <z_impl_k_timer_start+0x58>
    6b76:	ea50 0302 	orrs.w	r3, r0, r2
    6b7a:	d011      	beq.n	6ba0 <z_impl_k_timer_start+0x58>
	    Z_TICK_ABS(period.ticks) < 0) {
    6b7c:	f06f 0301 	mvn.w	r3, #1
    6b80:	1a9b      	subs	r3, r3, r2
    6b82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6b86:	eb63 0300 	sbc.w	r3, r3, r0
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    6b8a:	2b00      	cmp	r3, #0
    6b8c:	da08      	bge.n	6ba0 <z_impl_k_timer_start+0x58>
		period.ticks = MAX(period.ticks - 1, 1);
    6b8e:	2a02      	cmp	r2, #2
    6b90:	f170 0300 	sbcs.w	r3, r0, #0
    6b94:	bfbc      	itt	lt
    6b96:	2502      	movlt	r5, #2
    6b98:	2700      	movlt	r7, #0
    6b9a:	3d01      	subs	r5, #1
    6b9c:	f147 37ff 	adc.w	r7, r7, #4294967295	; 0xffffffff
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    6ba0:	f06f 0301 	mvn.w	r3, #1
    6ba4:	1a5b      	subs	r3, r3, r1
    6ba6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6baa:	eb63 0304 	sbc.w	r3, r3, r4
    6bae:	2b00      	cmp	r3, #0
    6bb0:	da09      	bge.n	6bc6 <z_impl_k_timer_start+0x7e>
		duration.ticks = MAX(duration.ticks - 1, 0);
    6bb2:	2901      	cmp	r1, #1
    6bb4:	f174 0300 	sbcs.w	r3, r4, #0
    6bb8:	bfbc      	itt	lt
    6bba:	2101      	movlt	r1, #1
    6bbc:	2400      	movlt	r4, #0
    6bbe:	f111 39ff 	adds.w	r9, r1, #4294967295	; 0xffffffff
    6bc2:	f144 38ff 	adc.w	r8, r4, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
    6bc6:	4630      	mov	r0, r6
    6bc8:	f001 fc3e 	bl	8448 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    6bcc:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    6bce:	464a      	mov	r2, r9
	timer->status = 0U;
    6bd0:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    6bd2:	4630      	mov	r0, r6
    6bd4:	4643      	mov	r3, r8
	timer->period = period;
    6bd6:	e9c6 570a 	strd	r5, r7, [r6, #40]	; 0x28
		     duration);
}
    6bda:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    6bde:	4902      	ldr	r1, [pc, #8]	; (6be8 <z_impl_k_timer_start+0xa0>)
    6be0:	f7ff be58 	b.w	6894 <z_add_timeout>
}
    6be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6be8:	00006a75 	.word	0x00006a75

00006bec <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    6bec:	4a02      	ldr	r2, [pc, #8]	; (6bf8 <boot_banner+0xc>)
    6bee:	4903      	ldr	r1, [pc, #12]	; (6bfc <boot_banner+0x10>)
    6bf0:	4803      	ldr	r0, [pc, #12]	; (6c00 <boot_banner+0x14>)
    6bf2:	f000 b9f6 	b.w	6fe2 <printk>
    6bf6:	bf00      	nop
    6bf8:	00008df1 	.word	0x00008df1
    6bfc:	00009784 	.word	0x00009784
    6c00:	00009793 	.word	0x00009793

00006c04 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    6c04:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    6c06:	4c06      	ldr	r4, [pc, #24]	; (6c20 <statics_init+0x1c>)
    6c08:	4d06      	ldr	r5, [pc, #24]	; (6c24 <statics_init+0x20>)
    6c0a:	42ac      	cmp	r4, r5
    6c0c:	d301      	bcc.n	6c12 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
    6c0e:	2000      	movs	r0, #0
    6c10:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    6c12:	4620      	mov	r0, r4
    6c14:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    6c18:	f001 fc89 	bl	852e <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    6c1c:	3414      	adds	r4, #20
    6c1e:	e7f4      	b.n	6c0a <statics_init+0x6>
    6c20:	20000174 	.word	0x20000174
    6c24:	20000174 	.word	0x20000174

00006c28 <nrf_cc3xx_platform_init_no_rng>:
    6c28:	b510      	push	{r4, lr}
    6c2a:	4c0a      	ldr	r4, [pc, #40]	; (6c54 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    6c2c:	6823      	ldr	r3, [r4, #0]
    6c2e:	b11b      	cbz	r3, 6c38 <nrf_cc3xx_platform_init_no_rng+0x10>
    6c30:	2301      	movs	r3, #1
    6c32:	2000      	movs	r0, #0
    6c34:	6023      	str	r3, [r4, #0]
    6c36:	bd10      	pop	{r4, pc}
    6c38:	f000 f8dc 	bl	6df4 <CC_LibInitNoRng>
    6c3c:	2800      	cmp	r0, #0
    6c3e:	d0f7      	beq.n	6c30 <nrf_cc3xx_platform_init_no_rng+0x8>
    6c40:	3801      	subs	r0, #1
    6c42:	2807      	cmp	r0, #7
    6c44:	d803      	bhi.n	6c4e <nrf_cc3xx_platform_init_no_rng+0x26>
    6c46:	4b04      	ldr	r3, [pc, #16]	; (6c58 <nrf_cc3xx_platform_init_no_rng+0x30>)
    6c48:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    6c4c:	bd10      	pop	{r4, pc}
    6c4e:	4803      	ldr	r0, [pc, #12]	; (6c5c <nrf_cc3xx_platform_init_no_rng+0x34>)
    6c50:	bd10      	pop	{r4, pc}
    6c52:	bf00      	nop
    6c54:	200203b4 	.word	0x200203b4
    6c58:	00008b64 	.word	0x00008b64
    6c5c:	ffff8ffe 	.word	0xffff8ffe

00006c60 <nrf_cc3xx_platform_abort>:
    6c60:	f3bf 8f4f 	dsb	sy
    6c64:	4905      	ldr	r1, [pc, #20]	; (6c7c <nrf_cc3xx_platform_abort+0x1c>)
    6c66:	4b06      	ldr	r3, [pc, #24]	; (6c80 <nrf_cc3xx_platform_abort+0x20>)
    6c68:	68ca      	ldr	r2, [r1, #12]
    6c6a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    6c6e:	4313      	orrs	r3, r2
    6c70:	60cb      	str	r3, [r1, #12]
    6c72:	f3bf 8f4f 	dsb	sy
    6c76:	bf00      	nop
    6c78:	e7fd      	b.n	6c76 <nrf_cc3xx_platform_abort+0x16>
    6c7a:	bf00      	nop
    6c7c:	e000ed00 	.word	0xe000ed00
    6c80:	05fa0004 	.word	0x05fa0004

00006c84 <CC_PalAbort>:
    6c84:	b430      	push	{r4, r5}
    6c86:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    6c8a:	2500      	movs	r5, #0
    6c8c:	4b0b      	ldr	r3, [pc, #44]	; (6cbc <CC_PalAbort+0x38>)
    6c8e:	4c0c      	ldr	r4, [pc, #48]	; (6cc0 <CC_PalAbort+0x3c>)
    6c90:	490c      	ldr	r1, [pc, #48]	; (6cc4 <CC_PalAbort+0x40>)
    6c92:	6849      	ldr	r1, [r1, #4]
    6c94:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    6c98:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    6c9c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    6ca0:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    6ca4:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    6ca8:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
    6cac:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    6cb0:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
    6cb4:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
    6cb8:	bc30      	pop	{r4, r5}
    6cba:	4708      	bx	r1
    6cbc:	50845000 	.word	0x50845000
    6cc0:	50844000 	.word	0x50844000
    6cc4:	200000e0 	.word	0x200000e0

00006cc8 <nrf_cc3xx_platform_set_abort>:
    6cc8:	4b02      	ldr	r3, [pc, #8]	; (6cd4 <nrf_cc3xx_platform_set_abort+0xc>)
    6cca:	e9d0 1200 	ldrd	r1, r2, [r0]
    6cce:	e9c3 1200 	strd	r1, r2, [r3]
    6cd2:	4770      	bx	lr
    6cd4:	200000e0 	.word	0x200000e0

00006cd8 <mutex_free>:
    6cd8:	b510      	push	{r4, lr}
    6cda:	4604      	mov	r4, r0
    6cdc:	b130      	cbz	r0, 6cec <mutex_free+0x14>
    6cde:	6863      	ldr	r3, [r4, #4]
    6ce0:	06db      	lsls	r3, r3, #27
    6ce2:	d502      	bpl.n	6cea <mutex_free+0x12>
    6ce4:	2300      	movs	r3, #0
    6ce6:	6023      	str	r3, [r4, #0]
    6ce8:	6063      	str	r3, [r4, #4]
    6cea:	bd10      	pop	{r4, pc}
    6cec:	4b02      	ldr	r3, [pc, #8]	; (6cf8 <mutex_free+0x20>)
    6cee:	4803      	ldr	r0, [pc, #12]	; (6cfc <mutex_free+0x24>)
    6cf0:	685b      	ldr	r3, [r3, #4]
    6cf2:	4798      	blx	r3
    6cf4:	e7f3      	b.n	6cde <mutex_free+0x6>
    6cf6:	bf00      	nop
    6cf8:	200000e0 	.word	0x200000e0
    6cfc:	00008b84 	.word	0x00008b84

00006d00 <mutex_lock>:
    6d00:	b1b0      	cbz	r0, 6d30 <mutex_lock+0x30>
    6d02:	6843      	ldr	r3, [r0, #4]
    6d04:	b193      	cbz	r3, 6d2c <mutex_lock+0x2c>
    6d06:	06db      	lsls	r3, r3, #27
    6d08:	d50e      	bpl.n	6d28 <mutex_lock+0x28>
    6d0a:	2301      	movs	r3, #1
    6d0c:	e850 2f00 	ldrex	r2, [r0]
    6d10:	4619      	mov	r1, r3
    6d12:	e840 1c00 	strex	ip, r1, [r0]
    6d16:	f09c 0f00 	teq	ip, #0
    6d1a:	d1f7      	bne.n	6d0c <mutex_lock+0xc>
    6d1c:	2a01      	cmp	r2, #1
    6d1e:	d0f5      	beq.n	6d0c <mutex_lock+0xc>
    6d20:	f3bf 8f5f 	dmb	sy
    6d24:	2000      	movs	r0, #0
    6d26:	4770      	bx	lr
    6d28:	4803      	ldr	r0, [pc, #12]	; (6d38 <mutex_lock+0x38>)
    6d2a:	4770      	bx	lr
    6d2c:	4803      	ldr	r0, [pc, #12]	; (6d3c <mutex_lock+0x3c>)
    6d2e:	4770      	bx	lr
    6d30:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    6d34:	4770      	bx	lr
    6d36:	bf00      	nop
    6d38:	ffff8fe9 	.word	0xffff8fe9
    6d3c:	ffff8fea 	.word	0xffff8fea

00006d40 <mutex_unlock>:
    6d40:	4603      	mov	r3, r0
    6d42:	b168      	cbz	r0, 6d60 <mutex_unlock+0x20>
    6d44:	6842      	ldr	r2, [r0, #4]
    6d46:	b13a      	cbz	r2, 6d58 <mutex_unlock+0x18>
    6d48:	06d2      	lsls	r2, r2, #27
    6d4a:	d507      	bpl.n	6d5c <mutex_unlock+0x1c>
    6d4c:	f3bf 8f5f 	dmb	sy
    6d50:	2200      	movs	r2, #0
    6d52:	4610      	mov	r0, r2
    6d54:	601a      	str	r2, [r3, #0]
    6d56:	4770      	bx	lr
    6d58:	4803      	ldr	r0, [pc, #12]	; (6d68 <mutex_unlock+0x28>)
    6d5a:	4770      	bx	lr
    6d5c:	4803      	ldr	r0, [pc, #12]	; (6d6c <mutex_unlock+0x2c>)
    6d5e:	4770      	bx	lr
    6d60:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    6d64:	4770      	bx	lr
    6d66:	bf00      	nop
    6d68:	ffff8fea 	.word	0xffff8fea
    6d6c:	ffff8fe9 	.word	0xffff8fe9

00006d70 <mutex_init>:
    6d70:	b510      	push	{r4, lr}
    6d72:	4604      	mov	r4, r0
    6d74:	b120      	cbz	r0, 6d80 <mutex_init+0x10>
    6d76:	2200      	movs	r2, #0
    6d78:	2311      	movs	r3, #17
    6d7a:	6022      	str	r2, [r4, #0]
    6d7c:	6063      	str	r3, [r4, #4]
    6d7e:	bd10      	pop	{r4, pc}
    6d80:	4801      	ldr	r0, [pc, #4]	; (6d88 <mutex_init+0x18>)
    6d82:	f7ff ff7f 	bl	6c84 <CC_PalAbort>
    6d86:	e7f6      	b.n	6d76 <mutex_init+0x6>
    6d88:	00008bac 	.word	0x00008bac

00006d8c <nrf_cc3xx_platform_set_mutexes>:
    6d8c:	b570      	push	{r4, r5, r6, lr}
    6d8e:	4c16      	ldr	r4, [pc, #88]	; (6de8 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    6d90:	f8d0 c004 	ldr.w	ip, [r0, #4]
    6d94:	6806      	ldr	r6, [r0, #0]
    6d96:	f8c4 c004 	str.w	ip, [r4, #4]
    6d9a:	f8d0 c008 	ldr.w	ip, [r0, #8]
    6d9e:	68c0      	ldr	r0, [r0, #12]
    6da0:	f8c4 c008 	str.w	ip, [r4, #8]
    6da4:	60e0      	str	r0, [r4, #12]
    6da6:	6026      	str	r6, [r4, #0]
    6da8:	6808      	ldr	r0, [r1, #0]
    6daa:	4b10      	ldr	r3, [pc, #64]	; (6dec <nrf_cc3xx_platform_set_mutexes+0x60>)
    6dac:	4d10      	ldr	r5, [pc, #64]	; (6df0 <nrf_cc3xx_platform_set_mutexes+0x64>)
    6dae:	6018      	str	r0, [r3, #0]
    6db0:	6848      	ldr	r0, [r1, #4]
    6db2:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
    6db6:	6058      	str	r0, [r3, #4]
    6db8:	6888      	ldr	r0, [r1, #8]
    6dba:	6098      	str	r0, [r3, #8]
    6dbc:	68c8      	ldr	r0, [r1, #12]
    6dbe:	6909      	ldr	r1, [r1, #16]
    6dc0:	60d8      	str	r0, [r3, #12]
    6dc2:	6119      	str	r1, [r3, #16]
    6dc4:	06d3      	lsls	r3, r2, #27
    6dc6:	d50d      	bpl.n	6de4 <nrf_cc3xx_platform_set_mutexes+0x58>
    6dc8:	2300      	movs	r3, #0
    6dca:	f505 708a 	add.w	r0, r5, #276	; 0x114
    6dce:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
    6dd2:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
    6dd6:	47b0      	blx	r6
    6dd8:	6823      	ldr	r3, [r4, #0]
    6dda:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    6dde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6de2:	4718      	bx	r3
    6de4:	bd70      	pop	{r4, r5, r6, pc}
    6de6:	bf00      	nop
    6de8:	200000f0 	.word	0x200000f0
    6dec:	20000100 	.word	0x20000100
    6df0:	200203cc 	.word	0x200203cc

00006df4 <CC_LibInitNoRng>:
    6df4:	b508      	push	{r3, lr}
    6df6:	f000 f811 	bl	6e1c <CC_HalInit>
    6dfa:	b930      	cbnz	r0, 6e0a <CC_LibInitNoRng+0x16>
    6dfc:	f000 f810 	bl	6e20 <CC_PalInit>
    6e00:	b938      	cbnz	r0, 6e12 <CC_LibInitNoRng+0x1e>
    6e02:	4a05      	ldr	r2, [pc, #20]	; (6e18 <CC_LibInitNoRng+0x24>)
    6e04:	f8c2 0a0c 	str.w	r0, [r2, #2572]	; 0xa0c
    6e08:	bd08      	pop	{r3, pc}
    6e0a:	f000 f837 	bl	6e7c <CC_PalTerminate>
    6e0e:	2003      	movs	r0, #3
    6e10:	bd08      	pop	{r3, pc}
    6e12:	2004      	movs	r0, #4
    6e14:	bd08      	pop	{r3, pc}
    6e16:	bf00      	nop
    6e18:	50845000 	.word	0x50845000

00006e1c <CC_HalInit>:
    6e1c:	2000      	movs	r0, #0
    6e1e:	4770      	bx	lr

00006e20 <CC_PalInit>:
    6e20:	b510      	push	{r4, lr}
    6e22:	4811      	ldr	r0, [pc, #68]	; (6e68 <CC_PalInit+0x48>)
    6e24:	f000 f848 	bl	6eb8 <CC_PalMutexCreate>
    6e28:	b100      	cbz	r0, 6e2c <CC_PalInit+0xc>
    6e2a:	bd10      	pop	{r4, pc}
    6e2c:	480f      	ldr	r0, [pc, #60]	; (6e6c <CC_PalInit+0x4c>)
    6e2e:	f000 f843 	bl	6eb8 <CC_PalMutexCreate>
    6e32:	2800      	cmp	r0, #0
    6e34:	d1f9      	bne.n	6e2a <CC_PalInit+0xa>
    6e36:	4c0e      	ldr	r4, [pc, #56]	; (6e70 <CC_PalInit+0x50>)
    6e38:	4620      	mov	r0, r4
    6e3a:	f000 f83d 	bl	6eb8 <CC_PalMutexCreate>
    6e3e:	2800      	cmp	r0, #0
    6e40:	d1f3      	bne.n	6e2a <CC_PalInit+0xa>
    6e42:	4b0c      	ldr	r3, [pc, #48]	; (6e74 <CC_PalInit+0x54>)
    6e44:	480c      	ldr	r0, [pc, #48]	; (6e78 <CC_PalInit+0x58>)
    6e46:	601c      	str	r4, [r3, #0]
    6e48:	f000 f836 	bl	6eb8 <CC_PalMutexCreate>
    6e4c:	4601      	mov	r1, r0
    6e4e:	2800      	cmp	r0, #0
    6e50:	d1eb      	bne.n	6e2a <CC_PalInit+0xa>
    6e52:	f000 f82d 	bl	6eb0 <CC_PalDmaInit>
    6e56:	4604      	mov	r4, r0
    6e58:	b108      	cbz	r0, 6e5e <CC_PalInit+0x3e>
    6e5a:	4620      	mov	r0, r4
    6e5c:	bd10      	pop	{r4, pc}
    6e5e:	f000 f83f 	bl	6ee0 <CC_PalPowerSaveModeInit>
    6e62:	4620      	mov	r0, r4
    6e64:	e7fa      	b.n	6e5c <CC_PalInit+0x3c>
    6e66:	bf00      	nop
    6e68:	20000138 	.word	0x20000138
    6e6c:	2000012c 	.word	0x2000012c
    6e70:	20000134 	.word	0x20000134
    6e74:	2000013c 	.word	0x2000013c
    6e78:	20000130 	.word	0x20000130

00006e7c <CC_PalTerminate>:
    6e7c:	b508      	push	{r3, lr}
    6e7e:	4808      	ldr	r0, [pc, #32]	; (6ea0 <CC_PalTerminate+0x24>)
    6e80:	f000 f824 	bl	6ecc <CC_PalMutexDestroy>
    6e84:	4807      	ldr	r0, [pc, #28]	; (6ea4 <CC_PalTerminate+0x28>)
    6e86:	f000 f821 	bl	6ecc <CC_PalMutexDestroy>
    6e8a:	4807      	ldr	r0, [pc, #28]	; (6ea8 <CC_PalTerminate+0x2c>)
    6e8c:	f000 f81e 	bl	6ecc <CC_PalMutexDestroy>
    6e90:	4806      	ldr	r0, [pc, #24]	; (6eac <CC_PalTerminate+0x30>)
    6e92:	f000 f81b 	bl	6ecc <CC_PalMutexDestroy>
    6e96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    6e9a:	f000 b80b 	b.w	6eb4 <CC_PalDmaTerminate>
    6e9e:	bf00      	nop
    6ea0:	20000138 	.word	0x20000138
    6ea4:	2000012c 	.word	0x2000012c
    6ea8:	20000134 	.word	0x20000134
    6eac:	20000130 	.word	0x20000130

00006eb0 <CC_PalDmaInit>:
    6eb0:	2000      	movs	r0, #0
    6eb2:	4770      	bx	lr

00006eb4 <CC_PalDmaTerminate>:
    6eb4:	4770      	bx	lr
    6eb6:	bf00      	nop

00006eb8 <CC_PalMutexCreate>:
    6eb8:	b508      	push	{r3, lr}
    6eba:	4b03      	ldr	r3, [pc, #12]	; (6ec8 <CC_PalMutexCreate+0x10>)
    6ebc:	6802      	ldr	r2, [r0, #0]
    6ebe:	681b      	ldr	r3, [r3, #0]
    6ec0:	6810      	ldr	r0, [r2, #0]
    6ec2:	4798      	blx	r3
    6ec4:	2000      	movs	r0, #0
    6ec6:	bd08      	pop	{r3, pc}
    6ec8:	200000f0 	.word	0x200000f0

00006ecc <CC_PalMutexDestroy>:
    6ecc:	b508      	push	{r3, lr}
    6ece:	4b03      	ldr	r3, [pc, #12]	; (6edc <CC_PalMutexDestroy+0x10>)
    6ed0:	6802      	ldr	r2, [r0, #0]
    6ed2:	685b      	ldr	r3, [r3, #4]
    6ed4:	6810      	ldr	r0, [r2, #0]
    6ed6:	4798      	blx	r3
    6ed8:	2000      	movs	r0, #0
    6eda:	bd08      	pop	{r3, pc}
    6edc:	200000f0 	.word	0x200000f0

00006ee0 <CC_PalPowerSaveModeInit>:
    6ee0:	b570      	push	{r4, r5, r6, lr}
    6ee2:	4c09      	ldr	r4, [pc, #36]	; (6f08 <CC_PalPowerSaveModeInit+0x28>)
    6ee4:	4d09      	ldr	r5, [pc, #36]	; (6f0c <CC_PalPowerSaveModeInit+0x2c>)
    6ee6:	6920      	ldr	r0, [r4, #16]
    6ee8:	68ab      	ldr	r3, [r5, #8]
    6eea:	4798      	blx	r3
    6eec:	b118      	cbz	r0, 6ef6 <CC_PalPowerSaveModeInit+0x16>
    6eee:	4b08      	ldr	r3, [pc, #32]	; (6f10 <CC_PalPowerSaveModeInit+0x30>)
    6ef0:	4808      	ldr	r0, [pc, #32]	; (6f14 <CC_PalPowerSaveModeInit+0x34>)
    6ef2:	685b      	ldr	r3, [r3, #4]
    6ef4:	4798      	blx	r3
    6ef6:	2100      	movs	r1, #0
    6ef8:	4a07      	ldr	r2, [pc, #28]	; (6f18 <CC_PalPowerSaveModeInit+0x38>)
    6efa:	68eb      	ldr	r3, [r5, #12]
    6efc:	6011      	str	r1, [r2, #0]
    6efe:	6920      	ldr	r0, [r4, #16]
    6f00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6f04:	4718      	bx	r3
    6f06:	bf00      	nop
    6f08:	20000100 	.word	0x20000100
    6f0c:	200000f0 	.word	0x200000f0
    6f10:	200000e0 	.word	0x200000e0
    6f14:	00008bd0 	.word	0x00008bd0
    6f18:	200203c8 	.word	0x200203c8

00006f1c <z_log_msg_static_create.constprop.0>:
    6f1c:	2300      	movs	r3, #0
    6f1e:	f7fa beb3 	b.w	1c88 <z_impl_z_log_msg_static_create>

00006f22 <cbpprintf_external>:
{
    6f22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6f26:	4607      	mov	r7, r0
    6f28:	460e      	mov	r6, r1
    6f2a:	4690      	mov	r8, r2
	if (buf == NULL) {
    6f2c:	461d      	mov	r5, r3
    6f2e:	b30b      	cbz	r3, 6f74 <cbpprintf_external+0x52>
	for (i = 0; i < s_nbr; i++) {
    6f30:	f04f 0900 	mov.w	r9, #0
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
    6f34:	7818      	ldrb	r0, [r3, #0]
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
    6f36:	789c      	ldrb	r4, [r3, #2]
	s_nbr     = hdr->hdr.desc.str_cnt;
    6f38:	f893 a001 	ldrb.w	sl, [r3, #1]
	rws_nbr   = hdr->hdr.desc.rw_str_cnt;
    6f3c:	78db      	ldrb	r3, [r3, #3]
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
    6f3e:	441c      	add	r4, r3
    6f40:	eb04 0480 	add.w	r4, r4, r0, lsl #2
    6f44:	442c      	add	r4, r5
	for (i = 0; i < s_nbr; i++) {
    6f46:	45d1      	cmp	r9, sl
    6f48:	d308      	bcc.n	6f5c <cbpprintf_external+0x3a>
	return formatter(out, ctx, fmt, u.ap);
    6f4a:	4641      	mov	r1, r8
    6f4c:	4638      	mov	r0, r7
    6f4e:	46b4      	mov	ip, r6
    6f50:	686a      	ldr	r2, [r5, #4]
    6f52:	f105 0308 	add.w	r3, r5, #8
}
    6f56:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
    6f5a:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
    6f5c:	f814 3b01 	ldrb.w	r3, [r4], #1
	for (i = 0; i < s_nbr; i++) {
    6f60:	f109 0901 	add.w	r9, r9, #1
		s += strlen(s) + 1;
    6f64:	4620      	mov	r0, r4
		*ps = s;
    6f66:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
    6f6a:	f000 fd37 	bl	79dc <strlen>
    6f6e:	3001      	adds	r0, #1
    6f70:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    6f72:	e7e8      	b.n	6f46 <cbpprintf_external+0x24>
}
    6f74:	f06f 0015 	mvn.w	r0, #21
    6f78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00006f7c <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    6f7c:	4603      	mov	r3, r0
    6f7e:	b158      	cbz	r0, 6f98 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    6f80:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    6f82:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    6f86:	2a01      	cmp	r2, #1
    6f88:	d003      	beq.n	6f92 <sys_notify_validate+0x16>
    6f8a:	2a03      	cmp	r2, #3
    6f8c:	d104      	bne.n	6f98 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    6f8e:	6802      	ldr	r2, [r0, #0]
    6f90:	b112      	cbz	r2, 6f98 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    6f92:	2000      	movs	r0, #0
    6f94:	6098      	str	r0, [r3, #8]
    6f96:	4770      	bx	lr
		return -EINVAL;
    6f98:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    6f9c:	4770      	bx	lr

00006f9e <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    6f9e:	6842      	ldr	r2, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    6fa0:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
    6fa2:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    6fa6:	2a03      	cmp	r2, #3
    6fa8:	f04f 0200 	mov.w	r2, #0
	notify->result = res;
    6fac:	6081      	str	r1, [r0, #8]
	sys_notify_generic_callback rv = NULL;
    6fae:	bf14      	ite	ne
    6fb0:	4610      	movne	r0, r2
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    6fb2:	6800      	ldreq	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    6fb4:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    6fb6:	4770      	bx	lr

00006fb8 <arch_printk_char_out>:
}
    6fb8:	2000      	movs	r0, #0
    6fba:	4770      	bx	lr

00006fbc <str_out>:
{
    6fbc:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    6fbe:	688a      	ldr	r2, [r1, #8]
    6fc0:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
    6fc2:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    6fc4:	b114      	cbz	r4, 6fcc <str_out+0x10>
    6fc6:	684b      	ldr	r3, [r1, #4]
    6fc8:	4293      	cmp	r3, r2
    6fca:	dc01      	bgt.n	6fd0 <str_out+0x14>
		ctx->count++;
    6fcc:	608d      	str	r5, [r1, #8]
}
    6fce:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
    6fd0:	3b01      	subs	r3, #1
    6fd2:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
    6fd4:	bf08      	it	eq
    6fd6:	2200      	moveq	r2, #0
    6fd8:	608d      	str	r5, [r1, #8]
    6fda:	bf0c      	ite	eq
    6fdc:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
    6fde:	54a0      	strbne	r0, [r4, r2]
    6fe0:	e7f5      	b.n	6fce <str_out+0x12>

00006fe2 <printk>:
{
    6fe2:	b40f      	push	{r0, r1, r2, r3}
    6fe4:	b507      	push	{r0, r1, r2, lr}
    6fe6:	a904      	add	r1, sp, #16
    6fe8:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    6fec:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
    6fee:	f7f9 fdf5 	bl	bdc <vprintk>
}
    6ff2:	b003      	add	sp, #12
    6ff4:	f85d eb04 	ldr.w	lr, [sp], #4
    6ff8:	b004      	add	sp, #16
    6ffa:	4770      	bx	lr

00006ffc <snprintk>:
{
    6ffc:	b40c      	push	{r2, r3}
    6ffe:	b507      	push	{r0, r1, r2, lr}
    7000:	ab04      	add	r3, sp, #16
    7002:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    7006:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    7008:	f7f9 fdf6 	bl	bf8 <vsnprintk>
}
    700c:	b003      	add	sp, #12
    700e:	f85d eb04 	ldr.w	lr, [sp], #4
    7012:	b002      	add	sp, #8
    7014:	4770      	bx	lr

00007016 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    7016:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    7018:	f013 0307 	ands.w	r3, r3, #7
    701c:	d105      	bne.n	702a <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    701e:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    7020:	2b00      	cmp	r3, #0
    7022:	bf0c      	ite	eq
    7024:	2000      	moveq	r0, #0
    7026:	2003      	movne	r0, #3
    7028:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    702a:	2b02      	cmp	r3, #2
    702c:	d105      	bne.n	703a <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    702e:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
    7030:	2b00      	cmp	r3, #0
    7032:	bf14      	ite	ne
    7034:	2000      	movne	r0, #0
    7036:	2004      	moveq	r0, #4
    7038:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    703a:	2b01      	cmp	r3, #1
    703c:	d105      	bne.n	704a <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    703e:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    7040:	2b00      	cmp	r3, #0
    7042:	bf0c      	ite	eq
    7044:	2000      	moveq	r0, #0
    7046:	2005      	movne	r0, #5
    7048:	4770      	bx	lr
	int evt = EVT_NOP;
    704a:	2000      	movs	r0, #0
}
    704c:	4770      	bx	lr

0000704e <notify_one>:
{
    704e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7052:	460d      	mov	r5, r1
    7054:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    7056:	4619      	mov	r1, r3
    7058:	1d28      	adds	r0, r5, #4
{
    705a:	4690      	mov	r8, r2
    705c:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    705e:	f7ff ff9e 	bl	6f9e <sys_notify_finalize>
	if (cb) {
    7062:	4604      	mov	r4, r0
    7064:	b138      	cbz	r0, 7076 <notify_one+0x28>
		cb(mgr, cli, state, res);
    7066:	4633      	mov	r3, r6
    7068:	4642      	mov	r2, r8
    706a:	4629      	mov	r1, r5
    706c:	4638      	mov	r0, r7
    706e:	46a4      	mov	ip, r4
}
    7070:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    7074:	4760      	bx	ip
}
    7076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000707a <transition_complete>:
{
    707a:	b410      	push	{r4}
	__asm__ volatile(
    707c:	f04f 0420 	mov.w	r4, #32
    7080:	f3ef 8211 	mrs	r2, BASEPRI
    7084:	f384 8812 	msr	BASEPRI_MAX, r4
    7088:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    708c:	6141      	str	r1, [r0, #20]
}
    708e:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    7090:	2101      	movs	r1, #1
    7092:	f7f9 bdc7 	b.w	c24 <process_event>

00007096 <validate_args>:
{
    7096:	b510      	push	{r4, lr}
    7098:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    709a:	b140      	cbz	r0, 70ae <validate_args+0x18>
    709c:	b139      	cbz	r1, 70ae <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    709e:	1d08      	adds	r0, r1, #4
    70a0:	f7ff ff6c 	bl	6f7c <sys_notify_validate>
	if ((rv == 0)
    70a4:	b928      	cbnz	r0, 70b2 <validate_args+0x1c>
	    && ((cli->notify.flags
    70a6:	68a3      	ldr	r3, [r4, #8]
    70a8:	f033 0303 	bics.w	r3, r3, #3
    70ac:	d001      	beq.n	70b2 <validate_args+0x1c>
		rv = -EINVAL;
    70ae:	f06f 0015 	mvn.w	r0, #21
}
    70b2:	bd10      	pop	{r4, pc}

000070b4 <onoff_manager_init>:
{
    70b4:	b538      	push	{r3, r4, r5, lr}
    70b6:	460c      	mov	r4, r1
	if ((mgr == NULL)
    70b8:	4605      	mov	r5, r0
    70ba:	b158      	cbz	r0, 70d4 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    70bc:	b151      	cbz	r1, 70d4 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    70be:	680b      	ldr	r3, [r1, #0]
    70c0:	b143      	cbz	r3, 70d4 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    70c2:	684b      	ldr	r3, [r1, #4]
    70c4:	b133      	cbz	r3, 70d4 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    70c6:	221c      	movs	r2, #28
    70c8:	2100      	movs	r1, #0
    70ca:	f000 fca2 	bl	7a12 <memset>
	return 0;
    70ce:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    70d0:	612c      	str	r4, [r5, #16]
}
    70d2:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    70d4:	f06f 0015 	mvn.w	r0, #21
    70d8:	e7fb      	b.n	70d2 <onoff_manager_init+0x1e>

000070da <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    70da:	b570      	push	{r4, r5, r6, lr}
    70dc:	4604      	mov	r4, r0
    70de:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    70e0:	f7ff ffd9 	bl	7096 <validate_args>

	if (rv < 0) {
    70e4:	1e05      	subs	r5, r0, #0
    70e6:	db31      	blt.n	714c <onoff_request+0x72>
    70e8:	f04f 0320 	mov.w	r3, #32
    70ec:	f3ef 8111 	mrs	r1, BASEPRI
    70f0:	f383 8812 	msr	BASEPRI_MAX, r3
    70f4:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    70f8:	f64f 75ff 	movw	r5, #65535	; 0xffff
    70fc:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    70fe:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    7100:	42ab      	cmp	r3, r5
    7102:	f000 0207 	and.w	r2, r0, #7
    7106:	d02e      	beq.n	7166 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    7108:	2a02      	cmp	r2, #2
    710a:	d10e      	bne.n	712a <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    710c:	3301      	adds	r3, #1
    710e:	8363      	strh	r3, [r4, #26]
	rv = state;
    7110:	4615      	mov	r5, r2
		notify = true;
    7112:	2301      	movs	r3, #1
	__asm__ volatile(
    7114:	f381 8811 	msr	BASEPRI, r1
    7118:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    711c:	b1b3      	cbz	r3, 714c <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    711e:	2300      	movs	r3, #0
    7120:	4631      	mov	r1, r6
    7122:	4620      	mov	r0, r4
    7124:	f7ff ff93 	bl	704e <notify_one>
    7128:	e010      	b.n	714c <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    712a:	0783      	lsls	r3, r0, #30
    712c:	d001      	beq.n	7132 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    712e:	2a06      	cmp	r2, #6
    7130:	d10e      	bne.n	7150 <onoff_request+0x76>
	parent->next = child;
    7132:	2300      	movs	r3, #0
    7134:	6033      	str	r3, [r6, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    7136:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    7138:	b993      	cbnz	r3, 7160 <onoff_request+0x86>
	list->head = node;
    713a:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    713e:	4615      	mov	r5, r2
    7140:	b962      	cbnz	r2, 715c <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    7142:	460a      	mov	r2, r1
    7144:	4620      	mov	r0, r4
    7146:	2102      	movs	r1, #2
    7148:	f7f9 fd6c 	bl	c24 <process_event>
		}
	}

	return rv;
}
    714c:	4628      	mov	r0, r5
    714e:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    7150:	2a05      	cmp	r2, #5
    7152:	bf0c      	ite	eq
    7154:	f06f 0585 	mvneq.w	r5, #133	; 0x85
    7158:	f06f 0504 	mvnne.w	r5, #4
    715c:	2300      	movs	r3, #0
    715e:	e7d9      	b.n	7114 <onoff_request+0x3a>
	parent->next = child;
    7160:	601e      	str	r6, [r3, #0]
	list->tail = node;
    7162:	6066      	str	r6, [r4, #4]
}
    7164:	e7eb      	b.n	713e <onoff_request+0x64>
		rv = -EAGAIN;
    7166:	f06f 050a 	mvn.w	r5, #10
    716a:	e7f7      	b.n	715c <onoff_request+0x82>

0000716c <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
    716c:	b510      	push	{r4, lr}
	__asm__ volatile(
    716e:	f04f 0320 	mov.w	r3, #32
    7172:	f3ef 8211 	mrs	r2, BASEPRI
    7176:	f383 8812 	msr	BASEPRI_MAX, r3
    717a:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    717e:	8b04      	ldrh	r4, [r0, #24]
    7180:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
    7184:	2c02      	cmp	r4, #2
    7186:	d00a      	beq.n	719e <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
    7188:	2c01      	cmp	r4, #1
    718a:	bf0c      	ite	eq
    718c:	f06f 0004 	mvneq.w	r0, #4
    7190:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
    7194:	f382 8811 	msr	BASEPRI, r2
    7198:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
    719c:	e008      	b.n	71b0 <onoff_release+0x44>
	mgr->refs -= 1U;
    719e:	8b43      	ldrh	r3, [r0, #26]
    71a0:	3b01      	subs	r3, #1
    71a2:	b29b      	uxth	r3, r3
    71a4:	8343      	strh	r3, [r0, #26]
	if (stop) {
    71a6:	b923      	cbnz	r3, 71b2 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
    71a8:	4621      	mov	r1, r4
    71aa:	f7f9 fd3b 	bl	c24 <process_event>
	int rv = state;
    71ae:	4620      	mov	r0, r4
}
    71b0:	bd10      	pop	{r4, pc}
	int rv = state;
    71b2:	4620      	mov	r0, r4
    71b4:	e7ee      	b.n	7194 <onoff_release+0x28>

000071b6 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    71b6:	4604      	mov	r4, r0
    71b8:	b508      	push	{r3, lr}
    71ba:	4608      	mov	r0, r1
    71bc:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    71be:	461a      	mov	r2, r3
    71c0:	47a0      	blx	r4
	return z_impl_z_current_get();
    71c2:	f7ff fa9d 	bl	6700 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    71c6:	f7fb fef1 	bl	2fac <z_impl_k_thread_abort>

000071ca <chunk_field>:
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
    71ca:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
    71cc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
    71d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
    71d4:	bf2c      	ite	cs
    71d6:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
    71da:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
    71de:	4770      	bx	lr

000071e0 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    71e0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
    71e4:	6880      	ldr	r0, [r0, #8]
    71e6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
    71ea:	bf2c      	ite	cs
    71ec:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
    71f0:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
    71f4:	4770      	bx	lr

000071f6 <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    71f6:	2201      	movs	r2, #1
{
    71f8:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    71fa:	f7ff ffe6 	bl	71ca <chunk_field>
}
    71fe:	40d0      	lsrs	r0, r2
    7200:	bd08      	pop	{r3, pc}

00007202 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
    7202:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
    7204:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
    7208:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    720c:	d308      	bcc.n	7220 <set_chunk_used+0x1e>
		if (used) {
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    720e:	684b      	ldr	r3, [r1, #4]
		if (used) {
    7210:	b11a      	cbz	r2, 721a <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    7212:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
    7216:	604b      	str	r3, [r1, #4]
    7218:	4770      	bx	lr
    721a:	f023 0301 	bic.w	r3, r3, #1
    721e:	e7fa      	b.n	7216 <set_chunk_used+0x14>
		}
	} else {
		if (used) {
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    7220:	884b      	ldrh	r3, [r1, #2]
		if (used) {
    7222:	b11a      	cbz	r2, 722c <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    7224:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    7228:	804b      	strh	r3, [r1, #2]
		}
	}
}
    722a:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    722c:	f023 0301 	bic.w	r3, r3, #1
    7230:	e7fa      	b.n	7228 <set_chunk_used+0x26>

00007232 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    7232:	0053      	lsls	r3, r2, #1
    7234:	2201      	movs	r2, #1
    7236:	f7ff bfd3 	b.w	71e0 <chunk_set>

0000723a <bucket_idx.isra.0>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
    723a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    723e:	bf2c      	ite	cs
    7240:	2008      	movcs	r0, #8
    7242:	2004      	movcc	r0, #4
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
    7244:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    7246:	3008      	adds	r0, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
    7248:	eba1 00d0 	sub.w	r0, r1, r0, lsr #3
	return 31 - __builtin_clz(usable_sz);
    724c:	fab0 f080 	clz	r0, r0
}
    7250:	f1c0 001f 	rsb	r0, r0, #31
    7254:	4770      	bx	lr

00007256 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    7256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    725a:	460d      	mov	r5, r1
	return big_heap_chunks(h->end_chunk);
    725c:	6886      	ldr	r6, [r0, #8]
    725e:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
    7260:	f7ff ffc9 	bl	71f6 <chunk_size>
    7264:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
    7268:	4601      	mov	r1, r0
    726a:	d301      	bcc.n	7270 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
    726c:	2801      	cmp	r0, #1
    726e:	d033      	beq.n	72d8 <free_list_add+0x82>
		int bidx = bucket_idx(h, chunk_size(h, c));
    7270:	4630      	mov	r0, r6
    7272:	f7ff ffe2 	bl	723a <bucket_idx.isra.0>
	if (b->next == 0U) {
    7276:	eb04 0280 	add.w	r2, r4, r0, lsl #2
    727a:	6916      	ldr	r6, [r2, #16]
    727c:	b99e      	cbnz	r6, 72a6 <free_list_add+0x50>
		h->avail_buckets |= BIT(bidx);
    727e:	2301      	movs	r3, #1
    7280:	fa03 f000 	lsl.w	r0, r3, r0
    7284:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
    7286:	4629      	mov	r1, r5
    7288:	4303      	orrs	r3, r0
    728a:	60e3      	str	r3, [r4, #12]
    728c:	4620      	mov	r0, r4
		b->next = c;
    728e:	6115      	str	r5, [r2, #16]
    7290:	462b      	mov	r3, r5
    7292:	2202      	movs	r2, #2
    7294:	f7ff ffa4 	bl	71e0 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    7298:	2203      	movs	r2, #3
    729a:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
    729c:	4620      	mov	r0, r4
		free_list_add_bidx(h, c, bidx);
	}
}
    729e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    72a2:	f7ff bf9d 	b.w	71e0 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
    72a6:	2202      	movs	r2, #2
    72a8:	4631      	mov	r1, r6
    72aa:	4620      	mov	r0, r4
    72ac:	f7ff ff8d 	bl	71ca <chunk_field>
    72b0:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
    72b2:	4603      	mov	r3, r0
    72b4:	4629      	mov	r1, r5
    72b6:	4620      	mov	r0, r4
    72b8:	f7ff ff92 	bl	71e0 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    72bc:	2203      	movs	r2, #3
    72be:	4633      	mov	r3, r6
    72c0:	4629      	mov	r1, r5
    72c2:	4620      	mov	r0, r4
    72c4:	f7ff ff8c 	bl	71e0 <chunk_set>
    72c8:	4639      	mov	r1, r7
    72ca:	462b      	mov	r3, r5
    72cc:	4620      	mov	r0, r4
    72ce:	f7ff ff87 	bl	71e0 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
    72d2:	2202      	movs	r2, #2
    72d4:	4631      	mov	r1, r6
    72d6:	e7e1      	b.n	729c <free_list_add+0x46>
    72d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000072dc <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
    72dc:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    72e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    72e2:	bf2c      	ite	cs
    72e4:	2408      	movcs	r4, #8
    72e6:	2404      	movcc	r4, #4
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
    72e8:	2300      	movs	r3, #0
	bytes -= heap_footer_bytes(bytes);
    72ea:	1b14      	subs	r4, r2, r4
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    72ec:	1dce      	adds	r6, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    72ee:	440c      	add	r4, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    72f0:	f026 0607 	bic.w	r6, r6, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    72f4:	f024 0407 	bic.w	r4, r4, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    72f8:	1ba4      	subs	r4, r4, r6
    72fa:	08e4      	lsrs	r4, r4, #3
	heap->heap = h;
    72fc:	6006      	str	r6, [r0, #0]
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    72fe:	4621      	mov	r1, r4
    7300:	4620      	mov	r0, r4
	h->end_chunk = heap_sz;
    7302:	60b4      	str	r4, [r6, #8]
	h->avail_buckets = 0;
    7304:	60f3      	str	r3, [r6, #12]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    7306:	f7ff ff98 	bl	723a <bucket_idx.isra.0>
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    730a:	4619      	mov	r1, r3
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    730c:	0085      	lsls	r5, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    730e:	351b      	adds	r5, #27
    7310:	08ed      	lsrs	r5, r5, #3
	for (int i = 0; i < nb_buckets; i++) {
    7312:	f106 0210 	add.w	r2, r6, #16
    7316:	4298      	cmp	r0, r3
    7318:	da2e      	bge.n	7378 <sys_heap_init+0x9c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
    731a:	462a      	mov	r2, r5
    731c:	4630      	mov	r0, r6
    731e:	2100      	movs	r1, #0
    7320:	f7ff ff87 	bl	7232 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    7324:	2300      	movs	r3, #0
    7326:	4630      	mov	r0, r6
    7328:	461a      	mov	r2, r3
    732a:	4619      	mov	r1, r3
    732c:	f7ff ff58 	bl	71e0 <chunk_set>
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    7330:	1b67      	subs	r7, r4, r5
	set_chunk_used(h, 0, true);
    7332:	4619      	mov	r1, r3
    7334:	4630      	mov	r0, r6
    7336:	2201      	movs	r2, #1
    7338:	f7ff ff63 	bl	7202 <set_chunk_used>
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    733c:	463a      	mov	r2, r7
    733e:	4629      	mov	r1, r5
    7340:	f7ff ff77 	bl	7232 <set_chunk_size>
    7344:	462b      	mov	r3, r5
    7346:	2200      	movs	r2, #0
    7348:	4629      	mov	r1, r5
    734a:	4630      	mov	r0, r6
    734c:	f7ff ff48 	bl	71e0 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
    7350:	4621      	mov	r1, r4
    7352:	4630      	mov	r0, r6
    7354:	f7ff ff6d 	bl	7232 <set_chunk_size>
    7358:	463b      	mov	r3, r7
    735a:	4621      	mov	r1, r4
    735c:	4630      	mov	r0, r6
    735e:	2200      	movs	r2, #0
    7360:	f7ff ff3e 	bl	71e0 <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
    7364:	4621      	mov	r1, r4
    7366:	4630      	mov	r0, r6
    7368:	2201      	movs	r2, #1
    736a:	f7ff ff4a 	bl	7202 <set_chunk_used>

	free_list_add(h, chunk0_size);
    736e:	4629      	mov	r1, r5
}
    7370:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
    7374:	f7ff bf6f 	b.w	7256 <free_list_add>
		h->buckets[i].next = 0;
    7378:	f842 1b04 	str.w	r1, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
    737c:	3301      	adds	r3, #1
    737e:	e7ca      	b.n	7316 <sys_heap_init+0x3a>

00007380 <encode_uint>:
{
    7380:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7384:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    7386:	78d3      	ldrb	r3, [r2, #3]
{
    7388:	4680      	mov	r8, r0
	switch (specifier) {
    738a:	2b6f      	cmp	r3, #111	; 0x6f
{
    738c:	460f      	mov	r7, r1
    738e:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    7390:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    7394:	d029      	beq.n	73ea <encode_uint+0x6a>
    7396:	d824      	bhi.n	73e2 <encode_uint+0x62>
		return 16;
    7398:	2b58      	cmp	r3, #88	; 0x58
    739a:	bf14      	ite	ne
    739c:	260a      	movne	r6, #10
    739e:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
    73a0:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    73a4:	4632      	mov	r2, r6
    73a6:	2300      	movs	r3, #0
    73a8:	4640      	mov	r0, r8
    73aa:	4639      	mov	r1, r7
    73ac:	f7f8 ffe0 	bl	370 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    73b0:	2a09      	cmp	r2, #9
    73b2:	b2d4      	uxtb	r4, r2
    73b4:	d81e      	bhi.n	73f4 <encode_uint+0x74>
    73b6:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    73b8:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    73ba:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    73bc:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    73c0:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    73c4:	d301      	bcc.n	73ca <encode_uint+0x4a>
    73c6:	45d1      	cmp	r9, sl
    73c8:	d811      	bhi.n	73ee <encode_uint+0x6e>
	if (conv->flag_hash) {
    73ca:	782b      	ldrb	r3, [r5, #0]
    73cc:	069b      	lsls	r3, r3, #26
    73ce:	d505      	bpl.n	73dc <encode_uint+0x5c>
		if (radix == 8) {
    73d0:	2e08      	cmp	r6, #8
    73d2:	d115      	bne.n	7400 <encode_uint+0x80>
			conv->altform_0 = true;
    73d4:	78ab      	ldrb	r3, [r5, #2]
    73d6:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    73da:	70ab      	strb	r3, [r5, #2]
}
    73dc:	4648      	mov	r0, r9
    73de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    73e2:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    73e6:	2b70      	cmp	r3, #112	; 0x70
    73e8:	e7d7      	b.n	739a <encode_uint+0x1a>
	switch (specifier) {
    73ea:	2608      	movs	r6, #8
    73ec:	e7d8      	b.n	73a0 <encode_uint+0x20>
		value /= radix;
    73ee:	4680      	mov	r8, r0
    73f0:	460f      	mov	r7, r1
    73f2:	e7d7      	b.n	73a4 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    73f4:	f1bb 0f19 	cmp.w	fp, #25
    73f8:	bf94      	ite	ls
    73fa:	3437      	addls	r4, #55	; 0x37
    73fc:	3457      	addhi	r4, #87	; 0x57
    73fe:	e7db      	b.n	73b8 <encode_uint+0x38>
		} else if (radix == 16) {
    7400:	2e10      	cmp	r6, #16
    7402:	d1eb      	bne.n	73dc <encode_uint+0x5c>
			conv->altform_0c = true;
    7404:	78ab      	ldrb	r3, [r5, #2]
    7406:	f043 0310 	orr.w	r3, r3, #16
    740a:	e7e6      	b.n	73da <encode_uint+0x5a>

0000740c <outs>:
{
    740c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7410:	4607      	mov	r7, r0
    7412:	4688      	mov	r8, r1
    7414:	4615      	mov	r5, r2
    7416:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    7418:	4614      	mov	r4, r2
    741a:	42b4      	cmp	r4, r6
    741c:	eba4 0005 	sub.w	r0, r4, r5
    7420:	d302      	bcc.n	7428 <outs+0x1c>
    7422:	b93e      	cbnz	r6, 7434 <outs+0x28>
    7424:	7823      	ldrb	r3, [r4, #0]
    7426:	b12b      	cbz	r3, 7434 <outs+0x28>
		int rc = out((int)*sp++, ctx);
    7428:	4641      	mov	r1, r8
    742a:	f814 0b01 	ldrb.w	r0, [r4], #1
    742e:	47b8      	blx	r7
		if (rc < 0) {
    7430:	2800      	cmp	r0, #0
    7432:	daf2      	bge.n	741a <outs+0xe>
}
    7434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007438 <free_space>:
	__ASSERT_NO_MSG(err == 0);
	ARG_UNUSED(err);
}

static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
    7438:	4602      	mov	r2, r0
    743a:	b510      	push	{r4, lr}
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
    743c:	68c0      	ldr	r0, [r0, #12]
    743e:	6814      	ldr	r4, [r2, #0]
    7440:	42a0      	cmp	r0, r4
    7442:	d904      	bls.n	744e <free_space+0x16>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
    7444:	3801      	subs	r0, #1
    7446:	1b00      	subs	r0, r0, r4
    7448:	6008      	str	r0, [r1, #0]

		return false;
    744a:	2000      	movs	r0, #0
	}

	*res = buffer->size - buffer->tmp_wr_idx;

	return true;
}
    744c:	bd10      	pop	{r4, pc}
		*res = buffer->size - buffer->tmp_wr_idx - 1;
    744e:	6a13      	ldr	r3, [r2, #32]
	} else if (!buffer->rd_idx) {
    7450:	b918      	cbnz	r0, 745a <free_space+0x22>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
    7452:	3b01      	subs	r3, #1
    7454:	1b1b      	subs	r3, r3, r4
    7456:	600b      	str	r3, [r1, #0]
		return false;
    7458:	e7f8      	b.n	744c <free_space+0x14>
	*res = buffer->size - buffer->tmp_wr_idx;
    745a:	1b1b      	subs	r3, r3, r4
	return true;
    745c:	2001      	movs	r0, #1
	*res = buffer->size - buffer->tmp_wr_idx;
    745e:	600b      	str	r3, [r1, #0]
	return true;
    7460:	e7f4      	b.n	744c <free_space+0x14>

00007462 <get_usage>:

	return true;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
    7462:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
    7464:	a901      	add	r1, sp, #4
{
    7466:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
    7468:	f7ff ffe6 	bl	7438 <free_space>
    746c:	b120      	cbz	r0, 7478 <get_usage+0x16>
		f += (buffer->rd_idx - 1);
    746e:	9b01      	ldr	r3, [sp, #4]
    7470:	68e2      	ldr	r2, [r4, #12]
    7472:	3b01      	subs	r3, #1
    7474:	4413      	add	r3, r2
    7476:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
    7478:	9801      	ldr	r0, [sp, #4]
    747a:	6a23      	ldr	r3, [r4, #32]
    747c:	43c0      	mvns	r0, r0
}
    747e:	4418      	add	r0, r3
    7480:	b002      	add	sp, #8
    7482:	bd10      	pop	{r4, pc}

00007484 <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, uint32_t val)
{
    7484:	b510      	push	{r4, lr}
    7486:	4604      	mov	r4, r0
	uint32_t i = idx + val;
    7488:	1888      	adds	r0, r1, r2

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    748a:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
    748c:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    748e:	07d2      	lsls	r2, r2, #31
    7490:	d502      	bpl.n	7498 <idx_inc+0x14>
		return i & (buffer->size - 1);
    7492:	3b01      	subs	r3, #1
    7494:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
    7496:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
    7498:	4298      	cmp	r0, r3
    749a:	bf28      	it	cs
    749c:	1ac0      	subcs	r0, r0, r3
    749e:	e7fa      	b.n	7496 <idx_inc+0x12>

000074a0 <add_skip_item>:

	return 0;
}

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
    74a0:	b538      	push	{r3, r4, r5, lr}
    74a2:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    74a4:	69c2      	ldr	r2, [r0, #28]
	union mpsc_pbuf_generic skip = {
    74a6:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    74a8:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
    74aa:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    74ae:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    74b2:	6801      	ldr	r1, [r0, #0]
    74b4:	462a      	mov	r2, r5
{
    74b6:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    74b8:	f7ff ffe4 	bl	7484 <idx_inc>
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    74bc:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    74be:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    74c0:	462a      	mov	r2, r5
    74c2:	4620      	mov	r0, r4
    74c4:	f7ff ffde 	bl	7484 <idx_inc>
    74c8:	6060      	str	r0, [r4, #4]
}
    74ca:	bd38      	pop	{r3, r4, r5, pc}

000074cc <max_utilization_update>:
{
    74cc:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
    74ce:	6903      	ldr	r3, [r0, #16]
{
    74d0:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
    74d2:	075b      	lsls	r3, r3, #29
    74d4:	d506      	bpl.n	74e4 <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
    74d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
    74d8:	f7ff ffc3 	bl	7462 <get_usage>
    74dc:	4285      	cmp	r5, r0
    74de:	d902      	bls.n	74e6 <max_utilization_update+0x1a>
    74e0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    74e2:	6260      	str	r0, [r4, #36]	; 0x24
}
    74e4:	bd38      	pop	{r3, r4, r5, pc}
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
    74e6:	4620      	mov	r0, r4
    74e8:	f7ff ffbb 	bl	7462 <get_usage>
    74ec:	e7f9      	b.n	74e2 <max_utilization_update+0x16>

000074ee <drop_item_locked>:
 */
static union mpsc_pbuf_generic *drop_item_locked(struct mpsc_pbuf_buffer *buffer,
						 uint32_t free_wlen,
						 bool allow_drop,
						 bool *user_packet)
{
    74ee:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    74f2:	461f      	mov	r7, r3
	union mpsc_pbuf_generic *item;
	uint32_t rd_wlen;
	uint32_t skip_wlen;

	*user_packet = false;
    74f4:	2300      	movs	r3, #0
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    74f6:	f8d0 a00c 	ldr.w	sl, [r0, #12]
    74fa:	f8d0 901c 	ldr.w	r9, [r0, #28]
	*user_packet = false;
    74fe:	703b      	strb	r3, [r7, #0]
	if (item->hdr.busy && !item->hdr.valid) {
    7500:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
{
    7504:	4604      	mov	r4, r0
	if (item->hdr.busy && !item->hdr.valid) {
    7506:	f003 0303 	and.w	r3, r3, #3
    750a:	2b02      	cmp	r3, #2
{
    750c:	468b      	mov	fp, r1
    750e:	4690      	mov	r8, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    7510:	eb09 068a 	add.w	r6, r9, sl, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
    7514:	d103      	bne.n	751e <drop_item_locked+0x30>
		return item->skip.len;
    7516:	f859 502a 	ldr.w	r5, [r9, sl, lsl #2]
	skip_wlen = get_skip(item);

	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
    751a:	08ad      	lsrs	r5, r5, #2
    751c:	d12e      	bne.n	757c <drop_item_locked+0x8e>
    751e:	4630      	mov	r0, r6
    7520:	69a3      	ldr	r3, [r4, #24]
    7522:	4798      	blx	r3
    7524:	4605      	mov	r5, r0
	if (skip_wlen) {
		allow_drop = true;
	} else if (allow_drop) {
    7526:	f1b8 0f00 	cmp.w	r8, #0
    752a:	d036      	beq.n	759a <drop_item_locked+0xac>
		if (item->hdr.busy) {
    752c:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
    7530:	079b      	lsls	r3, r3, #30
    7532:	d52f      	bpl.n	7594 <drop_item_locked+0xa6>
			/* item is currently processed and cannot be overwritten. */
			add_skip_item(buffer, free_wlen + 1);
    7534:	4620      	mov	r0, r4
    7536:	f10b 0101 	add.w	r1, fp, #1
    753a:	f7ff ffb1 	bl	74a0 <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    753e:	6861      	ldr	r1, [r4, #4]
    7540:	462a      	mov	r2, r5
    7542:	4620      	mov	r0, r4
    7544:	f7ff ff9e 	bl	7484 <idx_inc>
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
    7548:	6821      	ldr	r1, [r4, #0]
    754a:	462a      	mov	r2, r5
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    754c:	6060      	str	r0, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
    754e:	4620      	mov	r0, r4
    7550:	f7ff ff98 	bl	7484 <idx_inc>

			/* Get next itme followed the busy one. */
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    7554:	462a      	mov	r2, r5
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
    7556:	6020      	str	r0, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    7558:	68e1      	ldr	r1, [r4, #12]
    755a:	4620      	mov	r0, r4
    755c:	f7ff ff92 	bl	7484 <idx_inc>

			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
    7560:	69e3      	ldr	r3, [r4, #28]
	if (item->hdr.busy && !item->hdr.valid) {
    7562:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
    7566:	eb03 0680 	add.w	r6, r3, r0, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
    756a:	f002 0203 	and.w	r2, r2, #3
    756e:	2a02      	cmp	r2, #2
    7570:	d10c      	bne.n	758c <drop_item_locked+0x9e>
		return item->skip.len;
    7572:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
			skip_wlen = get_skip(item);
			if (skip_wlen) {
    7576:	089b      	lsrs	r3, r3, #2
    7578:	d008      	beq.n	758c <drop_item_locked+0x9e>
				rd_wlen += skip_wlen;
    757a:	441d      	add	r5, r3
	} else {
		item = NULL;
	}

	if (allow_drop) {
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    757c:	68e1      	ldr	r1, [r4, #12]
    757e:	462a      	mov	r2, r5
    7580:	4620      	mov	r0, r4
    7582:	f7ff ff7f 	bl	7484 <idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
    7586:	e9c4 0002 	strd	r0, r0, [r4, #8]
    758a:	e007      	b.n	759c <drop_item_locked+0xae>
				rd_wlen += buffer->get_wlen(item);
    758c:	4630      	mov	r0, r6
    758e:	69a3      	ldr	r3, [r4, #24]
    7590:	4798      	blx	r3
    7592:	4405      	add	r5, r0
			*user_packet = true;
    7594:	2301      	movs	r3, #1
    7596:	703b      	strb	r3, [r7, #0]
    7598:	e7f0      	b.n	757c <drop_item_locked+0x8e>
		item = NULL;
    759a:	4646      	mov	r6, r8
	}

	return item;
}
    759c:	4630      	mov	r0, r6
    759e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000075a2 <mpsc_pbuf_init>:
{
    75a2:	b538      	push	{r3, r4, r5, lr}
    75a4:	460d      	mov	r5, r1
    75a6:	4604      	mov	r4, r0
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
    75a8:	221c      	movs	r2, #28
    75aa:	2100      	movs	r1, #0
    75ac:	f000 fa31 	bl	7a12 <memset>
	buffer->get_wlen = cfg->get_wlen;
    75b0:	68eb      	ldr	r3, [r5, #12]
	buffer->size = cfg->size;
    75b2:	686a      	ldr	r2, [r5, #4]
	buffer->get_wlen = cfg->get_wlen;
    75b4:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
    75b6:	68ab      	ldr	r3, [r5, #8]
    75b8:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
    75ba:	682b      	ldr	r3, [r5, #0]
	buffer->size = cfg->size;
    75bc:	6222      	str	r2, [r4, #32]
	buffer->buf = cfg->buf;
    75be:	61e3      	str	r3, [r4, #28]
	buffer->max_usage = 0;
    75c0:	2300      	movs	r3, #0
    75c2:	6263      	str	r3, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
    75c4:	692b      	ldr	r3, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
    75c6:	b122      	cbz	r2, 75d2 <mpsc_pbuf_init+0x30>
    75c8:	1e51      	subs	r1, r2, #1
    75ca:	4211      	tst	r1, r2
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
    75cc:	bf08      	it	eq
    75ce:	f043 0301 	orreq.w	r3, r3, #1
	buffer->flags = cfg->flags;
    75d2:	6123      	str	r3, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
    75d4:	2201      	movs	r2, #1
    75d6:	f104 0028 	add.w	r0, r4, #40	; 0x28
    75da:	2100      	movs	r1, #0
}
    75dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    75e0:	f000 be5f 	b.w	82a2 <z_impl_k_sem_init>

000075e4 <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
    75e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    75e8:	4699      	mov	r9, r3
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
    75ea:	6a03      	ldr	r3, [r0, #32]
{
    75ec:	4604      	mov	r4, r0
	if (wlen > (buffer->size - 1)) {
    75ee:	3b01      	subs	r3, #1
    75f0:	428b      	cmp	r3, r1
{
    75f2:	460f      	mov	r7, r1
    75f4:	4690      	mov	r8, r2
    75f6:	b085      	sub	sp, #20
	if (wlen > (buffer->size - 1)) {
    75f8:	d367      	bcc.n	76ca <mpsc_pbuf_alloc+0xe6>
	union mpsc_pbuf_generic *dropped_item = NULL;
    75fa:	2500      	movs	r5, #0
	union mpsc_pbuf_generic *item = NULL;
    75fc:	46aa      	mov	sl, r5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
			   !k_is_in_isr()) {
			int err;

			k_spin_unlock(&buffer->lock, key);
			err = k_sem_take(&buffer->sem, timeout);
    75fe:	f100 0b28 	add.w	fp, r0, #40	; 0x28
	__asm__ volatile(
    7602:	f04f 0320 	mov.w	r3, #32
    7606:	f3ef 8611 	mrs	r6, BASEPRI
    760a:	f383 8812 	msr	BASEPRI_MAX, r3
    760e:	f3bf 8f6f 	isb	sy
		wrap = free_space(buffer, &free_wlen);
    7612:	a903      	add	r1, sp, #12
    7614:	4620      	mov	r0, r4
    7616:	f7ff ff0f 	bl	7438 <free_space>
		if (free_wlen >= wlen) {
    761a:	9903      	ldr	r1, [sp, #12]
    761c:	42b9      	cmp	r1, r7
    761e:	d324      	bcc.n	766a <mpsc_pbuf_alloc+0x86>
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
    7620:	6821      	ldr	r1, [r4, #0]
			item =
    7622:	69e3      	ldr	r3, [r4, #28]
			buffer->tmp_wr_idx = idx_inc(buffer,
    7624:	4620      	mov	r0, r4
			item->hdr.valid = 0;
    7626:	f813 2021 	ldrb.w	r2, [r3, r1, lsl #2]
			item =
    762a:	eb03 0a81 	add.w	sl, r3, r1, lsl #2
			item->hdr.valid = 0;
    762e:	f022 0203 	bic.w	r2, r2, #3
    7632:	f803 2021 	strb.w	r2, [r3, r1, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
    7636:	463a      	mov	r2, r7
    7638:	f7ff ff24 	bl	7484 <idx_inc>
		cont = false;
    763c:	2300      	movs	r3, #0
			buffer->tmp_wr_idx = idx_inc(buffer,
    763e:	6020      	str	r0, [r4, #0]
	__asm__ volatile(
    7640:	f386 8811 	msr	BASEPRI, r6
    7644:	f3bf 8f6f 	isb	sy
			cont = dropped_item != NULL;
		}

		k_spin_unlock(&buffer->lock, key);

		if (cont && dropped_item && valid_drop) {
    7648:	2b00      	cmp	r3, #0
    764a:	d040      	beq.n	76ce <mpsc_pbuf_alloc+0xea>
    764c:	2d00      	cmp	r5, #0
    764e:	d0d8      	beq.n	7602 <mpsc_pbuf_alloc+0x1e>
    7650:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7654:	2b00      	cmp	r3, #0
    7656:	d0d4      	beq.n	7602 <mpsc_pbuf_alloc+0x1e>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
    7658:	6963      	ldr	r3, [r4, #20]
    765a:	b123      	cbz	r3, 7666 <mpsc_pbuf_alloc+0x82>
				buffer->notify_drop(buffer, dropped_item);
    765c:	4629      	mov	r1, r5
    765e:	4620      	mov	r0, r4
    7660:	4798      	blx	r3
			}
			dropped_item = NULL;
    7662:	2500      	movs	r5, #0
    7664:	e7cd      	b.n	7602 <mpsc_pbuf_alloc+0x1e>
    7666:	461d      	mov	r5, r3
    7668:	e7cb      	b.n	7602 <mpsc_pbuf_alloc+0x1e>
		} else if (wrap) {
    766a:	b128      	cbz	r0, 7678 <mpsc_pbuf_alloc+0x94>
    766c:	9001      	str	r0, [sp, #4]
			add_skip_item(buffer, free_wlen);
    766e:	4620      	mov	r0, r4
    7670:	f7ff ff16 	bl	74a0 <add_skip_item>
			cont = true;
    7674:	9b01      	ldr	r3, [sp, #4]
    7676:	e7e3      	b.n	7640 <mpsc_pbuf_alloc+0x5c>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    7678:	ea58 0309 	orrs.w	r3, r8, r9
    767c:	d017      	beq.n	76ae <mpsc_pbuf_alloc+0xca>
			   !k_is_in_isr()) {
    767e:	f000 fde0 	bl	8242 <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    7682:	b9a0      	cbnz	r0, 76ae <mpsc_pbuf_alloc+0xca>
    7684:	f386 8811 	msr	BASEPRI, r6
    7688:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
    768c:	4642      	mov	r2, r8
    768e:	464b      	mov	r3, r9
    7690:	4658      	mov	r0, fp
    7692:	f7fe fd1b 	bl	60cc <z_impl_k_sem_take>
	__asm__ volatile(
    7696:	f04f 0320 	mov.w	r3, #32
    769a:	f3ef 8611 	mrs	r6, BASEPRI
    769e:	f383 8812 	msr	BASEPRI_MAX, r3
    76a2:	f3bf 8f6f 	isb	sy
			if (err == 0) {
    76a6:	fab0 f380 	clz	r3, r0
    76aa:	095b      	lsrs	r3, r3, #5
    76ac:	e7c8      	b.n	7640 <mpsc_pbuf_alloc+0x5c>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
    76ae:	6922      	ldr	r2, [r4, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
    76b0:	f10d 030b 	add.w	r3, sp, #11
    76b4:	4620      	mov	r0, r4
    76b6:	9903      	ldr	r1, [sp, #12]
    76b8:	f3c2 0240 	ubfx	r2, r2, #1, #1
    76bc:	f7ff ff17 	bl	74ee <drop_item_locked>
			cont = dropped_item != NULL;
    76c0:	1e03      	subs	r3, r0, #0
    76c2:	4605      	mov	r5, r0
    76c4:	bf18      	it	ne
    76c6:	2301      	movne	r3, #1
    76c8:	e7ba      	b.n	7640 <mpsc_pbuf_alloc+0x5c>
		return NULL;
    76ca:	f04f 0a00 	mov.w	sl, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
    76ce:	4650      	mov	r0, sl
    76d0:	b005      	add	sp, #20
    76d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000076d6 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
    76d6:	b570      	push	{r4, r5, r6, lr}
	uint32_t wlen = buffer->get_wlen(item);
    76d8:	6983      	ldr	r3, [r0, #24]
{
    76da:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    76dc:	4608      	mov	r0, r1
{
    76de:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    76e0:	4798      	blx	r3
    76e2:	4602      	mov	r2, r0
    76e4:	f04f 0320 	mov.w	r3, #32
    76e8:	f3ef 8611 	mrs	r6, BASEPRI
    76ec:	f383 8812 	msr	BASEPRI_MAX, r3
    76f0:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
    76f4:	782b      	ldrb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    76f6:	4620      	mov	r0, r4
	item->hdr.valid = 1;
    76f8:	f043 0301 	orr.w	r3, r3, #1
    76fc:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    76fe:	6861      	ldr	r1, [r4, #4]
    7700:	f7ff fec0 	bl	7484 <idx_inc>
    7704:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
    7706:	4620      	mov	r0, r4
    7708:	f7ff fee0 	bl	74cc <max_utilization_update>
	__asm__ volatile(
    770c:	f386 8811 	msr	BASEPRI, r6
    7710:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
    7714:	bd70      	pop	{r4, r5, r6, pc}

00007716 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
    7716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    771a:	4604      	mov	r4, r0
	__asm__ volatile(
    771c:	f04f 0320 	mov.w	r3, #32
    7720:	f3ef 8611 	mrs	r6, BASEPRI
    7724:	f383 8812 	msr	BASEPRI_MAX, r3
    7728:	f3bf 8f6f 	isb	sy
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
    772c:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
    7730:	429f      	cmp	r7, r3
	*res = buffer->size - buffer->tmp_rd_idx;
    7732:	bf88      	it	hi
    7734:	6a23      	ldrhi	r3, [r4, #32]
    7736:	1bdb      	subs	r3, r3, r7
		key = k_spin_lock(&buffer->lock);
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];

		if (!a || is_invalid(item)) {
    7738:	b1f3      	cbz	r3, 7778 <mpsc_pbuf_claim+0x62>
		item = (union mpsc_pbuf_generic *)
    773a:	69e1      	ldr	r1, [r4, #28]
	return !item->hdr.valid && !item->hdr.busy;
    773c:	f811 2027 	ldrb.w	r2, [r1, r7, lsl #2]
		item = (union mpsc_pbuf_generic *)
    7740:	eb01 0887 	add.w	r8, r1, r7, lsl #2
		if (!a || is_invalid(item)) {
    7744:	f012 0303 	ands.w	r3, r2, #3
    7748:	d016      	beq.n	7778 <mpsc_pbuf_claim+0x62>
	if (item->hdr.busy && !item->hdr.valid) {
    774a:	2b02      	cmp	r3, #2
    774c:	d103      	bne.n	7756 <mpsc_pbuf_claim+0x40>
		return item->skip.len;
    774e:	f851 5027 	ldr.w	r5, [r1, r7, lsl #2]
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
    7752:	08ad      	lsrs	r5, r5, #2
    7754:	d115      	bne.n	7782 <mpsc_pbuf_claim+0x6c>
    7756:	07d0      	lsls	r0, r2, #31
				cont = true;
			} else {
				item->hdr.busy = 1;
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
						buffer->get_wlen(item));
    7758:	69a3      	ldr	r3, [r4, #24]
			if (skip || !is_valid(item)) {
    775a:	d50f      	bpl.n	777c <mpsc_pbuf_claim+0x66>
				item->hdr.busy = 1;
    775c:	f042 0202 	orr.w	r2, r2, #2
    7760:	f801 2027 	strb.w	r2, [r1, r7, lsl #2]
					idx_inc(buffer, buffer->tmp_rd_idx,
    7764:	4640      	mov	r0, r8
    7766:	4798      	blx	r3
    7768:	4639      	mov	r1, r7
    776a:	4602      	mov	r2, r0
    776c:	4620      	mov	r0, r4
    776e:	f7ff fe89 	bl	7484 <idx_inc>
		cont = false;
    7772:	2300      	movs	r3, #0
				buffer->tmp_rd_idx =
    7774:	60a0      	str	r0, [r4, #8]
    7776:	e011      	b.n	779c <mpsc_pbuf_claim+0x86>
			item = NULL;
    7778:	4698      	mov	r8, r3
    777a:	e00f      	b.n	779c <mpsc_pbuf_claim+0x86>
					skip ? skip : buffer->get_wlen(item);
    777c:	4640      	mov	r0, r8
    777e:	4798      	blx	r3
    7780:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
    7782:	68a1      	ldr	r1, [r4, #8]
    7784:	462a      	mov	r2, r5
    7786:	4620      	mov	r0, r4
    7788:	f7ff fe7c 	bl	7484 <idx_inc>
					idx_inc(buffer, buffer->rd_idx, inc);
    778c:	68e1      	ldr	r1, [r4, #12]
				buffer->tmp_rd_idx =
    778e:	60a0      	str	r0, [r4, #8]
					idx_inc(buffer, buffer->rd_idx, inc);
    7790:	462a      	mov	r2, r5
    7792:	4620      	mov	r0, r4
    7794:	f7ff fe76 	bl	7484 <idx_inc>
				cont = true;
    7798:	2301      	movs	r3, #1
				buffer->rd_idx =
    779a:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    779c:	f386 8811 	msr	BASEPRI, r6
    77a0:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
    77a4:	2b00      	cmp	r3, #0
    77a6:	d1b9      	bne.n	771c <mpsc_pbuf_claim+0x6>

	return item;
}
    77a8:	4640      	mov	r0, r8
    77aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000077ae <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
    77ae:	b570      	push	{r4, r5, r6, lr}
	uint32_t wlen = buffer->get_wlen(item);
    77b0:	6983      	ldr	r3, [r0, #24]
{
    77b2:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    77b4:	4608      	mov	r0, r1
{
    77b6:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    77b8:	4798      	blx	r3
    77ba:	4602      	mov	r2, r0
	__asm__ volatile(
    77bc:	f04f 0320 	mov.w	r3, #32
    77c0:	f3ef 8611 	mrs	r6, BASEPRI
    77c4:	f383 8812 	msr	BASEPRI_MAX, r3
    77c8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
    77cc:	782b      	ldrb	r3, [r5, #0]
    77ce:	f36f 0300 	bfc	r3, #0, #1
    77d2:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    77d4:	6923      	ldr	r3, [r4, #16]
    77d6:	079b      	lsls	r3, r3, #30
    77d8:	d505      	bpl.n	77e6 <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
    77da:	68e1      	ldr	r1, [r4, #12]
    77dc:	69e3      	ldr	r3, [r4, #28]
    77de:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    77e2:	429d      	cmp	r5, r3
    77e4:	d112      	bne.n	780c <mpsc_pbuf_free+0x5e>
		witem->hdr.busy = 0;
    77e6:	782b      	ldrb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    77e8:	4620      	mov	r0, r4
		witem->hdr.busy = 0;
    77ea:	f36f 0341 	bfc	r3, #1, #1
    77ee:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    77f0:	68e1      	ldr	r1, [r4, #12]
    77f2:	f7ff fe47 	bl	7484 <idx_inc>
    77f6:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    77f8:	f386 8811 	msr	BASEPRI, r6
    77fc:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    7800:	f104 0028 	add.w	r0, r4, #40	; 0x28
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
    7804:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7808:	f7fe bc40 	b.w	608c <z_impl_k_sem_give>
		witem->skip.len = wlen;
    780c:	682b      	ldr	r3, [r5, #0]
    780e:	f360 039f 	bfi	r3, r0, #2, #30
    7812:	602b      	str	r3, [r5, #0]
    7814:	e7f0      	b.n	77f8 <mpsc_pbuf_free+0x4a>

00007816 <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
    7816:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
    781a:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
    781c:	bf8a      	itet	hi
    781e:	6a00      	ldrhi	r0, [r0, #32]
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
    7820:	1ad3      	subls	r3, r2, r3
	*res = buffer->size - buffer->tmp_rd_idx;
    7822:	1ac3      	subhi	r3, r0, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
    7824:	1e18      	subs	r0, r3, #0
    7826:	bf18      	it	ne
    7828:	2001      	movne	r0, #1
    782a:	4770      	bx	lr

0000782c <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    782c:	4770      	bx	lr

0000782e <pm_state_exit_post_ops>:
    782e:	2300      	movs	r3, #0
    7830:	f383 8811 	msr	BASEPRI, r3
    7834:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    7838:	4770      	bx	lr

0000783a <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
    783a:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
    783c:	075b      	lsls	r3, r3, #29
    783e:	d40b      	bmi.n	7858 <log_msg_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    7840:	6803      	ldr	r3, [r0, #0]
    7842:	8840      	ldrh	r0, [r0, #2]
    7844:	f3c3 2349 	ubfx	r3, r3, #9, #10
    7848:	f3c0 00cb 	ubfx	r0, r0, #3, #12
    784c:	4418      	add	r0, r3
    784e:	3017      	adds	r0, #23
    7850:	f020 0007 	bic.w	r0, r0, #7
    7854:	0880      	lsrs	r0, r0, #2
		return log_msg_get_total_wlen(msg->hdr.desc);
    7856:	4770      	bx	lr
	return 0;
    7858:	2000      	movs	r0, #0
}
    785a:	4770      	bx	lr

0000785c <dummy_timestamp>:
}
    785c:	2000      	movs	r0, #0
    785e:	4770      	bx	lr

00007860 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    7860:	f000 ba60 	b.w	7d24 <sys_clock_cycle_get_32>

00007864 <notify_drop>:
	z_log_dropped(true);
    7864:	2001      	movs	r0, #1
    7866:	f7fa b877 	b.w	1958 <z_log_dropped>

0000786a <z_log_get_tag>:
}
    786a:	2000      	movs	r0, #0
    786c:	4770      	bx	lr

0000786e <z_cbprintf_cpy>:
{
    786e:	b570      	push	{r4, r5, r6, lr}
    7870:	4603      	mov	r3, r0
    7872:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
    7874:	e9d2 2001 	ldrd	r2, r0, [r2, #4]
    7878:	1a12      	subs	r2, r2, r0
    787a:	428a      	cmp	r2, r1
{
    787c:	460c      	mov	r4, r1
	if ((desc->size - desc->off) < len) {
    787e:	d30a      	bcc.n	7896 <z_cbprintf_cpy+0x28>
	memcpy(&((uint8_t *)desc->buf)[desc->off], (void *)buf, len);
    7880:	682e      	ldr	r6, [r5, #0]
    7882:	460a      	mov	r2, r1
    7884:	4430      	add	r0, r6
    7886:	4619      	mov	r1, r3
    7888:	f000 f8b8 	bl	79fc <memcpy>
	return len;
    788c:	4620      	mov	r0, r4
	desc->off += len;
    788e:	68ab      	ldr	r3, [r5, #8]
    7890:	4423      	add	r3, r4
    7892:	60ab      	str	r3, [r5, #8]
}
    7894:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
    7896:	f06f 001b 	mvn.w	r0, #27
    789a:	e7fb      	b.n	7894 <z_cbprintf_cpy+0x26>

0000789c <z_log_msg_finalize>:
{
    789c:	b570      	push	{r4, r5, r6, lr}
    789e:	460e      	mov	r6, r1
    78a0:	4615      	mov	r5, r2
    78a2:	4619      	mov	r1, r3
	if (!msg) {
    78a4:	4604      	mov	r4, r0
    78a6:	b918      	cbnz	r0, 78b0 <z_log_msg_finalize+0x14>
}
    78a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
    78ac:	f7fa b854 	b.w	1958 <z_log_dropped>
	if (data) {
    78b0:	b143      	cbz	r3, 78c4 <z_log_msg_finalize+0x28>
		uint8_t *d = msg->data + desc.package_len;
    78b2:	f100 0310 	add.w	r3, r0, #16
    78b6:	f3c2 2049 	ubfx	r0, r2, #9, #10
		memcpy(d, data, desc.data_len);
    78ba:	4418      	add	r0, r3
    78bc:	f3c2 42cb 	ubfx	r2, r2, #19, #12
    78c0:	f000 f89c 	bl	79fc <memcpy>
	z_log_msg_commit(msg);
    78c4:	4620      	mov	r0, r4
	msg->hdr.source = source;
    78c6:	e9c4 5600 	strd	r5, r6, [r4]
}
    78ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
    78ce:	f7fa b971 	b.w	1bb4 <z_log_msg_commit>

000078d2 <buffer_write>:
{
    78d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    78d4:	4606      	mov	r6, r0
    78d6:	460d      	mov	r5, r1
    78d8:	4614      	mov	r4, r2
    78da:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
    78dc:	4621      	mov	r1, r4
    78de:	4628      	mov	r0, r5
    78e0:	463a      	mov	r2, r7
    78e2:	47b0      	blx	r6
	} while (len != 0);
    78e4:	1a24      	subs	r4, r4, r0
		buf += processed;
    78e6:	4405      	add	r5, r0
	} while (len != 0);
    78e8:	d1f8      	bne.n	78dc <buffer_write+0xa>
}
    78ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000078ec <cbvprintf>:
{
    78ec:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    78ee:	2400      	movs	r4, #0
    78f0:	9400      	str	r4, [sp, #0]
    78f2:	f7f9 fa77 	bl	de4 <z_cbvprintf_impl>
}
    78f6:	b002      	add	sp, #8
    78f8:	bd10      	pop	{r4, pc}

000078fa <log_output_flush>:
		     output->control_block->offset,
    78fa:	6842      	ldr	r2, [r0, #4]
{
    78fc:	b510      	push	{r4, lr}
	buffer_write(output->func, output->buf,
    78fe:	e9d2 2300 	ldrd	r2, r3, [r2]
{
    7902:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
    7904:	6881      	ldr	r1, [r0, #8]
    7906:	6800      	ldr	r0, [r0, #0]
    7908:	f7ff ffe3 	bl	78d2 <buffer_write>
	output->control_block->offset = 0;
    790c:	2200      	movs	r2, #0
    790e:	6863      	ldr	r3, [r4, #4]
    7910:	601a      	str	r2, [r3, #0]
}
    7912:	bd10      	pop	{r4, pc}

00007914 <out_func>:
{
    7914:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
    7916:	684b      	ldr	r3, [r1, #4]
{
    7918:	4605      	mov	r5, r0
	if (out_ctx->control_block->offset == out_ctx->size) {
    791a:	681a      	ldr	r2, [r3, #0]
    791c:	68cb      	ldr	r3, [r1, #12]
{
    791e:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    7920:	429a      	cmp	r2, r3
    7922:	d102      	bne.n	792a <out_func+0x16>
		log_output_flush(out_ctx);
    7924:	4608      	mov	r0, r1
    7926:	f7ff ffe8 	bl	78fa <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    792a:	6863      	ldr	r3, [r4, #4]
    792c:	e8d3 2fef 	ldaex	r2, [r3]
    7930:	1c51      	adds	r1, r2, #1
    7932:	e8c3 1fe0 	stlex	r0, r1, [r3]
    7936:	2800      	cmp	r0, #0
    7938:	d1f8      	bne.n	792c <out_func+0x18>
	out_ctx->buf[idx] = (uint8_t)c;
    793a:	68a3      	ldr	r3, [r4, #8]
}
    793c:	2000      	movs	r0, #0
	out_ctx->buf[idx] = (uint8_t)c;
    793e:	549d      	strb	r5, [r3, r2]
}
    7940:	bd38      	pop	{r3, r4, r5, pc}

00007942 <cr_out_func>:
{
    7942:	b538      	push	{r3, r4, r5, lr}
    7944:	4605      	mov	r5, r0
    7946:	460c      	mov	r4, r1
	out_func(c, ctx);
    7948:	f7ff ffe4 	bl	7914 <out_func>
	if (c == '\n') {
    794c:	2d0a      	cmp	r5, #10
    794e:	d103      	bne.n	7958 <cr_out_func+0x16>
		out_func((int)'\r', ctx);
    7950:	4621      	mov	r1, r4
    7952:	200d      	movs	r0, #13
    7954:	f7ff ffde 	bl	7914 <out_func>
}
    7958:	2000      	movs	r0, #0
    795a:	bd38      	pop	{r3, r4, r5, pc}

0000795c <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
    795c:	2000      	movs	r0, #0
{
    795e:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    7960:	f7f9 fe06 	bl	1570 <sys_reboot>

00007964 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    7964:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    7966:	6800      	ldr	r0, [r0, #0]
    7968:	f7fa be36 	b.w	25d8 <z_arm_fatal_error>

0000796c <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    796c:	2100      	movs	r1, #0
    796e:	2001      	movs	r0, #1
    7970:	f7fa be32 	b.w	25d8 <z_arm_fatal_error>

00007974 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    7974:	b508      	push	{r3, lr}
	handler();
    7976:	f7fa fedd 	bl	2734 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    797a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    797e:	f7fa bf9f 	b.w	28c0 <z_arm_exc_exit>

00007982 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    7982:	6e43      	ldr	r3, [r0, #100]	; 0x64
    7984:	f383 880b 	msr	PSPLIM, r3
}
    7988:	4770      	bx	lr

0000798a <z_log_msg_static_create.constprop.0>:
    798a:	2300      	movs	r3, #0
    798c:	f7fa b97c 	b.w	1c88 <z_impl_z_log_msg_static_create>

00007990 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    7990:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
    7994:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    7998:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
    799a:	bf08      	it	eq
    799c:	f06f 0015 	mvneq.w	r0, #21
    79a0:	4770      	bx	lr

000079a2 <mpu_configure_region>:
{
    79a2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	region_conf.base = new_region->start;
    79a4:	680d      	ldr	r5, [r1, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    79a6:	684b      	ldr	r3, [r1, #4]
	p_attr->rbar = attr->rbar &
    79a8:	890a      	ldrh	r2, [r1, #8]
    79aa:	894e      	ldrh	r6, [r1, #10]
	region_conf.base = new_region->start;
    79ac:	9500      	str	r5, [sp, #0]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    79ae:	3b01      	subs	r3, #1
    79b0:	f025 051f 	bic.w	r5, r5, #31
	p_attr->rbar = attr->rbar &
    79b4:	f002 021f 	and.w	r2, r2, #31
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    79b8:	442b      	add	r3, r5
	p_attr->rbar = attr->rbar &
    79ba:	ea42 1246 	orr.w	r2, r2, r6, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    79be:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    79c2:	2807      	cmp	r0, #7
	p_attr->rbar = attr->rbar &
    79c4:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    79c8:	9303      	str	r3, [sp, #12]
    79ca:	d903      	bls.n	79d4 <mpu_configure_region+0x32>
    79cc:	f7fb fb3a 	bl	3044 <region_allocate_and_init.part.0>
}
    79d0:	b004      	add	sp, #16
    79d2:	bd70      	pop	{r4, r5, r6, pc}
	region_init(index, region_conf);
    79d4:	4669      	mov	r1, sp
    79d6:	f7fb fb1b 	bl	3010 <region_init>
	return region_allocate_and_init(index,
    79da:	e7f9      	b.n	79d0 <mpu_configure_region+0x2e>

000079dc <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    79dc:	4603      	mov	r3, r0
	size_t n = 0;
    79de:	2000      	movs	r0, #0

	while (*s != '\0') {
    79e0:	5c1a      	ldrb	r2, [r3, r0]
    79e2:	b902      	cbnz	r2, 79e6 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    79e4:	4770      	bx	lr
		n++;
    79e6:	3001      	adds	r0, #1
    79e8:	e7fa      	b.n	79e0 <strlen+0x4>

000079ea <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    79ea:	4603      	mov	r3, r0
	size_t n = 0;
    79ec:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    79ee:	5c1a      	ldrb	r2, [r3, r0]
    79f0:	b10a      	cbz	r2, 79f6 <strnlen+0xc>
    79f2:	4288      	cmp	r0, r1
    79f4:	d100      	bne.n	79f8 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    79f6:	4770      	bx	lr
		n++;
    79f8:	3001      	adds	r0, #1
    79fa:	e7f8      	b.n	79ee <strnlen+0x4>

000079fc <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    79fc:	b510      	push	{r4, lr}
    79fe:	1e43      	subs	r3, r0, #1
    7a00:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    7a02:	4291      	cmp	r1, r2
    7a04:	d100      	bne.n	7a08 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    7a06:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    7a08:	f811 4b01 	ldrb.w	r4, [r1], #1
    7a0c:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    7a10:	e7f7      	b.n	7a02 <memcpy+0x6>

00007a12 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    7a12:	4603      	mov	r3, r0
	unsigned char c_byte = (unsigned char)c;
    7a14:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    7a16:	4402      	add	r2, r0
    7a18:	4293      	cmp	r3, r2
    7a1a:	d100      	bne.n	7a1e <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    7a1c:	4770      	bx	lr
		*(d_byte++) = c_byte;
    7a1e:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    7a22:	e7f9      	b.n	7a18 <memset+0x6>

00007a24 <_stdout_hook_default>:
}
    7a24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7a28:	4770      	bx	lr

00007a2a <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    7a2a:	220c      	movs	r2, #12
    7a2c:	6903      	ldr	r3, [r0, #16]
    7a2e:	b2c9      	uxtb	r1, r1
    7a30:	fb01 3302 	mla	r3, r1, r2, r3
    7a34:	6f98      	ldr	r0, [r3, #120]	; 0x78
}
    7a36:	f000 0007 	and.w	r0, r0, #7
    7a3a:	4770      	bx	lr

00007a3c <set_on_state>:
	__asm__ volatile(
    7a3c:	f04f 0320 	mov.w	r3, #32
    7a40:	f3ef 8211 	mrs	r2, BASEPRI
    7a44:	f383 8812 	msr	BASEPRI_MAX, r3
    7a48:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    7a4c:	6803      	ldr	r3, [r0, #0]
    7a4e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    7a52:	f043 0302 	orr.w	r3, r3, #2
    7a56:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    7a58:	f382 8811 	msr	BASEPRI, r2
    7a5c:	f3bf 8f6f 	isb	sy
}
    7a60:	4770      	bx	lr

00007a62 <stop>:
{
    7a62:	4603      	mov	r3, r0
    7a64:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
    7a66:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    7a68:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    7a6a:	f04f 0420 	mov.w	r4, #32
    7a6e:	f3ef 8611 	mrs	r6, BASEPRI
    7a72:	f384 8812 	msr	BASEPRI_MAX, r4
    7a76:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    7a7a:	250c      	movs	r5, #12
    7a7c:	fb05 0401 	mla	r4, r5, r1, r0
    7a80:	6fa4      	ldr	r4, [r4, #120]	; 0x78
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    7a82:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    7a86:	d001      	beq.n	7a8c <stop+0x2a>
    7a88:	42a2      	cmp	r2, r4
    7a8a:	d111      	bne.n	7ab0 <stop+0x4e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    7a8c:	2201      	movs	r2, #1
    7a8e:	fb05 0001 	mla	r0, r5, r1, r0
    7a92:	6782      	str	r2, [r0, #120]	; 0x78
	int err = 0;
    7a94:	2000      	movs	r0, #0
	__asm__ volatile(
    7a96:	f386 8811 	msr	BASEPRI, r6
    7a9a:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    7a9e:	b930      	cbnz	r0, 7aae <stop+0x4c>
	get_sub_config(dev, type)->stop();
    7aa0:	220c      	movs	r2, #12
    7aa2:	685b      	ldr	r3, [r3, #4]
    7aa4:	fb02 3101 	mla	r1, r2, r1, r3
    7aa8:	684b      	ldr	r3, [r1, #4]
    7aaa:	4798      	blx	r3
	return 0;
    7aac:	2000      	movs	r0, #0
}
    7aae:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
    7ab0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7ab4:	e7ef      	b.n	7a96 <stop+0x34>

00007ab6 <api_stop>:
	return stop(dev, subsys, CTX_API);
    7ab6:	2280      	movs	r2, #128	; 0x80
    7ab8:	f7ff bfd3 	b.w	7a62 <stop>

00007abc <async_start>:
{
    7abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7abe:	9f06      	ldr	r7, [sp, #24]
    7ac0:	4605      	mov	r5, r0
	struct nrf_clock_control_data *data = dev->data;
    7ac2:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    7ac4:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    7ac6:	f04f 0020 	mov.w	r0, #32
    7aca:	f3ef 8c11 	mrs	ip, BASEPRI
    7ace:	f380 8812 	msr	BASEPRI_MAX, r0
    7ad2:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    7ad6:	260c      	movs	r6, #12
    7ad8:	fb06 4601 	mla	r6, r6, r1, r4
    7adc:	6fb0      	ldr	r0, [r6, #120]	; 0x78
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    7ade:	f000 0e07 	and.w	lr, r0, #7
    7ae2:	f1be 0f01 	cmp.w	lr, #1
    7ae6:	d110      	bne.n	7b0a <async_start+0x4e>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    7ae8:	67b7      	str	r7, [r6, #120]	; 0x78
	int err = 0;
    7aea:	2600      	movs	r6, #0
	__asm__ volatile(
    7aec:	f38c 8811 	msr	BASEPRI, ip
    7af0:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    7af4:	b93e      	cbnz	r6, 7b06 <async_start+0x4a>
	subdata->cb = cb;
    7af6:	200c      	movs	r0, #12
    7af8:	4341      	muls	r1, r0
    7afa:	440c      	add	r4, r1
	subdata->user_data = user_data;
    7afc:	e9c4 231c 	strd	r2, r3, [r4, #112]	; 0x70
	 get_sub_config(dev, type)->start();
    7b00:	686b      	ldr	r3, [r5, #4]
    7b02:	585b      	ldr	r3, [r3, r1]
    7b04:	4798      	blx	r3
}
    7b06:	4630      	mov	r0, r6
    7b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    7b0a:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
    7b0e:	4287      	cmp	r7, r0
    7b10:	bf14      	ite	ne
    7b12:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
    7b16:	f06f 0677 	mvneq.w	r6, #119	; 0x77
    7b1a:	e7e7      	b.n	7aec <async_start+0x30>

00007b1c <api_start>:
{
    7b1c:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    7b1e:	2480      	movs	r4, #128	; 0x80
    7b20:	9400      	str	r4, [sp, #0]
    7b22:	f7ff ffcb 	bl	7abc <async_start>
}
    7b26:	b002      	add	sp, #8
    7b28:	bd10      	pop	{r4, pc}

00007b2a <onoff_started_callback>:
{
    7b2a:	b410      	push	{r4}
	notify(mgr, 0);
    7b2c:	241c      	movs	r4, #28
	return &data->mgr[type];
    7b2e:	6900      	ldr	r0, [r0, #16]
    7b30:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    7b32:	fb03 0004 	mla	r0, r3, r4, r0
    7b36:	2100      	movs	r1, #0
}
    7b38:	bc10      	pop	{r4}
	notify(mgr, 0);
    7b3a:	4710      	bx	r2

00007b3c <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    7b3c:	2003      	movs	r0, #3
    7b3e:	f000 ba75 	b.w	802c <nrfx_clock_start>

00007b42 <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
    7b42:	2002      	movs	r0, #2
    7b44:	f000 ba72 	b.w	802c <nrfx_clock_start>

00007b48 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    7b48:	2000      	movs	r0, #0
    7b4a:	f000 ba6f 	b.w	802c <nrfx_clock_start>

00007b4e <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    7b4e:	2003      	movs	r0, #3
    7b50:	f000 bacc 	b.w	80ec <nrfx_clock_stop>

00007b54 <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
    7b54:	2002      	movs	r0, #2
    7b56:	f000 bac9 	b.w	80ec <nrfx_clock_stop>

00007b5a <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    7b5a:	2000      	movs	r0, #0
    7b5c:	f000 bac6 	b.w	80ec <nrfx_clock_stop>

00007b60 <blocking_start_callback>:
{
    7b60:	4610      	mov	r0, r2
    7b62:	f7fe ba93 	b.w	608c <z_impl_k_sem_give>

00007b66 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7b66:	6843      	ldr	r3, [r0, #4]
}
    7b68:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7b6a:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    7b6c:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
    7b6e:	600b      	str	r3, [r1, #0]
}
    7b70:	4770      	bx	lr

00007b72 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7b72:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
    7b74:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7b78:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
    7b7a:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    7b7e:	6098      	str	r0, [r3, #8]
}
    7b80:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    7b82:	60d9      	str	r1, [r3, #12]
    7b84:	4770      	bx	lr

00007b86 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7b86:	6843      	ldr	r3, [r0, #4]
}
    7b88:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7b8a:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    7b8c:	6099      	str	r1, [r3, #8]
}
    7b8e:	4770      	bx	lr

00007b90 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7b90:	6843      	ldr	r3, [r0, #4]
}
    7b92:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7b94:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    7b96:	60d9      	str	r1, [r3, #12]
}
    7b98:	4770      	bx	lr

00007b9a <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7b9a:	6843      	ldr	r3, [r0, #4]
    7b9c:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    7b9e:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
    7ba0:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    7ba4:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    7ba6:	6090      	str	r0, [r2, #8]
}
    7ba8:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    7baa:	60d3      	str	r3, [r2, #12]
    7bac:	4770      	bx	lr

00007bae <gpio_nrfx_manage_callback>:
	return port->data;
    7bae:	6903      	ldr	r3, [r0, #16]
{
    7bb0:	b530      	push	{r4, r5, lr}
	return list->head;
    7bb2:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    7bb4:	b158      	cbz	r0, 7bce <gpio_nrfx_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    7bb6:	2400      	movs	r4, #0
    7bb8:	4281      	cmp	r1, r0
    7bba:	d112      	bne.n	7be2 <gpio_nrfx_manage_callback+0x34>
	return node->next;
    7bbc:	6808      	ldr	r0, [r1, #0]
	return list->tail;
    7bbe:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
    7bc0:	b954      	cbnz	r4, 7bd8 <gpio_nrfx_manage_callback+0x2a>
    7bc2:	428d      	cmp	r5, r1
	list->head = node;
    7bc4:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    7bc6:	d100      	bne.n	7bca <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    7bc8:	6098      	str	r0, [r3, #8]
	parent->next = child;
    7bca:	2000      	movs	r0, #0
    7bcc:	6008      	str	r0, [r1, #0]
	if (set) {
    7bce:	b96a      	cbnz	r2, 7bec <gpio_nrfx_manage_callback+0x3e>
	return 0;
    7bd0:	2000      	movs	r0, #0
}
    7bd2:	bd30      	pop	{r4, r5, pc}
    7bd4:	4628      	mov	r0, r5
    7bd6:	e7ef      	b.n	7bb8 <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
    7bd8:	428d      	cmp	r5, r1
	parent->next = child;
    7bda:	6020      	str	r0, [r4, #0]
	list->tail = node;
    7bdc:	bf08      	it	eq
    7bde:	609c      	streq	r4, [r3, #8]
}
    7be0:	e7f3      	b.n	7bca <gpio_nrfx_manage_callback+0x1c>
	return node->next;
    7be2:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    7be4:	4604      	mov	r4, r0
    7be6:	2d00      	cmp	r5, #0
    7be8:	d1f4      	bne.n	7bd4 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    7bea:	b13a      	cbz	r2, 7bfc <gpio_nrfx_manage_callback+0x4e>
	parent->next = child;
    7bec:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    7bee:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
    7bf0:	600a      	str	r2, [r1, #0]
	list->head = node;
    7bf2:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    7bf4:	2800      	cmp	r0, #0
    7bf6:	d1eb      	bne.n	7bd0 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    7bf8:	6099      	str	r1, [r3, #8]
}
    7bfa:	e7ea      	b.n	7bd2 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    7bfc:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    7c00:	e7e7      	b.n	7bd2 <gpio_nrfx_manage_callback+0x24>

00007c02 <z_log_msg_static_create.constprop.0>:
    7c02:	2300      	movs	r3, #0
    7c04:	f7fa b840 	b.w	1c88 <z_impl_z_log_msg_static_create>

00007c08 <clock_started_callback>:
	if (!drv_data->active) {
    7c08:	f891 3041 	ldrb.w	r3, [r1, #65]	; 0x41
    7c0c:	b91b      	cbnz	r3, 7c16 <clock_started_callback+0xe>
		(void)onoff_release(drv_data->clk_mgr);
    7c0e:	f851 0c04 	ldr.w	r0, [r1, #-4]
    7c12:	f7ff baab 	b.w	716c <onoff_release>
		(void)start_transfer(drv_data);
    7c16:	1f08      	subs	r0, r1, #4
    7c18:	f7fb beee 	b.w	39f8 <start_transfer>

00007c1c <uarte_nrfx_config_get>:
{
    7c1c:	460b      	mov	r3, r1
	*cfg = data->uart_config;
    7c1e:	6902      	ldr	r2, [r0, #16]
    7c20:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    7c24:	e883 0003 	stmia.w	r3, {r0, r1}
}
    7c28:	2000      	movs	r0, #0
    7c2a:	4770      	bx	lr

00007c2c <uarte_nrfx_err_check>:
	return config->uarte_regs;
    7c2c:	6843      	ldr	r3, [r0, #4]
    7c2e:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    7c30:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    7c34:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    7c38:	4770      	bx	lr

00007c3a <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    7c3a:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
    7c3c:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    7c3e:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7c40:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    7c44:	b150      	cbz	r0, 7c5c <uarte_nrfx_poll_in+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7c46:	2000      	movs	r0, #0
	*c = *data->rx_data;
    7c48:	6952      	ldr	r2, [r2, #20]
    7c4a:	7812      	ldrb	r2, [r2, #0]
    7c4c:	700a      	strb	r2, [r1, #0]
    7c4e:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    7c52:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7c56:	2201      	movs	r2, #1
    7c58:	601a      	str	r2, [r3, #0]
	return 0;
    7c5a:	4770      	bx	lr
		return -1;
    7c5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    7c60:	4770      	bx	lr

00007c62 <is_tx_ready.isra.0>:
	return config->uarte_regs;
    7c62:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    7c64:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7c66:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    7c6a:	b940      	cbnz	r0, 7c7e <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    7c6c:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    7c6e:	079b      	lsls	r3, r3, #30
    7c70:	d406      	bmi.n	7c80 <is_tx_ready.isra.0+0x1e>
    7c72:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    7c76:	3800      	subs	r0, #0
    7c78:	bf18      	it	ne
    7c7a:	2001      	movne	r0, #1
    7c7c:	4770      	bx	lr
    7c7e:	2001      	movs	r0, #1
}
    7c80:	4770      	bx	lr

00007c82 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
    7c82:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    7c84:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    7c86:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    7c8a:	05c9      	lsls	r1, r1, #23
    7c8c:	d518      	bpl.n	7cc0 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7c8e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    7c92:	b1a9      	cbz	r1, 7cc0 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    7c94:	f04f 0020 	mov.w	r0, #32
    7c98:	f3ef 8111 	mrs	r1, BASEPRI
    7c9c:	f380 8812 	msr	BASEPRI_MAX, r0
    7ca0:	f3bf 8f6f 	isb	sy
    7ca4:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    7ca8:	b130      	cbz	r0, 7cb8 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7caa:	2000      	movs	r0, #0
    7cac:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    7cb0:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7cb4:	2001      	movs	r0, #1
    7cb6:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
    7cb8:	f381 8811 	msr	BASEPRI, r1
    7cbc:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    7cc0:	6852      	ldr	r2, [r2, #4]
    7cc2:	06d2      	lsls	r2, r2, #27
    7cc4:	d515      	bpl.n	7cf2 <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
    7cc6:	f04f 0120 	mov.w	r1, #32
    7cca:	f3ef 8211 	mrs	r2, BASEPRI
    7cce:	f381 8812 	msr	BASEPRI_MAX, r1
    7cd2:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7cd6:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    7cda:	b111      	cbz	r1, 7ce2 <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    7cdc:	2100      	movs	r1, #0
    7cde:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    7ce2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    7ce6:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    7cea:	f382 8811 	msr	BASEPRI, r2
    7cee:	f3bf 8f6f 	isb	sy
}
    7cf2:	4770      	bx	lr

00007cf4 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    7cf4:	4770      	bx	lr

00007cf6 <event_clear>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    7cf6:	2200      	movs	r2, #0
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    7cf8:	f100 0350 	add.w	r3, r0, #80	; 0x50
    7cfc:	009b      	lsls	r3, r3, #2
    7cfe:	b29b      	uxth	r3, r3
    7d00:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    7d04:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    7d08:	601a      	str	r2, [r3, #0]
    7d0a:	681b      	ldr	r3, [r3, #0]
}
    7d0c:	4770      	bx	lr

00007d0e <z_nrf_rtc_timer_capture_task_address_get>:
	if (chan == 0) {
    7d0e:	b130      	cbz	r0, 7d1e <z_nrf_rtc_timer_capture_task_address_get+0x10>
	nrf_rtc_task_t task = offsetof(NRF_RTC_Type, TASKS_CAPTURE[chan]);
    7d10:	3010      	adds	r0, #16
    7d12:	0080      	lsls	r0, r0, #2
    return (uint32_t)p_reg + task;
    7d14:	b2c0      	uxtb	r0, r0
    7d16:	f100 2050 	add.w	r0, r0, #1342197760	; 0x50005000
    7d1a:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
}
    7d1e:	4770      	bx	lr

00007d20 <z_nrf_rtc_timer_set>:
	return compare_set(chan, target_time, handler, user_data);
    7d20:	f7fc bb60 	b.w	43e4 <compare_set>

00007d24 <sys_clock_cycle_get_32>:
{
    7d24:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    7d26:	f7fc fb3b 	bl	43a0 <z_nrf_rtc_timer_read>
}
    7d2a:	bd08      	pop	{r3, pc}

00007d2c <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    7d2c:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    7d2e:	6843      	ldr	r3, [r0, #4]
    7d30:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    7d32:	7a03      	ldrb	r3, [r0, #8]
    7d34:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    7d38:	3b01      	subs	r3, #1
    7d3a:	00db      	lsls	r3, r3, #3
    7d3c:	6845      	ldr	r5, [r0, #4]
    7d3e:	6814      	ldr	r4, [r2, #0]
    7d40:	441d      	add	r5, r3
    7d42:	42ac      	cmp	r4, r5
    7d44:	d902      	bls.n	7d4c <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
    7d46:	f06f 0001 	mvn.w	r0, #1
}
    7d4a:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    7d4c:	7965      	ldrb	r5, [r4, #5]
    7d4e:	428d      	cmp	r5, r1
    7d50:	d002      	beq.n	7d58 <pinctrl_lookup_state+0x2c>
		(*state)++;
    7d52:	3408      	adds	r4, #8
    7d54:	6014      	str	r4, [r2, #0]
    7d56:	e7f1      	b.n	7d3c <pinctrl_lookup_state+0x10>
			return 0;
    7d58:	2000      	movs	r0, #0
    7d5a:	e7f6      	b.n	7d4a <pinctrl_lookup_state+0x1e>

00007d5c <nrf_gpio_pin_write>:
    if (value == 0)
    7d5c:	b909      	cbnz	r1, 7d62 <nrf_gpio_pin_write+0x6>
        nrf_gpio_pin_clear(pin_number);
    7d5e:	f7fc bd0f 	b.w	4780 <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
    7d62:	f7fc bd43 	b.w	47ec <nrf_gpio_pin_set>

00007d66 <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    7d66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7d6a:	4616      	mov	r6, r2
    7d6c:	4605      	mov	r5, r0
    7d6e:	eb00 0781 	add.w	r7, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    7d72:	42af      	cmp	r7, r5
    7d74:	d102      	bne.n	7d7c <pinctrl_configure_pins+0x16>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    7d76:	2000      	movs	r0, #0
}
    7d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		__unused nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    7d7c:	682c      	ldr	r4, [r5, #0]
		switch (NRF_GET_FUN(pins[i])) {
    7d7e:	0c23      	lsrs	r3, r4, #16
		__unused nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    7d80:	f3c4 2803 	ubfx	r8, r4, #8, #4
		switch (NRF_GET_FUN(pins[i])) {
    7d84:	2b22      	cmp	r3, #34	; 0x22
    7d86:	f200 80a1 	bhi.w	7ecc <pinctrl_configure_pins+0x166>
    7d8a:	e8df f003 	tbb	[pc, r3]
    7d8e:	1e12      	.short	0x1e12
    7d90:	3a294424 	.word	0x3a294424
    7d94:	9f9f9f44 	.word	0x9f9f9f44
    7d98:	9f55499f 	.word	0x9f55499f
    7d9c:	9f9f9f9f 	.word	0x9f9f9f9f
    7da0:	5f5a9f9f 	.word	0x5f5a9f9f
    7da4:	7a757064 	.word	0x7a757064
    7da8:	7f9f9f9f 	.word	0x7f9f9f9f
    7dac:	95908b86 	.word	0x95908b86
    7db0:	9a          	.byte	0x9a
    7db1:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
    7db2:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    7db6:	f8c6 450c 	str.w	r4, [r6, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    7dba:	6828      	ldr	r0, [r5, #0]
    7dbc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    7dc0:	f7fc fd14 	bl	47ec <nrf_gpio_pin_set>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    7dc4:	4643      	mov	r3, r8
    7dc6:	2201      	movs	r2, #1
    7dc8:	e015      	b.n	7df6 <pinctrl_configure_pins+0x90>
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
    7dca:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    7dce:	f8c6 4514 	str.w	r4, [r6, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    7dd2:	4643      	mov	r3, r8
    7dd4:	e02d      	b.n	7e32 <pinctrl_configure_pins+0xcc>
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
    7dd6:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    7dda:	f8c6 4508 	str.w	r4, [r6, #1288]	; 0x508
    7dde:	e7ec      	b.n	7dba <pinctrl_configure_pins+0x54>
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
    7de0:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    7de4:	f8c6 4508 	str.w	r4, [r6, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    7de8:	6828      	ldr	r0, [r5, #0]
        nrf_gpio_pin_clear(pin_number);
    7dea:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    7dee:	f7fc fcc7 	bl	4780 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    7df2:	4643      	mov	r3, r8
    7df4:	2200      	movs	r2, #0
    7df6:	2101      	movs	r1, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    7df8:	6828      	ldr	r0, [r5, #0]
    7dfa:	f7fc fcd1 	bl	47a0 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    7dfe:	3504      	adds	r5, #4
    7e00:	e7b7      	b.n	7d72 <pinctrl_configure_pins+0xc>
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
    7e02:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    7e06:	f8c6 450c 	str.w	r4, [r6, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    7e0a:	6828      	ldr	r0, [r5, #0]
    7e0c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    7e10:	f7fc fcb6 	bl	4780 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    7e14:	e7d6      	b.n	7dc4 <pinctrl_configure_pins+0x5e>
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
    7e16:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    7e1a:	f8c6 4510 	str.w	r4, [r6, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    7e1e:	e7d8      	b.n	7dd2 <pinctrl_configure_pins+0x6c>
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
    7e20:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    7e24:	f8c6 4508 	str.w	r4, [r6, #1288]	; 0x508
				drive = NRF_DRIVE_S0D1;
    7e28:	f1b8 0f00 	cmp.w	r8, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    7e2c:	bf14      	ite	ne
    7e2e:	4643      	movne	r3, r8
    7e30:	2306      	moveq	r3, #6
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    7e32:	2200      	movs	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    7e34:	2100      	movs	r1, #0
    7e36:	e7df      	b.n	7df8 <pinctrl_configure_pins+0x92>
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
    7e38:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    7e3c:	f8c6 450c 	str.w	r4, [r6, #1292]	; 0x50c
    7e40:	e7f2      	b.n	7e28 <pinctrl_configure_pins+0xc2>
			NRF_PSEL_PDM(reg, CLK) = NRF_GET_PIN(pins[i]);
    7e42:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    7e46:	f8c6 4540 	str.w	r4, [r6, #1344]	; 0x540
    7e4a:	e7de      	b.n	7e0a <pinctrl_configure_pins+0xa4>
			NRF_PSEL_PDM(reg, DIN) = NRF_GET_PIN(pins[i]);
    7e4c:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    7e50:	f8c6 4544 	str.w	r4, [r6, #1348]	; 0x544
    7e54:	e7bd      	b.n	7dd2 <pinctrl_configure_pins+0x6c>
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
    7e56:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    7e5a:	f8c6 4560 	str.w	r4, [r6, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    7e5e:	6828      	ldr	r0, [r5, #0]
    7e60:	f3c0 3140 	ubfx	r1, r0, #13, #1
    7e64:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    7e68:	f7ff ff78 	bl	7d5c <nrf_gpio_pin_write>
    7e6c:	e7aa      	b.n	7dc4 <pinctrl_configure_pins+0x5e>
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
    7e6e:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    7e72:	f8c6 4564 	str.w	r4, [r6, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    7e76:	e7f2      	b.n	7e5e <pinctrl_configure_pins+0xf8>
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
    7e78:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    7e7c:	f8c6 4568 	str.w	r4, [r6, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    7e80:	e7ed      	b.n	7e5e <pinctrl_configure_pins+0xf8>
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
    7e82:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    7e86:	f8c6 456c 	str.w	r4, [r6, #1388]	; 0x56c
    7e8a:	e7e8      	b.n	7e5e <pinctrl_configure_pins+0xf8>
			NRF_PSEL_QSPI(reg, SCK) = NRF_GET_PIN(pins[i]);
    7e8c:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    7e90:	f8c6 4524 	str.w	r4, [r6, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    7e94:	4643      	mov	r3, r8
    7e96:	2201      	movs	r2, #1
    7e98:	e7cc      	b.n	7e34 <pinctrl_configure_pins+0xce>
			NRF_PSEL_QSPI(reg, CSN) = NRF_GET_PIN(pins[i]);
    7e9a:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    7e9e:	f8c6 4528 	str.w	r4, [r6, #1320]	; 0x528
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    7ea2:	e7f7      	b.n	7e94 <pinctrl_configure_pins+0x12e>
			NRF_PSEL_QSPI(reg, IO0) = NRF_GET_PIN(pins[i]);
    7ea4:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    7ea8:	f8c6 4530 	str.w	r4, [r6, #1328]	; 0x530
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    7eac:	e7f2      	b.n	7e94 <pinctrl_configure_pins+0x12e>
			NRF_PSEL_QSPI(reg, IO1) = NRF_GET_PIN(pins[i]);
    7eae:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    7eb2:	f8c6 4534 	str.w	r4, [r6, #1332]	; 0x534
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    7eb6:	e7ed      	b.n	7e94 <pinctrl_configure_pins+0x12e>
			NRF_PSEL_QSPI(reg, IO2) = NRF_GET_PIN(pins[i]);
    7eb8:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    7ebc:	f8c6 4538 	str.w	r4, [r6, #1336]	; 0x538
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    7ec0:	e7e8      	b.n	7e94 <pinctrl_configure_pins+0x12e>
			NRF_PSEL_QSPI(reg, IO3) = NRF_GET_PIN(pins[i]);
    7ec2:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    7ec6:	f8c6 453c 	str.w	r4, [r6, #1340]	; 0x53c
    7eca:	e7e3      	b.n	7e94 <pinctrl_configure_pins+0x12e>
		switch (NRF_GET_FUN(pins[i])) {
    7ecc:	f06f 0085 	mvn.w	r0, #133	; 0x85
    7ed0:	e752      	b.n	7d78 <pinctrl_configure_pins+0x12>

00007ed2 <mbox_nrf_register_callback>:
{
    7ed2:	b510      	push	{r4, lr}
	struct mbox_nrf_data *data = dev->data;
    7ed4:	6900      	ldr	r0, [r0, #16]
	if (channel >= IPC_CONF_NUM) {
    7ed6:	290f      	cmp	r1, #15
	data->cb[channel] = cb;
    7ed8:	bf9b      	ittet	ls
    7eda:	eb00 0481 	addls.w	r4, r0, r1, lsl #2
    7ede:	f840 2021 	strls.w	r2, [r0, r1, lsl #2]
		return -EINVAL;
    7ee2:	f06f 0015 	mvnhi.w	r0, #21
	return 0;
    7ee6:	2000      	movls	r0, #0
	data->user_data[channel] = user_data;
    7ee8:	bf98      	it	ls
    7eea:	6423      	strls	r3, [r4, #64]	; 0x40
}
    7eec:	bd10      	pop	{r4, pc}

00007eee <mbox_nrf_mtu_get>:
}
    7eee:	2000      	movs	r0, #0
    7ef0:	4770      	bx	lr

00007ef2 <mbox_nrf_max_channels_get>:
}
    7ef2:	2010      	movs	r0, #16
    7ef4:	4770      	bx	lr

00007ef6 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    7ef6:	f7fe be97 	b.w	6c28 <nrf_cc3xx_platform_init_no_rng>

00007efa <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    7efa:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    7efc:	f7fa fa72 	bl	23e4 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    7f00:	f7fa fb36 	bl	2570 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    7f04:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    7f08:	f7fe be8e 	b.w	6c28 <nrf_cc3xx_platform_init_no_rng>

00007f0c <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    7f0c:	4700      	bx	r0

00007f0e <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    7f0e:	f000 bae1 	b.w	84d4 <z_impl_k_busy_wait>

00007f12 <clock_stop>:
{
    7f12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7f14:	4605      	mov	r5, r0
    switch (domain)
    7f16:	2803      	cmp	r0, #3
    7f18:	d874      	bhi.n	8004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>
    7f1a:	e8df f000 	tbb	[pc, r0]
    7f1e:	2102      	.short	0x2102
    7f20:	3b2d      	.short	0x3b2d
    7f22:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    7f26:	2202      	movs	r2, #2
    7f28:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7f2c:	2200      	movs	r2, #0
    7f2e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    7f32:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7f36:	2201      	movs	r2, #1
    7f38:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    7f3a:	2301      	movs	r3, #1
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    7f3c:	429d      	cmp	r5, r3
    7f3e:	bf18      	it	ne
    7f40:	2400      	movne	r4, #0
    7f42:	f242 7710 	movw	r7, #10000	; 0x2710
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    7f46:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    7f4a:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    7f4e:	bf08      	it	eq
    7f50:	f10d 0407 	addeq.w	r4, sp, #7
    switch (domain)
    7f54:	2d03      	cmp	r5, #3
    7f56:	d855      	bhi.n	8004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>
    7f58:	e8df f005 	tbb	[pc, r5]
    7f5c:	4d443b2a 	.word	0x4d443b2a
    p_reg->INTENCLR = mask;
    7f60:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    7f64:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7f66:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
    7f68:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7f6c:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    7f70:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7f74:	605a      	str	r2, [r3, #4]
}
    7f76:	e7e0      	b.n	7f3a <clock_stop+0x28>
    p_reg->INTENCLR = mask;
    7f78:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    7f7c:	f44f 7200 	mov.w	r2, #512	; 0x200
    7f80:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7f84:	2200      	movs	r2, #0
    7f86:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    7f8a:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7f8e:	2201      	movs	r2, #1
    7f90:	625a      	str	r2, [r3, #36]	; 0x24
}
    7f92:	e7d2      	b.n	7f3a <clock_stop+0x28>
    p_reg->INTENCLR = mask;
    7f94:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    7f98:	f44f 7280 	mov.w	r2, #256	; 0x100
    7f9c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7fa0:	2200      	movs	r2, #0
    7fa2:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    7fa6:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7faa:	2201      	movs	r2, #1
    7fac:	61da      	str	r2, [r3, #28]
}
    7fae:	e7c4      	b.n	7f3a <clock_stop+0x28>
            if (p_clk_src != NULL)
    7fb0:	b124      	cbz	r4, 7fbc <clock_stop+0xaa>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    7fb2:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    7fb6:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    7fba:	7023      	strb	r3, [r4, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    7fbc:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    7fc0:	03db      	lsls	r3, r3, #15
    7fc2:	d51f      	bpl.n	8004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    7fc4:	b9d4      	cbnz	r4, 7ffc <clock_stop+0xea>
    7fc6:	2001      	movs	r0, #1
    7fc8:	f7ff ffa1 	bl	7f0e <nrfx_busy_wait>
    7fcc:	3f01      	subs	r7, #1
    7fce:	d1c1      	bne.n	7f54 <clock_stop+0x42>
    7fd0:	e018      	b.n	8004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>
            if (p_clk_src != NULL)
    7fd2:	b124      	cbz	r4, 7fde <clock_stop+0xcc>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    7fd4:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    7fd8:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    7fdc:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    7fde:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    7fe2:	e7ed      	b.n	7fc0 <clock_stop+0xae>
            if (p_clk_src != NULL)
    7fe4:	b124      	cbz	r4, 7ff0 <clock_stop+0xde>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
    7fe6:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
    7fea:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    7fee:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    7ff0:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
    7ff4:	e7e4      	b.n	7fc0 <clock_stop+0xae>
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    7ff6:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
    7ffa:	e7e1      	b.n	7fc0 <clock_stop+0xae>
    7ffc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8000:	2b01      	cmp	r3, #1
    8002:	d0e0      	beq.n	7fc6 <clock_stop+0xb4>
}
    8004:	b003      	add	sp, #12
    8006:	bdf0      	pop	{r4, r5, r6, r7, pc}

00008008 <nrfx_clock_enable>:
{
    8008:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    800a:	2005      	movs	r0, #5
    800c:	f7fa fb6e 	bl	26ec <arch_irq_is_enabled>
    8010:	b910      	cbnz	r0, 8018 <nrfx_clock_enable+0x10>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    8012:	2005      	movs	r0, #5
    8014:	f7fa fb46 	bl	26a4 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    8018:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    801c:	2201      	movs	r2, #1
    801e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->HFCLKSRC = (uint32_t)(source);
    8022:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
    8026:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
}
    802a:	bd08      	pop	{r3, pc}

0000802c <nrfx_clock_start>:
{
    802c:	b508      	push	{r3, lr}
    switch (domain)
    802e:	2803      	cmp	r0, #3
    8030:	d81e      	bhi.n	8070 <nrfx_clock_start+0x44>
    8032:	e8df f000 	tbb	[pc, r0]
    8036:	3302      	.short	0x3302
    8038:	4d3f      	.short	0x4d3f
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    803a:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    803e:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    8042:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    8046:	03c9      	lsls	r1, r1, #15
    8048:	d413      	bmi.n	8072 <nrfx_clock_start+0x46>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    804a:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    804e:	07db      	lsls	r3, r3, #31
    8050:	d419      	bmi.n	8086 <nrfx_clock_start+0x5a>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    8052:	2301      	movs	r3, #1
    p_reg->LFCLKSRC = (uint32_t)(source);
    8054:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    8058:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    805c:	2300      	movs	r3, #0
    805e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    8062:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    8066:	2302      	movs	r3, #2
    8068:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    806c:	2301      	movs	r3, #1
    806e:	6093      	str	r3, [r2, #8]
}
    8070:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    8072:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    8076:	2b02      	cmp	r3, #2
    8078:	d0ec      	beq.n	8054 <nrfx_clock_start+0x28>
    if (!is_correct_clk)
    807a:	2b01      	cmp	r3, #1
    807c:	d0ea      	beq.n	8054 <nrfx_clock_start+0x28>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    807e:	2000      	movs	r0, #0
    8080:	f7ff ff47 	bl	7f12 <clock_stop>
    8084:	e7e5      	b.n	8052 <nrfx_clock_start+0x26>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    8086:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    808a:	f003 0303 	and.w	r3, r3, #3
    if (!is_correct_clk)
    808e:	3b01      	subs	r3, #1
    8090:	2b01      	cmp	r3, #1
    8092:	d8f4      	bhi.n	807e <nrfx_clock_start+0x52>
    p_reg->INTENSET = mask;
    8094:	2302      	movs	r3, #2
    8096:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    809a:	e7e9      	b.n	8070 <nrfx_clock_start+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    809c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    80a0:	2200      	movs	r2, #0
    80a2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    80a6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    80aa:	2201      	movs	r2, #1
    80ac:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    80b0:	601a      	str	r2, [r3, #0]
}
    80b2:	e7dd      	b.n	8070 <nrfx_clock_start+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    80b4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    80b8:	2200      	movs	r2, #0
    80ba:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    80be:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
    80c2:	f44f 7200 	mov.w	r2, #512	; 0x200
    80c6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    80ca:	2201      	movs	r2, #1
    80cc:	621a      	str	r2, [r3, #32]
}
    80ce:	e7cf      	b.n	8070 <nrfx_clock_start+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    80d0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    80d4:	2200      	movs	r2, #0
    80d6:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    80da:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
    80de:	f44f 7280 	mov.w	r2, #256	; 0x100
    80e2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    80e6:	2201      	movs	r2, #1
    80e8:	619a      	str	r2, [r3, #24]
}
    80ea:	e7c1      	b.n	8070 <nrfx_clock_start+0x44>

000080ec <nrfx_clock_stop>:
    clock_stop(domain);
    80ec:	f7ff bf11 	b.w	7f12 <clock_stop>

000080f0 <nrf_gpio_reconfigure>:
{
    80f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    80f2:	4617      	mov	r7, r2
    80f4:	e9dd 4608 	ldrd	r4, r6, [sp, #32]
    80f8:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    80fa:	a801      	add	r0, sp, #4
{
    80fc:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    80fe:	f7fc fe57 	bl	4db0 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    8102:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    8104:	2f00      	cmp	r7, #0
    8106:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    810a:	bf14      	ite	ne
    810c:	2302      	movne	r3, #2
    810e:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    8110:	2900      	cmp	r1, #0
    8112:	bf18      	it	ne
    8114:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    8118:	2d00      	cmp	r5, #0
    811a:	bf14      	ite	ne
    811c:	f04f 0c0c 	movne.w	ip, #12
    8120:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    8124:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    8126:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    812a:	bf14      	ite	ne
    812c:	f44f 6c70 	movne.w	ip, #3840	; 0xf00
    8130:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    8134:	2e00      	cmp	r6, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    8136:	ea43 030c 	orr.w	r3, r3, ip
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    813a:	bf14      	ite	ne
    813c:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
    8140:	f04f 0c00 	moveq.w	ip, #0
    uint32_t cnf = reg->PIN_CNF[pin_number];
    8144:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    8148:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
    814c:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    8150:	b101      	cbz	r1, 8154 <nrf_gpio_reconfigure+0x64>
    8152:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    8154:	b10f      	cbz	r7, 815a <nrf_gpio_reconfigure+0x6a>
    8156:	783f      	ldrb	r7, [r7, #0]
    8158:	007f      	lsls	r7, r7, #1
    815a:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    815c:	b10d      	cbz	r5, 8162 <nrf_gpio_reconfigure+0x72>
    815e:	782d      	ldrb	r5, [r5, #0]
    8160:	00ad      	lsls	r5, r5, #2
    8162:	4339      	orrs	r1, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    8164:	b10c      	cbz	r4, 816a <nrf_gpio_reconfigure+0x7a>
    8166:	7822      	ldrb	r2, [r4, #0]
    8168:	0214      	lsls	r4, r2, #8
    816a:	430d      	orrs	r5, r1
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    816c:	b10e      	cbz	r6, 8172 <nrf_gpio_reconfigure+0x82>
    816e:	7836      	ldrb	r6, [r6, #0]
    8170:	0436      	lsls	r6, r6, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    8172:	432c      	orrs	r4, r5
    8174:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
    8176:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
}
    817a:	b003      	add	sp, #12
    817c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000817e <nrf_gpio_cfg_sense_set>:
{
    817e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    8180:	f10d 030f 	add.w	r3, sp, #15
    8184:	9301      	str	r3, [sp, #4]
    8186:	2300      	movs	r3, #0
{
    8188:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    818c:	461a      	mov	r2, r3
    818e:	4619      	mov	r1, r3
    8190:	9300      	str	r3, [sp, #0]
    8192:	f7ff ffad 	bl	80f0 <nrf_gpio_reconfigure>
}
    8196:	b005      	add	sp, #20
    8198:	f85d fb04 	ldr.w	pc, [sp], #4

0000819c <z_device_state_init>:
}
    819c:	4770      	bx	lr

0000819e <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    819e:	b138      	cbz	r0, 81b0 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    81a0:	68c3      	ldr	r3, [r0, #12]
    81a2:	8818      	ldrh	r0, [r3, #0]
    81a4:	f3c0 0008 	ubfx	r0, r0, #0, #9
    81a8:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    81ac:	4258      	negs	r0, r3
    81ae:	4158      	adcs	r0, r3
}
    81b0:	4770      	bx	lr

000081b2 <z_early_memset>:
	(void) memset(dst, c, n);
    81b2:	f7ff bc2e 	b.w	7a12 <memset>

000081b6 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    81b6:	f7ff bc21 	b.w	79fc <memcpy>

000081ba <k_mem_slab_init>:
{
    81ba:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    81bc:	2400      	movs	r4, #0
    81be:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    81c0:	ea41 0402 	orr.w	r4, r1, r2
    81c4:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    81c8:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
    81cc:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    81ce:	d10c      	bne.n	81ea <k_mem_slab_init+0x30>
	slab->free_list = NULL;
    81d0:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    81d2:	42a3      	cmp	r3, r4
    81d4:	d103      	bne.n	81de <k_mem_slab_init+0x24>
	list->tail = (sys_dnode_t *)list;
    81d6:	e9c0 0000 	strd	r0, r0, [r0]
}
    81da:	2000      	movs	r0, #0
}
    81dc:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    81de:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    81e0:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
    81e2:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
    81e4:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
    81e6:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    81e8:	e7f3      	b.n	81d2 <k_mem_slab_init+0x18>
		return -EINVAL;
    81ea:	f06f 0015 	mvn.w	r0, #21
	return rc;
    81ee:	e7f5      	b.n	81dc <k_mem_slab_init+0x22>

000081f0 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    81f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    81f2:	4604      	mov	r4, r0
    81f4:	460d      	mov	r5, r1
	__asm__ volatile(
    81f6:	f04f 0320 	mov.w	r3, #32
    81fa:	f3ef 8611 	mrs	r6, BASEPRI
    81fe:	f383 8812 	msr	BASEPRI_MAX, r3
    8202:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    8206:	6947      	ldr	r7, [r0, #20]
    8208:	b977      	cbnz	r7, 8228 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    820a:	f000 f905 	bl	8418 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    820e:	b158      	cbz	r0, 8228 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    8210:	682a      	ldr	r2, [r5, #0]
    8212:	6787      	str	r7, [r0, #120]	; 0x78
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    8214:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    8216:	f000 f88e 	bl	8336 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    821a:	4631      	mov	r1, r6
    821c:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    8220:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
    8224:	f7fd bfc0 	b.w	61a8 <z_reschedule>
	**(char ***) mem = slab->free_list;
    8228:	682b      	ldr	r3, [r5, #0]
    822a:	6962      	ldr	r2, [r4, #20]
    822c:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    822e:	682b      	ldr	r3, [r5, #0]
    8230:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    8232:	69a3      	ldr	r3, [r4, #24]
    8234:	3b01      	subs	r3, #1
    8236:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    8238:	f386 8811 	msr	BASEPRI, r6
    823c:	f3bf 8f6f 	isb	sy
}
    8240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00008242 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    8242:	f3ef 8005 	mrs	r0, IPSR
}
    8246:	3800      	subs	r0, #0
    8248:	bf18      	it	ne
    824a:	2001      	movne	r0, #1
    824c:	4770      	bx	lr

0000824e <z_impl_k_thread_name_set>:
}
    824e:	f06f 0057 	mvn.w	r0, #87	; 0x57
    8252:	4770      	bx	lr

00008254 <k_thread_name_get>:
}
    8254:	2000      	movs	r0, #0
    8256:	4770      	bx	lr

00008258 <z_pm_save_idle_exit>:
{
    8258:	b508      	push	{r3, lr}
	pm_system_resume();
    825a:	f7f9 ffc5 	bl	21e8 <pm_system_resume>
}
    825e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    8262:	f7ff bd47 	b.w	7cf4 <sys_clock_idle_exit>

00008266 <k_msgq_init>:
	msgq->max_msgs = max_msgs;
    8266:	e9c0 2302 	strd	r2, r3, [r0, #8]
	msgq->buffer_end = buffer + (max_msgs * msg_size);
    826a:	fb03 1202 	mla	r2, r3, r2, r1
	msgq->used_msgs = 0;
    826e:	2300      	movs	r3, #0
	msgq->read_ptr = buffer;
    8270:	e9c0 2105 	strd	r2, r1, [r0, #20]
    8274:	e9c0 0000 	strd	r0, r0, [r0]
	msgq->buffer_start = buffer;
    8278:	6101      	str	r1, [r0, #16]
	msgq->write_ptr = buffer;
    827a:	61c1      	str	r1, [r0, #28]
	msgq->used_msgs = 0;
    827c:	6203      	str	r3, [r0, #32]
	msgq->flags = 0;
    827e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
    8282:	4770      	bx	lr

00008284 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    8284:	f990 300e 	ldrsb.w	r3, [r0, #14]
    8288:	428b      	cmp	r3, r1
    828a:	d001      	beq.n	8290 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    828c:	f7fe b8f4 	b.w	6478 <z_set_prio>
}
    8290:	2000      	movs	r0, #0
    8292:	4770      	bx	lr

00008294 <z_impl_k_mutex_init>:
{
    8294:	4603      	mov	r3, r0
	mutex->owner = NULL;
    8296:	2000      	movs	r0, #0
    8298:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
    829c:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
    82a0:	4770      	bx	lr

000082a2 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    82a2:	b13a      	cbz	r2, 82b4 <z_impl_k_sem_init+0x12>
    82a4:	428a      	cmp	r2, r1
    82a6:	d305      	bcc.n	82b4 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    82a8:	e9c0 1202 	strd	r1, r2, [r0, #8]
    82ac:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    82b0:	2000      	movs	r0, #0
    82b2:	4770      	bx	lr
		return -EINVAL;
    82b4:	f06f 0015 	mvn.w	r0, #21
}
    82b8:	4770      	bx	lr

000082ba <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    82ba:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    82be:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    82c0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    82c2:	2300      	movs	r3, #0
	node->prev = NULL;
    82c4:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    82c8:	4770      	bx	lr

000082ca <unpend_thread_no_timeout>:
{
    82ca:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    82cc:	f7ff fff5 	bl	82ba <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    82d0:	7b43      	ldrb	r3, [r0, #13]
    82d2:	f023 0302 	bic.w	r3, r3, #2
    82d6:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    82d8:	2300      	movs	r3, #0
    82da:	6083      	str	r3, [r0, #8]
}
    82dc:	bd08      	pop	{r3, pc}

000082de <z_unpend_thread_no_timeout>:
{
    82de:	b508      	push	{r3, lr}
	__asm__ volatile(
    82e0:	f04f 0320 	mov.w	r3, #32
    82e4:	f3ef 8111 	mrs	r1, BASEPRI
    82e8:	f383 8812 	msr	BASEPRI_MAX, r3
    82ec:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    82f0:	f7ff ffeb 	bl	82ca <unpend_thread_no_timeout>
	__asm__ volatile(
    82f4:	f381 8811 	msr	BASEPRI, r1
    82f8:	f3bf 8f6f 	isb	sy
}
    82fc:	bd08      	pop	{r3, pc}

000082fe <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    82fe:	4603      	mov	r3, r0
    8300:	b920      	cbnz	r0, 830c <z_reschedule_irqlock+0xe>
    8302:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    8306:	b90a      	cbnz	r2, 830c <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    8308:	f7fa ba34 	b.w	2774 <arch_swap>
    830c:	f383 8811 	msr	BASEPRI, r3
    8310:	f3bf 8f6f 	isb	sy
}
    8314:	4770      	bx	lr

00008316 <z_reschedule_unlocked>:
	__asm__ volatile(
    8316:	f04f 0320 	mov.w	r3, #32
    831a:	f3ef 8011 	mrs	r0, BASEPRI
    831e:	f383 8812 	msr	BASEPRI_MAX, r3
    8322:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    8326:	f7ff bfea 	b.w	82fe <z_reschedule_irqlock>

0000832a <z_priq_dumb_best>:
{
    832a:	4603      	mov	r3, r0
	return list->head == list;
    832c:	6800      	ldr	r0, [r0, #0]
}
    832e:	4283      	cmp	r3, r0
    8330:	bf08      	it	eq
    8332:	2000      	moveq	r0, #0
    8334:	4770      	bx	lr

00008336 <z_ready_thread>:
{
    8336:	b510      	push	{r4, lr}
    8338:	f04f 0320 	mov.w	r3, #32
    833c:	f3ef 8411 	mrs	r4, BASEPRI
    8340:	f383 8812 	msr	BASEPRI_MAX, r3
    8344:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    8348:	f7fd fff0 	bl	632c <ready_thread>
	__asm__ volatile(
    834c:	f384 8811 	msr	BASEPRI, r4
    8350:	f3bf 8f6f 	isb	sy
}
    8354:	bd10      	pop	{r4, pc}

00008356 <z_thread_timeout>:
{
    8356:	4601      	mov	r1, r0
    8358:	b510      	push	{r4, lr}
	__asm__ volatile(
    835a:	f04f 0320 	mov.w	r3, #32
    835e:	f3ef 8411 	mrs	r4, BASEPRI
    8362:	f383 8812 	msr	BASEPRI_MAX, r3
    8366:	f3bf 8f6f 	isb	sy
		if (!killed) {
    836a:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    836e:	f013 0f28 	tst.w	r3, #40	; 0x28
    8372:	d10d      	bne.n	8390 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    8374:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    8378:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    837a:	b10b      	cbz	r3, 8380 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    837c:	f7ff ffa5 	bl	82ca <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    8380:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    8384:	f023 0314 	bic.w	r3, r3, #20
    8388:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    838c:	f7fd ffce 	bl	632c <ready_thread>
	__asm__ volatile(
    8390:	f384 8811 	msr	BASEPRI, r4
    8394:	f3bf 8f6f 	isb	sy
}
    8398:	bd10      	pop	{r4, pc}

0000839a <add_to_waitq_locked>:
{
    839a:	b538      	push	{r3, r4, r5, lr}
    839c:	4604      	mov	r4, r0
    839e:	460d      	mov	r5, r1
	unready_thread(thread);
    83a0:	f7fe f818 	bl	63d4 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    83a4:	7b63      	ldrb	r3, [r4, #13]
    83a6:	f043 0302 	orr.w	r3, r3, #2
    83aa:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    83ac:	b195      	cbz	r5, 83d4 <add_to_waitq_locked+0x3a>
    83ae:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    83b0:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    83b2:	429d      	cmp	r5, r3
    83b4:	d015      	beq.n	83e2 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    83b6:	b1a3      	cbz	r3, 83e2 <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
    83b8:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    83bc:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    83c0:	4291      	cmp	r1, r2
    83c2:	d008      	beq.n	83d6 <add_to_waitq_locked+0x3c>
		return b2 - b1;
    83c4:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    83c6:	2a00      	cmp	r2, #0
    83c8:	dd05      	ble.n	83d6 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
    83ca:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    83cc:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    83d0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    83d2:	605c      	str	r4, [r3, #4]
}
    83d4:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    83d6:	686a      	ldr	r2, [r5, #4]
    83d8:	4293      	cmp	r3, r2
    83da:	d002      	beq.n	83e2 <add_to_waitq_locked+0x48>
    83dc:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    83de:	2b00      	cmp	r3, #0
    83e0:	d1ec      	bne.n	83bc <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
    83e2:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    83e4:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    83e8:	601c      	str	r4, [r3, #0]
	list->tail = node;
    83ea:	606c      	str	r4, [r5, #4]
}
    83ec:	e7f2      	b.n	83d4 <add_to_waitq_locked+0x3a>

000083ee <z_unpend1_no_timeout>:
{
    83ee:	b510      	push	{r4, lr}
	__asm__ volatile(
    83f0:	f04f 0320 	mov.w	r3, #32
    83f4:	f3ef 8411 	mrs	r4, BASEPRI
    83f8:	f383 8812 	msr	BASEPRI_MAX, r3
    83fc:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    8400:	f7ff ff93 	bl	832a <z_priq_dumb_best>
		if (thread != NULL) {
    8404:	4601      	mov	r1, r0
    8406:	b108      	cbz	r0, 840c <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
    8408:	f7ff ff5f 	bl	82ca <unpend_thread_no_timeout>
	__asm__ volatile(
    840c:	f384 8811 	msr	BASEPRI, r4
    8410:	f3bf 8f6f 	isb	sy
}
    8414:	4608      	mov	r0, r1
    8416:	bd10      	pop	{r4, pc}

00008418 <z_unpend_first_thread>:
{
    8418:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    841a:	f04f 0320 	mov.w	r3, #32
    841e:	f3ef 8511 	mrs	r5, BASEPRI
    8422:	f383 8812 	msr	BASEPRI_MAX, r3
    8426:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    842a:	f7ff ff7e 	bl	832a <z_priq_dumb_best>
		if (thread != NULL) {
    842e:	4604      	mov	r4, r0
    8430:	b120      	cbz	r0, 843c <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
    8432:	f7ff ff4a 	bl	82ca <unpend_thread_no_timeout>
    8436:	3018      	adds	r0, #24
    8438:	f000 f806 	bl	8448 <z_abort_timeout>
	__asm__ volatile(
    843c:	f385 8811 	msr	BASEPRI, r5
    8440:	f3bf 8f6f 	isb	sy
}
    8444:	4620      	mov	r0, r4
    8446:	bd38      	pop	{r3, r4, r5, pc}

00008448 <z_abort_timeout>:
{
    8448:	b510      	push	{r4, lr}
	__asm__ volatile(
    844a:	f04f 0220 	mov.w	r2, #32
    844e:	f3ef 8411 	mrs	r4, BASEPRI
    8452:	f382 8812 	msr	BASEPRI_MAX, r2
    8456:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    845a:	6803      	ldr	r3, [r0, #0]
    845c:	b13b      	cbz	r3, 846e <z_abort_timeout+0x26>
			remove_timeout(to);
    845e:	f7fe f9ff 	bl	6860 <remove_timeout>
			ret = 0;
    8462:	2000      	movs	r0, #0
	__asm__ volatile(
    8464:	f384 8811 	msr	BASEPRI, r4
    8468:	f3bf 8f6f 	isb	sy
}
    846c:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    846e:	f06f 0015 	mvn.w	r0, #21
    8472:	e7f7      	b.n	8464 <z_abort_timeout+0x1c>

00008474 <z_get_next_timeout_expiry>:
{
    8474:	b510      	push	{r4, lr}
	__asm__ volatile(
    8476:	f04f 0320 	mov.w	r3, #32
    847a:	f3ef 8411 	mrs	r4, BASEPRI
    847e:	f383 8812 	msr	BASEPRI_MAX, r3
    8482:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    8486:	f7fe f9c5 	bl	6814 <next_timeout>
	__asm__ volatile(
    848a:	f384 8811 	msr	BASEPRI, r4
    848e:	f3bf 8f6f 	isb	sy
}
    8492:	bd10      	pop	{r4, pc}

00008494 <z_set_timeout_expiry>:
{
    8494:	b570      	push	{r4, r5, r6, lr}
    8496:	4604      	mov	r4, r0
    8498:	460d      	mov	r5, r1
	__asm__ volatile(
    849a:	f04f 0320 	mov.w	r3, #32
    849e:	f3ef 8611 	mrs	r6, BASEPRI
    84a2:	f383 8812 	msr	BASEPRI_MAX, r3
    84a6:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    84aa:	f7fe f9b3 	bl	6814 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    84ae:	2801      	cmp	r0, #1
    84b0:	dd05      	ble.n	84be <z_set_timeout_expiry+0x2a>
    84b2:	42a0      	cmp	r0, r4
    84b4:	db03      	blt.n	84be <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    84b6:	4629      	mov	r1, r5
    84b8:	4620      	mov	r0, r4
    84ba:	f7fc f927 	bl	470c <sys_clock_set_timeout>
	__asm__ volatile(
    84be:	f386 8811 	msr	BASEPRI, r6
    84c2:	f3bf 8f6f 	isb	sy
}
    84c6:	bd70      	pop	{r4, r5, r6, pc}

000084c8 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    84c8:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    84ca:	f7fe fab9 	bl	6a40 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    84ce:	bd08      	pop	{r3, pc}

000084d0 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    84d0:	f7fe bab6 	b.w	6a40 <sys_clock_tick_get>

000084d4 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    84d4:	b108      	cbz	r0, 84da <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    84d6:	f7f9 b895 	b.w	1604 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    84da:	4770      	bx	lr

000084dc <k_timer_init>:
	timer->status = 0U;
    84dc:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
    84de:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
    84e2:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
    84e6:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
    84ea:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
    84ee:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
    84f0:	6343      	str	r3, [r0, #52]	; 0x34
}
    84f2:	4770      	bx	lr

000084f4 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    84f4:	b510      	push	{r4, lr}
    84f6:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
    84f8:	f7ff ffa6 	bl	8448 <z_abort_timeout>

	if (inactive) {
    84fc:	b9b0      	cbnz	r0, 852c <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    84fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8500:	b10b      	cbz	r3, 8506 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    8502:	4620      	mov	r0, r4
    8504:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    8506:	f104 0018 	add.w	r0, r4, #24
    850a:	f7ff ff70 	bl	83ee <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    850e:	b168      	cbz	r0, 852c <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    8510:	f7ff ff11 	bl	8336 <z_ready_thread>
	__asm__ volatile(
    8514:	f04f 0320 	mov.w	r3, #32
    8518:	f3ef 8011 	mrs	r0, BASEPRI
    851c:	f383 8812 	msr	BASEPRI_MAX, r3
    8520:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    8524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
    8528:	f7ff bee9 	b.w	82fe <z_reschedule_irqlock>
    852c:	bd10      	pop	{r4, pc}

0000852e <k_heap_init>:
{
    852e:	b410      	push	{r4}
    8530:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    8534:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    8538:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    853a:	f7fe becf 	b.w	72dc <sys_heap_init>

0000853e <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    853e:	4770      	bx	lr
